<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>記錄用</title>
    <link>https://aben20807.github.io/</link>
    <description>Recent content on 記錄用</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <managingEditor>aben20807@gmail.com (Huang Po-Hsuan)</managingEditor>
    <webMaster>aben20807@gmail.com (Huang Po-Hsuan)</webMaster>
    
    <atom:link href="https://aben20807.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo v0.60</title>
      <link>https://aben20807.github.io/posts/20191201-hugo-0-60/</link>
      <pubDate>Sun, 01 Dec 2019 17:26:34 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20191201-hugo-0-60/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;記錄一下 hugo 的改變 QuQ&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;因為實在改的有點多東西，直接在 FB 發(抱)文(怨)又有點沒架構，所以乾脆來個小整理。另外這也不是全部，主要是我有遇到的 QuQ&lt;/p&gt;
&lt;p&gt;這裡主要是從 0.59 到 0.60 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 的一些記錄。&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;不同之處&lt;/h1&gt;
&lt;h2 id=&#34;parser&#34;&gt;Parser&lt;/h2&gt;
&lt;p&gt;最大不同就是 markdown parser 從原本的 &lt;a href=&#34;https://github.com/russross/blackfriday&#34;&gt;Blackfriday&lt;/a&gt; 換成使用 &lt;a href=&#34;https://github.com/yuin/goldmark/&#34;&gt;Goldmark&lt;/a&gt; 為預設了。所以有一堆是用 regex 改的內容全都要再改規則＠＠，例如 &lt;code&gt;&amp;lt;img xxx /&amp;gt;&lt;/code&gt; 這類的 self-closing tags &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 把最後的 &lt;code&gt;/&lt;/code&gt; 去掉了變成 &lt;code&gt;&amp;lt;img xxx&amp;gt;&lt;/code&gt;，所以剛剛是看不到圖片的。我已經改成讓 &lt;code&gt;/&lt;/code&gt; 可有可無了&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;footnote&#34;&gt;Footnote&lt;/h2&gt;
&lt;p&gt;Footnote 的部份被大改了，產生的 html 跟原本的不太一樣，然後 0.60.1 好像有一些修改 &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; ，所以可能還要再等等 QuQ，目前 snap 最新還在 0.60.0 所以還不能返回 (&lt;code&gt;footnoteAnchorPrefix&lt;/code&gt;, &lt;code&gt;footnoteReturnLinkContents&lt;/code&gt; 也還沒看到實作&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;)。之後還要加入 smooth scroll 讓捲動有動畫而不是直接跳 (這邊我也是用 regex)。&lt;/p&gt;
&lt;h2 id=&#34;-markdown--html&#34;&gt;預設不可以在 markdown 中使用 html&lt;/h2&gt;
&lt;p&gt;如果有加一些非 markdown 語法的 html 的話預設會變成 &lt;code&gt;&amp;lt;!-- raw HTML omitted --&amp;gt;&lt;/code&gt;
(例如從 google 雲端嵌入 pdf 檔案之類的)，如果想要修改這個預設 &lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; 的話可以在 config.tmol 裡面加入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;]
[&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goldmark&lt;/span&gt;]
[&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goldmark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;renderer&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading2&#34;&gt;後記&lt;/h1&gt;
&lt;p&gt;J 個改變的速度其實有點小惱人，每次都想棄用 snap，但換個想法，這是走在世界的尖端啊 (x&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo/releases/tag/v0.60.0&#34;&gt;hugo v0.60.0 release&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://discuss.codecademy.com/t/no-ending-for-self-closing-link-element/201099&#34;&gt;No ending &amp;lsquo;/&amp;rsquo; for self-closing link element?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yuin/goldmark/blob/54fc7c3/extension/footnote.go#L236-L247&#34;&gt;yuin/goldmark:236-247&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo/issues/6551&#34;&gt;Support footnote return links #6551&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/getting-started/configuration-markup/&#34;&gt;Configure Markup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Programming Sense (2)</title>
      <link>https://aben20807.github.io/posts/20191118-programming-sense-2/</link>
      <pubDate>Mon, 18 Nov 2019 11:36:33 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20191118-programming-sense-2/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;結果因為太多項了導致右邊的目錄超出邊界，所以還是要拆成兩篇。QuQ&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aben20807.github.io/posts/20191116-programming-sense/&#34;&gt;{{ 上一篇傳送門：Programming Sense (1) }}&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;-abstractionhttpsenwikipediaorgwikiabstractioncomputerscience&#34;&gt;抽像化 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Abstraction_(computer_science)&#34;&gt;Abstraction&lt;/a&gt;)&lt;/h1&gt;
&lt;p&gt;盡量的抽象化自己的程式，最簡單的方式就是把相關的程式碼包成一塊，而不是散在主函式中，包起來的動作通常稱作封裝 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)&#34;&gt;Encapsulation&lt;/a&gt;)，也有實作成 ADT (&lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_data_type&#34;&gt;Abstract data type&lt;/a&gt;) 一說。&lt;/p&gt;
&lt;p&gt;主要目的就是讓程式碼可重複使用，並讓簡化主函式的流程。抽象化過程要想著如何讓別人 (包括未來的自己) 使用自己的程式碼。可以透過將函式切成一個函式只做一件事讓可重複利用率提高。&lt;/p&gt;
&lt;p&gt;例如實作一個 Queue 時，可以將存放的結構 (陣列)、操作指標 (front, rear) 放在同一個 &lt;code&gt;struct&lt;/code&gt; 中，甚至將 enqueue 和 dequeue 做成函式指標 (function pointer) 一起放入 &lt;code&gt;struct&lt;/code&gt; 中。注意，以下程式碼尚未測試過&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 結構定義
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Queue {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; que[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; front;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rear;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;enque)(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Queue &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;deque)(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Queue &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
};

&lt;span style=&#34;color:#75715e&#34;&gt;// 初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Queue &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;init_queue&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Queue &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Queue), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  ret&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;front &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  ret&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;rear &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  ret&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;enque &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; enque; &lt;span style=&#34;color:#75715e&#34;&gt;// 須另外定義 enque 函式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  ret&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;deque &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; deque; &lt;span style=&#34;color:#75715e&#34;&gt;// 須另外定義 deque 函式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 使用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Queue &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; init_queue();
  q&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;enque(q, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);
  q&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;deque(q);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading&#34;&gt;寫程式的過程&lt;/h1&gt;
&lt;h2 id=&#34;heading1&#34;&gt;思考&lt;/h2&gt;
&lt;p&gt;不先思考就直接寫程式的話是很危險的，通常最後很容易落得需要打掉重練的情況，預先思考可以避免掉一些盲點。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1uYiTbRQ-bmFDkJE-MC_z-HyemZzzz6kA&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading2&#34;&gt;待解決的問題&lt;/h3&gt;
&lt;p&gt;首先得理解題目或問題的要求，如果有提供範例輸入輸出的話請一定要按照給定的格式，不能多也不能少。不過這在現實中比較少見，很多情況是要去設計防呆的。&lt;/p&gt;
&lt;p&gt;直覺的解法一定有，但是通常會有大量的迴圈拖慢程式執行，儘管現在的硬體好到讓我們感覺不出差異，但是還是需要正視這個問題，因為當需求一擴大，效能瓶頸就會是一個大問題。&lt;/p&gt;
&lt;p&gt;以下題目來自 108-1 成大資工 資料結構作業三 (這裡放上題目，不過我不打算解它，雖然這樣會比較完整，可是我真的沒空 QuQ)&lt;/p&gt;
&lt;iframe src=&#34;https://drive.google.com/file/d/1N7S4ynPmXpMYVZVgJdL0_h0K_IYXCwUl/preview&#34; width=&#34;100%&#34; height=&#34;340px&#34;&gt;&lt;/iframe&gt;
&lt;h3 id=&#34;heading3&#34;&gt;是否能簡化&lt;/h3&gt;
&lt;p&gt;以範例問題來說，題目會給定 N 個團體，每個群體的人數不定。最直觀的方法是使用二維陣列存放這 N 個團體各自的成員，要檢查 A 是否屬於某個群體時使用雙層迴圈去搜尋這個二維陣列，都找不到則代表不屬於任何團體。&lt;/p&gt;
&lt;p&gt;然而這樣每次搜尋都要耗費不少資源，甚至需要不少程式碼。更好的作法可以對題目的細節做解讀，題目提到成員只會有 A~Z 所以我們可以直接產生一個長度為 26 的整數陣列 &lt;code&gt;people_group_ids&lt;/code&gt; (更好的方式是使用 dict 不過 C 沒有內建) 來存放這 26 的人的團體編號，為了方便初始化，可以讓 0 代表沒有團體接著往上累加，讀取到範例輸入讀取到 3 A B C 時，在陣列的 0 1 2 位置上填入 1，等到要查詢 A 的團體編號時就可以使用 &lt;code&gt;people_group_ids[0]&lt;/code&gt; 來查詢了，原本 $O(nm)$ 的複雜度直接降為 $O(1)$，程式碼上也較為清楚。另外關於 A 對應 0 要怎麼寫，這就需要對字元有一些了解，可以觀察一下 &lt;a href=&#34;https://en.wikipedia.org/wiki/ASCII&#34;&gt;ASCII 表格&lt;/a&gt;，&lt;code&gt;person = &#39;B&#39;;&lt;/code&gt; 的話我們只需要使用 &lt;code&gt;person - &#39;A&#39;&lt;/code&gt;; 就可以得到 &lt;code&gt;1&lt;/code&gt; 了，把這個操作放到函式中增加可讀性的話更棒如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_group_id&lt;/span&gt;(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; people_group_ids,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; person) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; people_group_ids[person &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;];
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_group_id&lt;/span&gt;(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; people_group_ids,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; person,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; group_id) {
  people_group_ids[person &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; group_id;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;插隊的話只需要從 queue 的頭找 &lt;code&gt;group_id&lt;/code&gt; 相同的人即可。&lt;/p&gt;
&lt;h3 id=&#34;heading4&#34;&gt;事前設計&lt;/h3&gt;
&lt;p&gt;這裡表達的不是一定要畫出 UML 或是先做好完整架構圖，而是有一點架構就可以，有簡易的流程圖當然更棒，但是我自己通常會在腦中進行，遇到比較大型的才會拿一張紙畫一下流程，這裡推薦 &lt;a href=&#34;https://www.draw.io/&#34;&gt;draw.io&lt;/a&gt; 這個完美的應用程式，可以應付各種圖。&lt;/p&gt;
&lt;h2 id=&#34;heading5&#34;&gt;小步前進，持續驗證&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;寫大程式要像西敏寺那樣的大教堂一樣，先從一個功能完整的小教堂開始，然後把小部分拆掉蓋個更大更豪華的；如果一次就想蓋個超大的教堂，最後可能弄成一團廢墟，連禮拜的功能都沒有。&lt;br&gt;
&amp;mdash; Yoda 生活筆記 (Lee You Tang) &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;等萬事俱備只欠打扣時我們就可以開始寫程式囉，最有效率的流程就是小步前進逐步驗證，不要一次就把程式打完，這樣執行發現跟結果不一樣時，問題就會非常難找，是輸入錯誤還是中間的邏輯錯誤或是輸出錯誤，若沒有逐步驗證的話，哪個階段出問題真的很難定位。&lt;/p&gt;
&lt;p&gt;我的做法會先將輸入部分完成，並且印出結果確認是否跟想像中的結果一模一樣，這裡必須要注意是否有奇怪的換行，或是輸出的順序不對等等問題，因為 C 的輸入會有許多隱藏的陷阱，也許是把空格也當成一個成員之類的。操作的指令也是把讀到的直接印出來確認。驗證完畢才繼續往下一步走。 細心檢查每一個魔鬼細節才能達到最終目的。&lt;/p&gt;
&lt;p&gt;強烈建議每一次的驗證完後搭配 git commit 把階段性成果記錄下來。&lt;/p&gt;
&lt;p&gt;enque 跟 deque 一樣分開驗證，這時候我們需要加上一些輔助的程式碼幫助我們印出 queue 的內容，來保證每次的操作都是正確的。例如：&lt;code&gt;print_queue()&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;-debug&#34;&gt;除錯 (Debug)&lt;/h1&gt;
&lt;h2 id=&#34;heading6&#34;&gt;編譯訊息&lt;/h2&gt;
&lt;p&gt;編譯器產生的訊息相當重要，而且不是只有 Error 重要，Warning 也是一大關鍵，所以千萬不要忽略這些警告，反而要將這些警告視為錯誤，這裡推薦在編譯的時候加上 &lt;code&gt;-Wall -Werror&lt;/code&gt; 這樣那些警告就會導致編譯錯誤了。&lt;/p&gt;
&lt;h2 id=&#34;heading7&#34;&gt;設計測資&lt;/h2&gt;
&lt;p&gt;題目給的測資一定很少，但是實際會遇到的情況相當多，所以一定要多設計幾組測試資料，可以利用上一篇提到的重新導向 (Redirection) 的方式才不用每次都要重新手打，照理說可以再加上 Makefile 來幫忙，可以參考我的另外一篇 &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id=&#34;heading8&#34;&gt;註解大法&lt;/h2&gt;
&lt;p&gt;用註解部份程式碼來找出錯誤是最簡單的方式，但這我通常是用來幫別人抓錯的時候會用，因為我不確定其是否使用逐步驗證的方式，因此只有結果錯誤，但是中間的過程無法直接看出是哪邊有問題，利用註解的方式隔離未驗證的程式碼來逐步比對。&lt;/p&gt;
&lt;h2 id=&#34;printf-&#34;&gt;&lt;code&gt;printf&lt;/code&gt; 好夥伴&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt; 是一個相當神奇且好用的函式，其底層非常複雜歡迎有興趣的人可以參考 &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。我的習慣是在實作不同資料結構時都會做一個對應的函式來印出其內容以方便驗證。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_queue&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Queue &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; q) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;) {
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%c &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, q&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;que[i]);
  }
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;gdb&#34;&gt;GDB&lt;/h2&gt;
&lt;p&gt;GDB (&lt;a href=&#34;https://www.gnu.org/software/gdb/&#34;&gt;The GNU Project Debugger&lt;/a&gt;) 是 segmentation fault 發生時的好夥伴，它可以幫助你找出程式是在哪裡發生錯誤，這樣就可以去找出對應的解決方法。關於原生的 GDB 有點樸素這點我之前有寫過一篇介紹 &lt;a href=&#34;https://github.com/cyrus-and/gdb-dashboard&#34;&gt;GDB dashboard&lt;/a&gt; 可以參考 &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h1 id=&#34;heading9&#34;&gt;後記&lt;/h1&gt;
&lt;p&gt;突然發現自己好像也不是這麼悠閒，不過還是把這些趕出來了，可能會有錯 (範例打錯或錯字) 再請大家幫忙抓漏 了，感恩 QuQ。很多部份也都沒有附上範例，這可能之後有需要的話可以補上。歡迎討論也歡迎在我有空的時候找我幫忙 review 程式碼，這對我來說也是一種成長的來源吧。身邊如果有人願意幫你 review 的話請盡量把握，也在此感謝曾經幫我看過程式碼的貴人們。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://yodalee.blogspot.com/2019/11/rust-visitor.html&#34;&gt;把一顆樹寫出來是會有多難&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.maizure.org/projects/printf/index.html?fbclid=IwAR2fPTM7CxfIWD7pC_crmp-UFDPG2RZ7BH-62e-TCjPmxhzwLyT_D7oEYak&#34;&gt;Tearing apart printf()&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://aben20807.blogspot.com/2018/06/1070618-gdb-gdb-dashboard.html&#34;&gt;107.06.18 好看的 gdb, gdb-dashboard&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://aben20807.github.io/posts/20190216-makefile-for-testing/&#34;&gt;Makefile for Testing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Programming Sense (1)</title>
      <link>https://aben20807.github.io/posts/20191116-programming-sense/</link>
      <pubDate>Sat, 16 Nov 2019 08:53:13 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20191116-programming-sense/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;主要是我自己編寫邊學慢慢累積的，說真的也找不太到相關的資源，要搜尋也不知道下什麼關鍵字，問別人其實也很難在一時半刻裡解釋清楚，所以就拿來發一篇吧 OuO&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;期中加資格考的爆炸禮拜終於結束，其實比我想得還要容易，雖然我都很沒把握，因為我幾乎不狂寫考古題，而是以觀念取勝，有沒有取到就不確定了。&lt;/p&gt;
&lt;p&gt;寫程式很簡單，拿來解決問題就有些難度，最難的是用優雅易懂且嚴謹的程式碼來解決問題，寫得好絕對遠遠好過寫得快。&lt;/p&gt;
&lt;p&gt;關於這個主題，其實很早就打算寫了，只是一直擱置連架構都沒出來，直到最近有幫同學看一下程式碼，所以覺得這個觀念還是頗為重要，所以整理一下發個文，主要也希望可以幫助比較沒經驗的人，但也不限於此，我相信也會有畢業於資訊工程相關科系而沒有這些觀念。&lt;/p&gt;
&lt;p&gt;當然在整個程式界我也不是老手，幾乎沒在開源貢獻，更沒參與過業界，所以很多的概念是我在大學時期慢慢累積起來的，主要來源就是一些開源的專案還有自身的經驗，不能說涵蓋得很全面，也不是說我這套最棒了大家看了之後一定要照這些規則，這篇從來就不是規則，而是我在寫了幾年程式後整理出來讓自己開發更為流暢的一些想法，希望大家能夠來互相討論給與意見。&lt;/p&gt;
&lt;p&gt;架構會以不同的主題當作探討，雖然全部都是在講 programming sense，內容因為相當廣泛，切成不同文章又會讓某些部分零碎化，所以請善用標題跟右方的目錄來幫助閱讀。順序以 &amp;ldquo;工具&amp;rdquo;，&amp;ldquo;coding style&amp;rdquo;，&amp;ldquo;習慣養成&amp;rdquo;，&amp;ldquo;抽像化&amp;rdquo;，&amp;ldquo;寫程式的過程&amp;rdquo;，&amp;ldquo;除錯&amp;rdquo;。並主要以 C 語言當作講解範例。&lt;/p&gt;
&lt;p&gt;雖然雜但是請記得一個中心思想：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用程式碼來溝通 (Communication Through Code)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;heading1&#34;&gt;工具&lt;/h1&gt;
&lt;p&gt;「工欲善其事，必先利其器」《論語·衛靈公》 善用工具真的頗為重要，使用得當可以大量減少重複性的動作，如果是寫一般的小程式的話我會建議可以玩看看 &lt;a href=&#34;https://en.wikipedia.org/wiki/Vim_(text_editor)&#34;&gt;VIM&lt;/a&gt; 設定可以參考&lt;a href=&#34;https://github.com/aben20807/aben20807.vim&#34;&gt;我的設定&lt;/a&gt;或直接問我，可以大量減少手部的負擔。大型一點的我會推薦 &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;，因為內容會偏多所以我就用一個副標題來說明了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1kYWGLrrnkeQaVo2OwbMZQddDu6iIn-do&#34; alt=&#34;google-vi&amp;hellip; &#34;&gt; &lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;vscode&#34;&gt;VSCode&lt;/h2&gt;
&lt;p&gt;VSCode 其實不太像一般的 IDE，它更像一個單純的文字編輯器，只是有相當多好用的外掛功能，基本的包含了對各種語言的程式碼的關鍵字 highlight、檔案架構樹、搜尋取代功能、編碼轉換、coding style 自動重新排版。以下附上一些我目前服役中的外掛功能，使用方法就請各位自己前往查看了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alefragnani.bookmarks&lt;/code&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks&#34;&gt;🔗&lt;/a&gt;： 可以在想要標記的程式碼上加入書籤，這個在瀏覽大型專案需要跳來跳去 trace 程式碼下可以幫很大的忙，至少不用再記是第幾行了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coenraads.bracket-pair-colorizer&lt;/code&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&#34;&gt;🔗&lt;/a&gt;：連結對應的括號，這在括號一堆的語言 (C, C++, Java, Lisp) 相當有幫助，可以一眼就看出在哪個有效範圍 (scope)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;streetsidesoftware.code-spell-checker&lt;/code&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker&#34;&gt;🔗&lt;/a&gt;：幫忙檢查英文拼字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabnine.tabnine-vscode&lt;/code&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode&#34;&gt;🔗&lt;/a&gt;：程式碼補全建議。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gruntfuggly.todo-tree&lt;/code&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree&#34;&gt;🔗&lt;/a&gt;：收集註解中有 &lt;code&gt;TODO&lt;/code&gt; 標籤的地方。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;donjayamanne.githistory&lt;/code&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory&#34;&gt;🔗&lt;/a&gt;：Git 系列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eamodio.gitlens&lt;/code&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&#34;&gt;🔗&lt;/a&gt;：Git 系列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zhuangtongfa.material-theme&lt;/code&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme&#34;&gt;🔗&lt;/a&gt;：耐看主題。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vscode-icons-team.vscode-icons&lt;/code&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons&#34;&gt;🔗&lt;/a&gt;：美美的檔案圖示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1YrpZ2ktFpMxR3Y7MZM0zBrt4DtRFNmga&#34; alt=&#34;google-名稱拿去搜尋即可&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;shell&#34;&gt;Shell&lt;/h2&gt;
&lt;p&gt;很多指令都是可以幫助懶惰的人，目前我還沒有遇過我想要但是沒有的指令。&lt;/p&gt;
&lt;h3 id=&#34;-redirection&#34;&gt;重新導向 (Redirection)&lt;/h3&gt;
&lt;p&gt;寫程式時會常使用重新導向 (Redirection) 的方式來減少標準輸入 (stdin) 的次數，用法也相當直觀，只需要先將測試輸入先打在一份文檔 (例如：input.txt) 中，再使用以下指令執行程式即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./queue &amp;lt; input.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若要把標準輸出 (stdout) 存到另一份文件時呢，當然也是使用重新導向。這適合在輸出很多時或是需要搜尋結果時使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./queue &amp;lt; input.txt &amp;gt; output.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;coding-style&#34;&gt;Coding Style&lt;/h1&gt;
&lt;p&gt;這是一個看似微小卻非常重要的細節，尤其是需要別人幫忙 review 甚至是合作時都需要事先講好共用的 coding style，一來格式統一閱讀時不需要轉換，二來可以避免因為工具自動調整造成不必要的程式改動紀錄。&lt;/p&gt;
&lt;p&gt;看別人的程式碼時最怕遇到沒有縮排的&amp;hellip;&lt;/p&gt;
&lt;p&gt;這裡涵蓋的範圍包括了縮排、空格、括號、命名。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1srj3r8VaQ4_csG69Lr3vQD_ENvjEXmJH&#34; alt=&#34;google-pythonize &amp;hellip; 別亂學 XDD&#34;&gt; &lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;google-coding-style&#34;&gt;Google Coding Style&lt;/h2&gt;
&lt;p&gt;若要偷懶，強烈建議就直接用最多人使用的就好，很多工具都有辦法幫忙重新排版程式碼，這裡展示如何用 VSCode 來設定 Google 使用的 coding style，規定的格式細節可參考 &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;Google C++ Style Guide&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1lCoOvNF61c1WaNoZ2MhO9QioANQS3HUS&#34; alt=&#34;google-開啟設定&#34;&gt;
&lt;img src=&#34;https://drive.google.com/open?id=1RCaxBhfaLrVM84FoD3ekeu4AmtBhnxLJ&#34; alt=&#34;google-搜尋 format style，將欄位改成 Google&#34;&gt;
&lt;img src=&#34;https://drive.google.com/open?id=1rALSINyYBW1JuCiWsj1IVSLhiI_-_rXd&#34; alt=&#34;google-使用格式化可以用右鍵或是直接按對應的快捷鍵&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;heading2&#34;&gt;習慣養成&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;傻瓜都可以寫出機器能讀懂的代碼，但只有專業程序員才能寫出人能讀懂的代碼。&lt;br&gt;
&amp;mdash; 系統程序員成長計劃&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;coding-style-again&#34;&gt;Coding Style Again&lt;/h2&gt;
&lt;p&gt;用工具是很方便沒錯，不過盡量還是養成習慣而不依賴工具，這裡介紹幾個比較常見的格式：&lt;/p&gt;
&lt;h3 id=&#34;-blank&#34;&gt;空行 (Blank)&lt;/h3&gt;
&lt;p&gt;把所有操作寫在同一個函式裡面通常不容易辦到，因此不免會有某些區塊在做相關的事，合理使用空行能夠讓讀者很容易就看出程式碼的這些區塊的用途。&lt;/p&gt;
&lt;h3 id=&#34;-indent&#34;&gt;縮排 (Indent)&lt;/h3&gt;
&lt;p&gt;我以前偏好 4 個空格，但是最近有往兩個空格移動的趨勢，另外 Google 也是以 2 個空格為主。然而 Linux kernel 是使用 tab，這裡其實只要跟合作的夥伴們講好統一使用一種即可，就不提有統計指出用 space 賺的錢比用 tab 的人多了 &lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id=&#34;if-statement&#34;&gt;If Statement&lt;/h3&gt;
&lt;h4 id=&#34;heading3&#34;&gt;加上空格們&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(condition) {   &lt;span style=&#34;color:#75715e&#34;&gt;// Bad
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (condition){   &lt;span style=&#34;color:#75715e&#34;&gt;// Bad
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(condition){    &lt;span style=&#34;color:#75715e&#34;&gt;// Doubly bad
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (condition) {  &lt;span style=&#34;color:#75715e&#34;&gt;// Good
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading4&#34;&gt;加上大括號們&lt;/h4&gt;
&lt;p&gt;這裡我會比較嚴格規定自己，就算是只有一行也要加，這樣比較方便擴充，例如臨時要加上 &lt;code&gt;printf&lt;/code&gt; 時就不用再加。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (condition) {
  foo;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
  bar;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;loop-statement&#34;&gt;Loop Statement&lt;/h3&gt;
&lt;h4 id=&#34;heading5&#34;&gt;加上空格們&lt;/h4&gt;
&lt;p&gt;注意 &lt;code&gt;;&lt;/code&gt; 前不要後要。&lt;br&gt;
這裡用 &lt;code&gt;i++&lt;/code&gt; 或 &lt;code&gt;++i&lt;/code&gt; 其實基本上沒有效能差異 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，編譯器會幫你最佳化，我更喜歡 &lt;code&gt;i++&lt;/code&gt; 因為要改成 &lt;code&gt;i+=2&lt;/code&gt; 之類的比較方便，另外也是有 &lt;code&gt;i-=-1&lt;/code&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 這種邪教&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; some_number; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;) {
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;OuO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pointer-&#34;&gt;Pointer 變數宣告&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;int*x;&lt;/code&gt;、&lt;code&gt;int *x;&lt;/code&gt;、&lt;code&gt;int* x&lt;/code&gt;、&lt;code&gt;int * x&lt;/code&gt; 都是可編譯的寫法，在 C 中 &lt;code&gt;int *x;&lt;/code&gt; 更為常用。C++ 中反而是 &lt;code&gt;int* x;&lt;/code&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id=&#34;-naming-convention&#34;&gt;命名 (Naming Convention)&lt;/h3&gt;
&lt;h4 id=&#34;-variable-function&#34;&gt;檔案名稱、變數 (Variable)、函式 (Function)&lt;/h4&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Snake_case&#34;&gt;snake_case&lt;/a&gt; 並取有上下文關係的名字，例如 &lt;code&gt;flag&lt;/code&gt;、&lt;code&gt;count&lt;/code&gt; 就沒有上下文，會不知道這個變數要用來存放什麼東西。&lt;br&gt;
e.g., &lt;code&gt;http_server_logs.h&lt;/code&gt;、&lt;code&gt;table_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Google 的函式也可用 UpperCamelCase，但我個人比較習慣 snake_case，另外函式須以動詞開頭以表明動作。&lt;br&gt;
e.g., &lt;code&gt;add_table_entry&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;struct-class&#34;&gt;Struct, Class&lt;/h4&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Camel_case&#34;&gt;UpperCamelCase&lt;/a&gt; 
e.g., &lt;code&gt;UrlTableProperties&lt;/code&gt;, &lt;code&gt;TableInfo&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;-constant&#34;&gt;常數 (Constant)&lt;/h4&gt;
&lt;p&gt;使用全大寫並以 &lt;code&gt;_&lt;/code&gt; 連接。&lt;br&gt;
e.g., &lt;code&gt;MAX_ROW_SIZE&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;-initialize&#34;&gt;初始化 (Initialize)&lt;/h2&gt;
&lt;p&gt;寫 C 語言時要注意變數的初始化，以免結果跟自己所想的不一樣，這是因為在規格書中的定義中提到，只有全域變數或是靜態 (static) 變數會被初始化，其他未初始化的則不會有明確的初始值。 C99 §6.7.8.10 &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。在陣列的初始化若要全部定義為 &lt;code&gt;\0&lt;/code&gt;，我們可以直接在宣告中使用 &lt;code&gt;{}&lt;/code&gt; 即可，因為規格書中有規定若初始化的個數不足則會比照靜態變數 C99 §6.7.8.21 &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 每個變數宣告時搭配初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// 陣列初始化以下都可以
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; que[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; que[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; que[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-comment&#34;&gt;註解 (Comment)&lt;/h2&gt;
&lt;p&gt;請盡量使用英文來註解，因為英文比較不像中文那樣一詞多義，可以較明確的敘述，若執意要用中文就需要注意編碼，目前主流應該是使用 UTF8。內容部份可以多記錄一點上下文而不是僅僅該行程式碼做了什麼事，通常註解會拿來說明整個函式，會需要一行一行註解的情況比較少並會用高可讀性的程式馬來替代。我之前有找到一篇非常詳盡的指南 &lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; 可以參考看看 (雖然我也沒有仔細讀完就是了＠＠&lt;/p&gt;
&lt;p&gt;寫法上注意空格即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// OuO
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* OuO */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-side-effect&#34;&gt;副:作用 (Side Effect)&lt;/h2&gt;
&lt;p&gt;副作用 (&lt;a href=&#34;https://en.wikibooks.org/wiki/C_Programming/Side_effects_and_sequence_points&#34;&gt;Side Effect&lt;/a&gt;) 聽起來好像很不妙，簡單來說就是會在函式內部修改到參數的情況。其實這在一般程式語言中頗為常見，沒有這項功能的話程式會變得相當難寫，例如 Functional language 寫起來就頗耗費腦力。&lt;/p&gt;
&lt;h3 id=&#34;heading6&#34;&gt;在函式宣告時點出副作用&lt;/h3&gt;
&lt;p&gt;但是在開發過程需要適時隔離變化，C 語言提供了 &lt;code&gt;const&lt;/code&gt; 修飾字來標示該參數在函式中不會被修改。以下範例中的 &lt;code&gt;rear&lt;/code&gt; 和 &lt;code&gt;orig&lt;/code&gt;  不會被修改到內容，所以可以利用 &lt;code&gt;const&lt;/code&gt; 來提醒函式呼叫者該參數不會被改動，反之 &lt;code&gt;front&lt;/code&gt; 就有機會被改動。詳細的排列組合可以參考 &lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deque&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;orig, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rear) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rear) {
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Empty&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, orig[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front]);
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// rear, orig 皆是指向一個唯讀參數 (read-only parameter)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 的唯讀指標 (read-only location)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 若嘗試在函式中修改 `rear` 或 `*rear` 就會得到編譯錯誤
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deque&lt;/span&gt;(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; orig,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; rear) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-pointer&#34;&gt;需要修改的才傳入其指標 (Pointer)&lt;/h3&gt;
&lt;p&gt;這裡要先宣導一個觀念就是 C 語言只有 Pass By Value，也就是只會複製傳入變數的數值，傳入指標也是一樣，我們只是傳入了指標這個數值，而透過這個指標的取值 (dereference) 可以改動對應的記憶體位置 C99 §6.5.2.2.4 &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。而因為 C 的函式回傳值只限一個，所以大部分會使用修改參數的方式來回傳數值，而真正的回傳值就用來表示函式是否正確執行，否則就回傳對應的錯誤碼。&lt;/p&gt;
&lt;p&gt;上面那樣改起來好像太奇葩，更好的解決方式是要先思考，把將要在函式內部更動變數在傳入其指標，其餘的只須把數值傳進去即可。當然若是傳入陣列就還是需要指標就像 &lt;code&gt;orig&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 因為最後一個參數不會變動而且只需要其數值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 所以直接以常數傳入，當然函式內部就不需要取值了
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deque&lt;/span&gt;(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; orig,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rear_value) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rear_value) {
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Empty&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, orig[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front]);
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;front &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading7&#34;&gt;多檔案&lt;/h2&gt;
&lt;h3 id=&#34;-include&#34;&gt;避免重複 include&lt;/h3&gt;
&lt;p&gt;專案擴張下，必然會用到多檔案，這時候就會拆成很多的 &lt;code&gt;.h&lt;/code&gt;, &lt;code&gt;.c&lt;/code&gt; 檔，&lt;code&gt;.h&lt;/code&gt; 用來作為界面的溝通，這時候一定要使用 macro (&lt;a href=&#34;https://en.wikipedia.org/wiki/Include_guard&#34;&gt;Include guard&lt;/a&gt;) 防止重複 include。以下為檔名為 &lt;code&gt;file.h&lt;/code&gt; 的內容範例：&lt;code&gt;FILE_H&lt;/code&gt;, &lt;code&gt;_FILE_H&lt;/code&gt;, &lt;code&gt;__FILE_H__&lt;/code&gt; 都有人用，但一般以第一種為主即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;ifndef FILE_H&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define FILE_H&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* ... Declarations etc here ... */&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;endif &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* FILE_H */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-static-&#34;&gt;用 &lt;code&gt;static&lt;/code&gt; 修飾內部函數&lt;/h3&gt;
&lt;p&gt;如果在多檔案下函數並不是要開放給其他檔案呼叫時，請加上 &lt;code&gt;static&lt;/code&gt; 來保證只有當前檔案內部可以看到那個函數。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_local_function&lt;/span&gt;() {
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;OuO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading8&#34;&gt;避免使用危險的函式們&lt;/h2&gt;
&lt;p&gt;C 語言給予使用者相當大的彈性但用起來需要知道自己在做什麼，否則會有許多安全性漏洞，有一些函式很容易造成誤用，連資深工程師也常用錯，因此蠻多專案直接把不安全的函式禁用，例如 Git &lt;sup id=&#34;fnref:12&#34;&gt;&lt;a href=&#34;#fn:12&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;12&lt;/a&gt;&lt;/sup&gt;，Intel 的 safestringlib 也有一個完整列表 &lt;sup id=&#34;fnref:13&#34;&gt;&lt;a href=&#34;#fn:13&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;13&lt;/a&gt;&lt;/sup&gt;。以下給出一些較常見的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gets()&lt;/code&gt; &lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt; C11 已經不支援，請改用 &lt;code&gt;fgets()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strcpy()&lt;/code&gt; 沒有長度偵測。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strncpy()&lt;/code&gt; 有長度但是不會在結尾補上 &lt;code&gt;\0&lt;/code&gt; &lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ato*()&lt;/code&gt; 改用 &lt;code&gt;strto*()&lt;/code&gt; 利於錯誤處理 C99 §7.20.1 &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading9&#34;&gt;其他習慣&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;盡量不使用全域變數&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://aben20807.github.io/posts/20191118-programming-sense-2/&#34;&gt;{{ 下一篇傳送門：Programming Sense (2) }}&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/24887/6734174&#34;&gt;Is there a performance difference between i++ and ++i in C?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/DasSurma/status/1192736235447619584&#34;&gt;&lt;code&gt;i-=-1&lt;/code&gt; is hipster, expressive and symmetric&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://www.stroustrup.com/bs_faq2.html#whitespace&#34;&gt;Is &lt;code&gt;int* p;&lt;/code&gt; right or is &lt;code&gt;int *p;&lt;/code&gt; right?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&#34;&gt;C99 規格書 ISO/IEC 9899:TC3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/&#34;&gt;Developers Who Use Spaces Make More Money Than Those Who Use Tabs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://antirez.com/news/124&#34;&gt;Writing system software: code comments.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/tpope/status/1172743697315835904&#34;&gt;Tim Pope: when people ask me to recommend a text editor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/ProgrammerHumor/comments/2wrxyt/a_python_programmer_attempting_java/&#34;&gt;A Python programmer attempting Java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:9&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/1143272&#34;&gt;What is the difference between const int*, const int * const, and int const *?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:10&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://cwe.mitre.org/data/definitions/242.html&#34;&gt;CWE-242: Use of Inherently Dangerous Function&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:11&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://devblogs.microsoft.com/oldnewthing/?p=36773&#34;&gt;How can code that tries to prevent a buffer overflow end up causing one?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:12&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/git/git/blob/master/banned.h&#34;&gt;git/banned.h&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:13&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/intel/safestringlib/wiki/SDL-List-of-Banned-Functions&#34;&gt;SDL List of Banned Functions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Numpy Array Truncate</title>
      <link>https://aben20807.github.io/posts/20191022-numpy-array-truncate/</link>
      <pubDate>Tue, 22 Oct 2019 20:27:13 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20191022-numpy-array-truncate/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;踩個雷 OuO&lt;/p&gt;
&lt;p&gt;numpy 的 &lt;code&gt;trunc&lt;/code&gt; [1] 好像沒有針對小數點以下幾位做設定，一次只能全砍變成整數，可是又不能用 &lt;code&gt;around&lt;/code&gt; [2] 解決。&lt;/p&gt;
&lt;p&gt;網路上有找到解法 [3]：很直覺，就是先乘大，truncate 後再除&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trunc&lt;/span&gt;(values, decs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trunc(values&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;decs)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;decs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不過這有個問題，可以從以下程式觀察：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trunc&lt;/span&gt;(a, decimals&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trunc(a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;decimals)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;decimals)

arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;1.123456789&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.234567890&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.45678901&lt;/span&gt;]))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)

arr_tr6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; trunc(arr, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr_tr6)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr_tr6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)

arr_tr20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; trunc(arr, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr_tr20)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr_tr20&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;輸出如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;[1.1234568 2.2345679 3.456789 ]
float32
[1.123456 2.234567 3.456789]
float64
[1.1234568357467651 2.234567880630493 3.456789016723633]
object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不對啊，型別怎麼不一樣了 OAO&lt;/p&gt;
&lt;p&gt;所以如果不想要型別被改動的話可能要在最後轉成原來的型別&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trunc&lt;/span&gt;(a, decimals&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trunc(a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;decimals)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;decimals))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)

arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;1.123456789&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.234567890&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.45678901&lt;/span&gt;]))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)

arr_tr6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; trunc(arr, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr_tr6)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr_tr6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)

arr_tr20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; trunc(arr, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr_tr20)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr_tr20&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;輸出：(但是就有型別限制的最大儲存長度了)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;[1.1234568 2.2345679 3.456789 ]
float32
[1.123456 2.234567 3.456789]
float32
[1.1234568 2.2345679 3.456789 ]
float32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完美 OuO&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/generated/numpy.trunc.html&#34;&gt;numpy.trunc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html&#34;&gt;numpy.around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href=&#34;https://stackoverflow.com/a/46020635/6734174&#34;&gt;Truncating decimal digits numpy array of floats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>資料整理</title>
      <link>https://aben20807.github.io/posts/20191019-data-statistic/</link>
      <pubDate>Sat, 19 Oct 2019 11:20:13 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20191019-data-statistic/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=1NnbVE8x3tW3BDpNNNdohXiyM4jyVIgPs --&gt;
&lt;p&gt;剛好用到一些蠻有用的工具，記錄一下&lt;/p&gt;
&lt;p&gt;資料：一個檔案 13 個數字共有 10,000 個檔案。&lt;br&gt;
目的：視覺化平均後的 13 欄資料&lt;br&gt;
主要分作以下步驟：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;合併 10,000 筆資料到一個檔案方便複製&lt;/li&gt;
&lt;li&gt;用 Google Spreadsheet 來平均並製作圖表&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-&#34;&gt;1. 合併&lt;/h2&gt;
&lt;p&gt;檔案架構大致如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;├── mae_0000.txt
├── mae_0001.txt
├── mae_0002.txt
├── mae_0003.txt
├── mae_0004.txt
├── mae_0005.txt
├── mae_0006.txt
├── mae_0007.txt
├── mae_0008.txt
├── mae_0009.txt
├── mae_0010.txt
├── mae_0011.txt
├── mae_0012.txt
.
.
.
└── mae_9999.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以首先我們需要合併，這裡介紹一個頗好用的指令 &lt;code&gt;paste&lt;/code&gt;。 &lt;code&gt;paste&lt;/code&gt; 可以將資料水平合併，例如：(左邊行號，右邊內容)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cat a.txt b.txt c.txt 
───────┬──────────────────────────────────────────
       │ File: a.txt
───────┼──────────────────────────────────────────
   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
───────┴──────────────────────────────────────────
───────┬──────────────────────────────────────────
       │ File: b.txt
───────┼──────────────────────────────────────────
   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
───────┴──────────────────────────────────────────
───────┬──────────────────────────────────────────
       │ File: c.txt
───────┼──────────────────────────────────────────
   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
───────┴──────────────────────────────────────────

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ paste *.txt &amp;gt; all.txt
$ cat all.txt 
───────┬──────────────────────────────────────────
       │ File: all.txt
───────┼──────────────────────────────────────────
   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   │ &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
───────┴──────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以我們一樣可以用 &lt;code&gt;paste *.txt &amp;gt; all.txt&lt;/code&gt; 來把 10,000 資料都整理到同一個檔案，&lt;/p&gt;
&lt;p&gt;此時如果出現 &lt;code&gt;Too many open files&lt;/code&gt; 的錯誤，可以使用以下指令來增加同時可開啟的檔案數&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ulimit -Hn &lt;span style=&#34;color:#ae81ff&#34;&gt;10240&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# The hard limit&lt;/span&gt;
$ ulimit -Sn &lt;span style=&#34;color:#ae81ff&#34;&gt;10240&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# The soft limit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;成功變成一個檔案後發現它的 column 太多了 Spreadsheet 無法直接貼上，所以接下來要轉置一下。&lt;/p&gt;
&lt;p&gt;這裡我們使用 awk 來幫忙，新增一個 &lt;code&gt;transpose.sh&lt;/code&gt; 的檔案，內容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    for (i=1; i&amp;lt;=NF; i++)  {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        a[NR,i] = $i
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;NF&amp;gt;p { p = NF }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;END {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    for(j=1; j&amp;lt;=p; j++) {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        str=a[1,j]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        for(i=2; i&amp;lt;=NR; i++){
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            str=str&amp;#34; &amp;#34;a[i,j];
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        print str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#39;&lt;/span&gt; $1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;變更一下執行權限，就可以執行了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ chmod +x transpose.sh 
$ ./transpose.sh all.txt &amp;gt; all_tr.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣資料就會從原本的往右長變成往下長&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1dZ7u6raak9lUQiPR5DKxUTRjQJWPTPFZ&#34; alt=&#34;google-轉置前&#34;&gt;
&lt;img src=&#34;https://drive.google.com/open?id=1_vu6Is-UDZqvWJodUJjdVlmbGokwct5O&#34; alt=&#34;google-轉置後&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;-google-spreadsheep&#34;&gt;使用 Google Spreadsheep&lt;/h2&gt;
&lt;p&gt;這裡可能比較沒啥，就是貼上去，這裡我覺得不要用 vim 開啟，找個方便複製的 (例如：VSCode)&lt;/p&gt;
&lt;p&gt;用 Ctrl-v 貼上 Spreadsheet 時可能會花一點時間&lt;/p&gt;
&lt;p&gt;不過發現它把所有的 column 合在一起了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1jluF0VN_pDaifwAjVaJVsklIb5j3w7nN&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;我們選取第一個 column 然後點上方的 &amp;ldquo;資料&amp;rdquo; &amp;gt; &amp;ldquo;將文字分隔成不同欄&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1daksDj4iW6FCgvoTi9pxrQks7RYxBd4c&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;它會自動將第一個 column 分出來，這時後會冒出一個小視窗 (有點不明顯，有時候要滾動一下才會出現)，把下拉式選單點開選擇 &amp;ldquo;空格&amp;rdquo; 這樣它就會把所有 column 分開了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=13wfpf9aTKIqahEW-WUjAWkTAH-zwLlAf&#34; alt=&#34;google- &#34;&gt;
&lt;img src=&#34;https://drive.google.com/open?id=1sUbYYqab7gdhWDDSFX0eJUxujb7_zfPn&#34; alt=&#34;google- &#34;&gt;
&lt;img src=&#34;https://drive.google.com/open?id=1NnbVE8x3tW3BDpNNNdohXiyM4jyVIgPs&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;平均跟圖表部份就按照一般試算表的使用方式，就不記錄了。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;參考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/1729980/6734174&#34;&gt;An efficient way to transpose a file in Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unix.stackexchange.com/a/205646&#34;&gt;Combining large amount of files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>天氣之子 Weathering With You</title>
      <link>https://aben20807.github.io/posts/20190919-weathering-with-you/</link>
      <pubDate>Thu, 19 Sep 2019 23:35:06 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190919-weathering-with-you/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=1e-W33G5mxkcyW8UggrgalOOMiN0rCVHG --&gt;
&lt;p&gt;看完直接來寫一波 OuO&lt;br&gt;
趁還沒看其他人的影評先來說一下看完當下的一些感想&lt;br&gt;
!!!! 強烈暴雷注意 !!!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;果然誠哥回不去了&lt;br&gt;
果然有貓&lt;br&gt;
果然有瀧跟三葉&lt;br&gt;
果然沒有縮時鏡頭&lt;br&gt;
果然音樂都頗讚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這些當然不是我在看電影前就預測，而是邊看邊喔～果然&lt;/p&gt;
&lt;p&gt;話說這個聲優陣容有點厲害&lt;/p&gt;
&lt;p&gt;所以我這幾天有點膽顫心驚，深怕一不小心就被暴雷了，我甚至連已經在 YouTube 出現的音樂都沒聽過，看到相關新聞快速掠過。&lt;/p&gt;
&lt;p&gt;雖然我總是口頭說著喜歡下雨，但是再好幾次的雨天也都會覺得很麻煩，這次能夠用天氣當作動畫題材我真心佩服。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1e-W33G5mxkcyW8UggrgalOOMiN0rCVHG&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;首先第一個果然，從 2002年《星之聲》, 2004年《雲之彼端，約定的地方》, 2007年 《秒速5公分》, 2011年《追逐繁星的孩子》, 2013年《言葉之庭》全部都有一種會使人心痛的寂寞感，但想當然爾大家喜歡的是像迪士尼那樣友好結局的作品，2016年《你的名字》就出現了，直接讓新海誠導演成為討論的焦點，而成功關鍵就是有好的結局，就如同細田守2009年《夏日大作戰》一樣是大家喜愛的電影。但是誠哥舊時的那種寂寞感已經不復存在，較不失理的講法就是稱那些新的影片為商業導向即為商業片。&lt;/p&gt;
&lt;p&gt;對我來說，我是不會說一定只看之前的影片，但是我是很喜歡那種寂寞感的，雖然有點傷身體 XDD，有興趣可以先從《追逐繁星的孩子》、《言葉之庭》入門，經典是《秒速5公分》。但有時我也覺得商業片不錯，至少看了心情會好。&lt;/p&gt;
&lt;p&gt;第二個果然，我覺得導演頗愛貓，可以去看一個可愛的短片：&lt;a href=&#34;https://www.youtube.com/watch?v=wafGAcUim5A&#34;&gt;猫の集会&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;第三個果然，其實在《你的名字》就有出現類似的彩蛋，裡面有《言葉之庭》的孝雄和雪野。&lt;/p&gt;
&lt;p&gt;第四個果然，我看完之後想果然沒有縮時攝影，但是明明天氣這種用縮時會很好看啊。不過注意《天氣之子》裡面都是在講短暫的天氣變化，這也難怪沒地方塞縮時了。&lt;/p&gt;
&lt;p&gt;第五個果然，在電影院的環繞音效下音樂都頗棒，煙火那邊的 BGM 會起雞皮疙瘩，兩個人在天空的那首最為氣派也最需要比較好的環繞來聽。然後因為我歌跟歌名還沒對起來，待我聽個幾日再更新吧 OuO&lt;/p&gt;
&lt;p&gt;主角們最後為了自己而許願，這並不是妥協於世界已經在崩壞的藉口，而是有所選擇下的結果。&lt;/p&gt;
&lt;p&gt;老實說我一度以為會想辦法解決這個雨一直下不停的狀況，結果最後是就直接在這裡停止，我想這也是頗好，帶了一點點不是這麼完美的結局結束。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;20190921-&#34;&gt;2019.09.21 補充&lt;/h2&gt;
&lt;p&gt;怎麼講呢，認真要挑反而沒有一首代表性的 (跟《你的名字》有點像)，不過我會想放グランドエスケープ(Grand Escape) - RADWIMPS (feat.三浦透子)，因為是電影短版所以那種到高潮處嘎然而止的感覺跟電影有點像，重低音的背景我有點愛但不太適合狂聽就是了。&lt;/p&gt;







&lt;div
  style=&#34; position: relative; width: 100%; height: 100%;
    padding-bottom: 56.25%;  //16:9 &#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/j4fIz2ozjO0?start=1&#34;
  style=&#34; position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34;
  class=&#34;center&#34;
  allowfullscreen frameborder=&#34;0&#34;
  title=&#34;YouTube Video&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;不過，大丈夫 (We&#39;ll be alright) - RADWIMPS 這首的歌詞最棒最符合這部主角的心境了 OuO&lt;/p&gt;







&lt;div
  style=&#34; position: relative; width: 100%; height: 100%;
    padding-bottom: 56.25%;  //16:9 &#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/tEL6EQE66FA?start=1&#34;
  style=&#34; position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34;
  class=&#34;center&#34;
  allowfullscreen frameborder=&#34;0&#34;
  title=&#34;YouTube Video&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;另外，我上面的淺薄心得都是在看任何影評之前靠著自己寫的，有一個短評我覺得跟我想表達的有點像可是講得非常好 (我太爛啦XD)：【影評/解析】《天氣之子》-為了你，我可以放棄世界 | 超粒方&lt;/p&gt;







&lt;div
  style=&#34; position: relative; width: 100%; height: 100%;
    padding-bottom: 56.25%;  //16:9 &#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/xFc8aLYF2e0?start=1&#34;
  style=&#34; position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34;
  class=&#34;center&#34;
  allowfullscreen frameborder=&#34;0&#34;
  title=&#34;YouTube Video&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>我的學習方式</title>
      <link>https://aben20807.github.io/posts/20190911-how-i-learn-in-university/</link>
      <pubDate>Wed, 11 Sep 2019 22:18:43 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190911-how-i-learn-in-university/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=https://drive.google.com/open?id=11dfe_7DVpwD2njTDBgIu23p1B4c_M7-d --&gt;
&lt;p&gt;大學畢業後突然有感，感覺需要記錄一下。&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;其實這只是一段紀錄，不是要說你們一定要學著這樣做，當然如果你覺得不錯可以試試看，不過如果發現太晚看到了，沒關係，生命自會找到出路，人生裡沒有什麼是繞遠路的。總之把這篇當作是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%80%96%E5%AD%98%E8%80%85%E5%81%8F%E5%B7%AE&#34;&gt;倖存者偏差&lt;/a&gt;的文章我也不會說什麼。&lt;/p&gt;
&lt;p&gt;另外，雖然主要是大學，不過我覺得這個學習方式是在國中的時候被養成的，高中時有機會得以更加磨練，大學時用的得心應手。&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;國高中的啟蒙&lt;/h1&gt;
&lt;p&gt;剛好都是生物課 (結果我現在的領域截然不同)。國中生物課是老師通常用投影片跟講義上課，然後會有東西需要填空，當時是因為老師頗有趣而且會需要畫一堆生物相關的圖片所以我算是蠻認真上課。高中的生物老師一樣有趣，不過教學方式是純板書，而且字相當的「藝術」(當下沒記到的話之後一定會看不懂的那種)，但是因為整理的相當好，所以我都會在他講課的當下把聽到的東西抄成手稿，板書只是用來輔助我沒抄到的部份，這裡訓練到了寫字的速度及反應，然後之後再找時間轉換成比較精美的筆記，突然發現我在高中生物花了很多時間@@。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11ckRrYyumxt0qTjxS9Dz98gpH6JYNdpx&#34; alt=&#34;google-高中生物手稿&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11rgEhk6nd47jcfyTdt8KQsk7xRLh_3Ll&#34; alt=&#34;google-高中生物筆記&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;heading2&#34;&gt;正文&lt;/h1&gt;
&lt;p&gt;好像有蠻多人，不管是自己的心態亦或是將學習意願缺乏怪在教課的教授身上，這群人總是認為自己學習更有效率，甚至課都不用去上，考前讀個幾天或僅需一整夜即可應付大大小小的測驗。其實不然，若只把讀書拿來應付考試實在過於短視。&lt;/p&gt;
&lt;p&gt;我想說，最懶惰最輕鬆的方式絕對是「認真上課加抄筆記」，我的作法是即時將教授上課所講得知識轉換成自己能快速理解的語言並寫在活頁紙上，我覺得寫字還是很難被取代，因為自由度相當大，臨時要畫圖什麼的可以不需要任何切換。除了考試外，有其他額外的技能能夠訓練，例如教授上課的教學技巧，並非只有教得好的值得學習，那些聽得很吃力的可以學到怎樣的方式是不適合的間接可以拿來調整自己。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11LbbgbouvwIlnpDm8EPL7mPabBjnPVin&#34; alt=&#34;google-作業系統 process scheduling&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11HKH0-EwLVEK74ggSIQdhYyzH3nGf5gA&#34; alt=&#34;google-作業系統 fork&#34;&gt;&lt;/p&gt;
&lt;p&gt;活頁紙也是方便之後做補充或調整。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11H5tRYqoTCEClbPqH1ZmXB5T-ig8S4v5&#34; alt=&#34;google-計算理論 NFA&#34;&gt;&lt;/p&gt;
&lt;p&gt;有時也會用便利貼做補充或整理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11j_ElOGVmLW678tEFavcdFBZt287Ft2l&#34; alt=&#34;google-計算機概論&#34;&gt;&lt;/p&gt;
&lt;p&gt;甚至是跨頁的指向。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11ttY-5mgL8rAxY9Zj6gvDMqWaGQkuMfv&#34; alt=&#34;google-工程數學 第二位移定理&#34;&gt;&lt;/p&gt;
&lt;p&gt;解題心法，工數教授會口述，所以我抄起來 (紅字) 以免忘記&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11fn8OvmD3bc5NTRRmGzORoSw4QaAReg2&#34; alt=&#34;google-工程數學&#34;&gt;&lt;/p&gt;
&lt;p&gt;必考題重點標記。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11tzUGk0lsDuDGs7KbOUBPZqL6aUn6z3F&#34; alt=&#34;google-資料結構 Binary Tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;因為抄筆記已經成為一種習慣了，所以你可以看到不管什麼課我都可以抄。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11D90v_2P7X6bBZNNTwx9Clkxy6k9_Pac&#34; alt=&#34;google-法政哲學 康德自由意志&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=11_a3xYpk5UX3HtZP_tJi4LOtI2NoQo0E&#34; alt=&#34;google-憲政民主體制&#34;&gt;&lt;/p&gt;
&lt;p&gt;總之我認為邊上課邊寫出讓自己易於理解筆記的過程，與直譯器 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Interpreter_(computing)&#34;&gt;Interpreter&lt;/a&gt;) 有 87% 相似度，根本就是人體直譯器。 然後算是最近才知道這非常接近&lt;a href=&#34;https://medium.com/y-pointer/%E7%9F%A5%E8%AD%98-967cca95a939&#34;&gt;費曼學習法&lt;/a&gt;，只是我還有加上即時產出。&lt;/p&gt;
&lt;p&gt;另外因為是即時改寫，所以也算是有訓練到重寫的技能，這在未來寫論文上可能會比較需要。&lt;/p&gt;
&lt;p&gt;使用這個方法我認為算是比較容易能夠維持好成績的，不會像臨時抱佛腳那樣浮動比較大，至於好成績有什麼用我就另外列在下面了，別在說「大學成績沒啥用，有過就好」這種話，但是當然也是有缺點的。&lt;/p&gt;
&lt;h1 id=&#34;heading3&#34;&gt;認真上課的缺點&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;需要有人 (教授) 幫忙整理資料變成自己的輸入&lt;/li&gt;
&lt;li&gt;缺少主動去學習的能力&lt;/li&gt;
&lt;li&gt;如果需要大量思考的內容會比較吃力，例如：演算法&lt;/li&gt;
&lt;li&gt;會有更多時間做自己的事，不夠自律的話會浪費時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;heading4&#34;&gt;補充：成績好可能有的好處&lt;/h1&gt;
&lt;p&gt;(相關規定自己查嘿 OuO)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;獎學金 &amp;ndash; (雖然我沒拿過我們學校的)&lt;/li&gt;
&lt;li&gt;提早畢業 &amp;ndash; (有成績門檻，雖然我也沒用到)&lt;/li&gt;
&lt;li&gt;不用補習考研，靠推甄 &amp;ndash; (直接省一大筆錢加一堆時間)&lt;/li&gt;
&lt;li&gt;出國 GPA &amp;ndash; (據說國外成績看頗重)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;同學都把你當學霸&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;heading5&#34;&gt;結論&lt;/h1&gt;
&lt;p&gt;整體來說，認真上課的 CP 值真的頗高。&lt;/p&gt;
&lt;h1 id=&#34;heading6&#34;&gt;後記&lt;/h1&gt;
&lt;p&gt;畢業之後回想，這個學習方式是很輕鬆，但是缺點就是自己讀書的時間太少，而這卻是大學跟研究所之間的差異，也就是說讀研究所時，會傾向學生已經具備從書本學習已建構好的知識，研究所則是不會又統一的教材，必須自行找到相關的期刊論文、研究、實驗、找出新方法。因此現在的我就會有之前書讀得太少的感覺。&lt;/p&gt;
&lt;p&gt;然而這些知識現在大部分都已經散落在網路上的，怎麼下關鍵字找答案以及如何分辨真偽反而是更重要的課題。不過下關鍵字的能力我是覺得我算很不錯，因為很多問題只能自己上網找答案之類的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Valgrind 的 Memcheck</title>
      <link>https://aben20807.github.io/posts/20190817-valgrind-memcheck/</link>
      <pubDate>Sat, 17 Aug 2019 11:17:09 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190817-valgrind-memcheck/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=1_AbE-ZZwgjrCTgCi9ypGCVyYqWvxDO6f --&gt;
&lt;p&gt;簡單玩玩 @@&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;之前大學時期 (講得好像很久之前 OuO) 的某幾個作業我有拿來測試自己的程式碼是否有 memory leak 的情況，會發生這種情況主要原因是沒有對每一個 alloc 做 free。&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;T490s&lt;/li&gt;
&lt;li&gt;Ubuntu 18.04&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;valgrind--memcheck&#34;&gt;Valgrind 的 Memcheck&lt;/h1&gt;
&lt;p&gt;要一篇講完 Valgrind 基本上有點難，而且東西頗雜，我也是邊摸邊記錄，因為 Valgrind 有很多工具可以用，本篇主要講解預設的工具 &lt;strong&gt;memcheck&lt;/strong&gt;，當然也只是部份的部份而已 QuQ。顧名思義是用來檢測記憶體使用情況，主要用在 C 及 C++。它是以插入額外程式碼 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Profiling_(computer_programming)#Instrumentation&#34;&gt;Instrumentation&lt;/a&gt;) 的方式來記錄記憶體的使用，根據 wiki，memcheck 幾乎對所有指令的周圍都插入額外的檢測程式碼用來追蹤記憶體區塊的有效性 (validity)。原因是因為一開始未被分配的區塊都會是無效 (invalid) 或是未定義 (undefined)，當這些區快被初始化後，memcheck 仍繼續追蹤 V bits (&lt;a href=&#34;http://valgrind.org/docs/manual/mc-manual.html#mc-manual.value&#34;&gt;Valid-value bits&lt;/a&gt;) 及 A bits (&lt;a href=&#34;http://valgrind.org/docs/manual/mc-manual.html#mc-manual.vaddress&#34;&gt;Valid-address bits&lt;/a&gt;)。此外，還實做了記憶體分配器 (&lt;a href=&#34;https://en.wikipedia.org/wiki/C_dynamic_memory_allocation&#34;&gt;memory allocator&lt;/a&gt;)，也就是定義了 &lt;code&gt;malloc&lt;/code&gt; 與 &lt;code&gt;free&lt;/code&gt; 之類的函式來記錄呼叫次數。&lt;/p&gt;
&lt;p&gt;總結來說，主要用來做以下項目檢測：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用位初始化的記憶體空間&lt;/li&gt;
&lt;li&gt;讀或寫一塊已經 &lt;code&gt;free&lt;/code&gt; 過得區塊&lt;/li&gt;
&lt;li&gt;讀或寫超過一塊 &lt;code&gt;malloc&lt;/code&gt; 取得合法的大小&lt;/li&gt;
&lt;li&gt;記憶體洩漏 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Memory_leak&#34;&gt;Memory leaks&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不過插入外程式碼是有代價的，就是效能會變低許多。&lt;/p&gt;
&lt;h2 id=&#34;heading2&#34;&gt;安裝&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt install valgrind
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading3&#34;&gt;使用&lt;/h2&gt;
&lt;h3 id=&#34;-memory-leak-detection&#34;&gt;測試記憶體洩漏 (Memory leak detection)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;));
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, a);
    &lt;span style=&#34;color:#75715e&#34;&gt;// free(a);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading4&#34;&gt;編譯&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;-g&lt;/code&gt; 代表加入除錯資訊，可以讓 valgrind 指出在程式的那一行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ gcc -o test test.c -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-valgrind--memory-leak&#34;&gt;利用 valgrind 抓 memory leak&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ valgrind --leak-check&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;full --show-leak-kinds&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;all ./test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;==18006== Memcheck, a memory error detector
==18006== Copyright (C) 2002-2017, and GNU GPL&amp;#39;d, by Julian Seward et al.
==18006== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==18006== Command: ./test
==18006== 
0x522d040
==18006== 
==18006== HEAP SUMMARY:
==18006==     in use at exit: 4,096 bytes in 1 blocks
==18006==   total heap usage: 2 allocs, 1 frees, 5,120 bytes allocated
==18006== 
==18006== 4,096 bytes in 1 blocks are definitely lost in loss record 1 of 1
==18006==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==18006==    by 0x10869B: main (test.c:5)
==18006== 
==18006== LEAK SUMMARY:
==18006==    definitely lost: 4,096 bytes in 1 blocks
==18006==    indirectly lost: 0 bytes in 0 blocks
==18006==      possibly lost: 0 bytes in 0 blocks
==18006==    still reachable: 0 bytes in 0 blocks
==18006==         suppressed: 0 bytes in 0 blocks
==18006== 
==18006== For counts of detected and suppressed errors, rerun with: -v
==18006== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading5&#34;&gt;分析&lt;/h2&gt;
&lt;p&gt;程式中我們 malloc 的一塊 1024 個整數大小 (4 bytes) 的記憶體空間，程式結束前沒有呼叫 free 因此產生的 memory leak 的現象。可以看到 valgrind 指出我們在程式第 5 行 &lt;code&gt;int *a = (int *) malloc(1024 * sizeof(int));&lt;/code&gt; 分配了 4096 bytes 的記憶體。&lt;/p&gt;
&lt;p&gt;此外這裡有一個有趣的現象，就是總共分配的大小是 5120 bytes，這是因為 &lt;code&gt;printf&lt;/code&gt; 的關係，這個函式會固定使用 1024 bytes 的記憶體空間。所以 5120 = 4096 + 1024。&lt;/p&gt;
&lt;h1 id=&#34;colourvalgrind&#34;&gt;有顏色版本：colour-valgrind&lt;/h1&gt;
&lt;h2 id=&#34;heading6&#34;&gt;安裝&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pip3 install colour-valgrind &lt;span style=&#34;color:#75715e&#34;&gt;# 需要 python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-bashrc&#34;&gt;如果喜歡的話可以直接加在 &lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;alias valgrind&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;colour-valgrind&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading7&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;基本上就直接跟 valgrind 一樣&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ colour-valgrind --leak-check&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;full --show-leak-kinds&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;all ./test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=10pF-pr6yd5wJxlMfyaUHOrz-5v6iB1Ud&#34; alt=&#34;google-結果&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;heading8&#34;&gt;參考資料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://valgrind.org/docs/manual/mc-manual.html&#34;&gt;Valgrind User Manual - 4. Memcheck: a memory error detector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Valgrind&#34;&gt;https://en.wikipedia.org/wiki/Valgrind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Regex101</title>
      <link>https://aben20807.github.io/posts/20190815-regexp/</link>
      <pubDate>Thu, 15 Aug 2019 22:16:38 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190815-regexp/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=1vdxAJpMf506uqrdfXp6IPve3CYn-RXCP --&gt;
&lt;p&gt;我現在才知道這個是不是偏爛啊&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;因為要調整網站的一些東西，所以需要寫一些正規表達式 (regular expression)，不過一直試都失敗，上網找資料才發現一個好網站。傳送門：https://regex101.com/&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1-H5FG7NzGBMSEqNv6iJ0z2QfY3hQoXW5&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;一開始看到連結還以為是什麼內容農場，結果不是XDD&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;使用&lt;/h1&gt;
&lt;p&gt;左方有語言選項，因為不同語言的正規表達式可能會有些許的差異，所以就選擇正在使用的語言，因為 Hugo 是 Golang 寫的所以網站的表達式要選用 Go 語言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1Oz0fVpydicxt3X97ywQ-Z45YHePTf6-l&#34; alt=&#34;google-選擇 Golang&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本功能就是填入表達式，接著可以輸入測試字串看是否吻合，如果中間有 group 的話也會標示不同顏色，這點我覺得超棒。
&lt;img src=&#34;https://drive.google.com/open?id=11ScFQm6k0GbA3TPJbA7AysE8btF7dsdL&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;圖上範例就是我想要用來修改文章的標題 (heading)，加上錨定符號用。&lt;/p&gt;
&lt;p&gt;簡單範例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(&amp;lt;(h[1-9]) id=\&amp;quot;([^\&amp;quot;]+)\&amp;quot;(.+))(&amp;lt;/h[1-9]+&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後我是用這個來做取代來換成我想要的樣式，例如：&lt;/p&gt;
&lt;pre style=&#39;word-break: break-word; white-space:pre-line;&#39;&gt;
replaceRE &#34;(&lt;(h[1-9]) id=\&#34;([^\&#34;]+)\&#34;(.+))(&lt;/h[1-9]+&gt;)&#34; `&lt;${2} id=&#34;${3}&#34; class=&#34;article-heading&#34;${4}&lt;a class=&#34;headline-hash smoothScroll hover-show scrollspy&#34; style=&#34;font-size: 0.75em; color: black; padding-left: 0.25em&#34; href=&#34;#${3}&#34;&gt;&lt;span class=&#34;iconify&#34; data-icon=&#34;octicon-link&#34; data-inline=&#34;false&#34;&gt;&lt;/span&gt;&lt;/a&gt; ${5}`
&lt;/pre&gt;
&lt;p&gt;原本的標題就會變成
&lt;img src=&#34;https://drive.google.com/open?id=1yubxNXgTK8uZV07Bo52PzBUHN2Tjf8rY&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>別把人家的好心視為理所當然</title>
      <link>https://aben20807.github.io/posts/20190804-tiny-action/</link>
      <pubDate>Sun, 04 Aug 2019 11:08:11 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190804-tiny-action/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;其實原本 6 月中就要寫了，結果因為沒拍到照片所以就先延後 (明明是自己懶惰&lt;/p&gt;
&lt;p&gt;6 月中還蠻嚴重的就是香港反送中的事件開始，到現在 8 月了仍然有罷工及遊行，不過本篇不會討論這個事件。 雖說不討論但其實有些相關。記得當時許多人跟風換了頭貼濾鏡，但我認為有一些人只會盲從表現自己好像有在關注社會議題反而忽略身邊的事。 若真的去探討哪些人，其實並不限於換頭貼的人，也不是換頭貼就會這樣，換頭貼只是剛好是附近發生的大事。所以並不是想要嘴這些換頭貼的人喔。&lt;/p&gt;
&lt;p&gt;讓我想發文的遠因是大家都會把雨傘晾在走廊，導火線是前室友針對此事的&lt;a href=&#34;https://www.moedict.tw/%E5%BC%B7%E8%BE%AF&#34;&gt;強 (ㄑ一ㄤˇ) 辯&lt;/a&gt;，先來講講發生了什麼事吧。&lt;/p&gt;
&lt;p&gt;下雨天，大部分的人都會撐雨傘，拿回宿舍後就會打開然後放在走廊上，若是短暫的放置是還可以，不過幾乎所有人都是會放到過夜的，等到了隔天，打掃阿姨因為要推工作車，但因為有放雨傘所以過不去，因此就需要一個一個收雨傘才能前進。&lt;/p&gt;
&lt;p&gt;我的前室友提出以下幾點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雨傘打開放在外面比較快乾&lt;/li&gt;
&lt;li&gt;打掃阿姨有領薪水，而且沒看過她抱怨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我對這些有些疑問。乾比較快需要放整晚嗎？另外，走廊是公共空間，照理說是不可以放置私人物品。還有正常打掃工作是不會包含收雨傘的，她幫忙收是因為這樣才能工作，沒有抱怨是因為人很好。因此帶入今天的主題，「別把人家的好心視為理所當然」。&lt;/p&gt;
&lt;p&gt;(當然，這位室友事後說他是硬要辯&lt;/p&gt;
&lt;p&gt;突然發現要講的沒有很多，只是希望大家多去思考，平時其實會有許多類似的情況，多去將心比心，而不是以為換個頭貼就有多關心這個社會，請從身邊最微小的事開始去實際力行，這個社會才能一點一滴的變好。&lt;/p&gt;
&lt;p&gt;當然你可能好奇我怎麼晾雨傘，我是直接收傘的狀況下放到房間地上，不用綁起來，利用房間冷氣會讓房間乾燥的特性，放一個晚上基本上就乾了。給你們參考 OuO&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Build MNIST with TVM</title>
      <link>https://aben20807.github.io/posts/20190616-build-mnist-with-tvm/</link>
      <pubDate>Sun, 16 Jun 2019 17:40:59 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190616-build-mnist-with-tvm/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;真的是隔很久&amp;hellip;.藉口就不多說了 OuO&lt;/p&gt;
&lt;p&gt;這篇主要在造輪子，主要原因就是幾乎找不到這類輪子了，而剛好自己需要，又卡了很久才完成，不如記錄一下 OuO&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近在做 TVM 相關的事，它支援頗多前端，基於方便我就隨便挑一個 Keras 了 (先說我不會 AI @@&lt;br&gt;
然後因為現在頗多都在做 ImageNet 或更之後的應用，MNIST 的資料反而偏少，尤其是幾乎找不到訓練好的模型，說幾乎是因為還真的被我找到，傳送門：&lt;a href=&#34;https://github.com/EN10/KerasMNIST&#34;&gt;EN10/KerasMNIST&lt;/a&gt;，如果只是要用 Keras 來操作 MNIST 的話可以用這個連結，我已經確認過是可以直接執行XDD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2019.06.17 更新：扯，原來官網就有&amp;hellip;.https://keras.io/examples/mnist_cnn/&lt;br&gt;
然後我發現我整篇都把 MNIST 打成 MINST&amp;hellip;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;話說原本以為模型被存成檔案的話只有權重，結果是有兩種，也可以跟整個模型存在一起，詳情就去 Keras 官網 &lt;a href=&#34;https://keras.io/getting-started/faq/#how-can-i-save-a-keras-model&#34;&gt;How can I save a Keras model?&lt;/a&gt; 看看吧。&lt;/p&gt;
&lt;p&gt;所以上面那個做 MNIST 的是把整個模型存起來，這主要不是我要的＠＠，不過還是先用看看。&lt;/p&gt;
&lt;p&gt;P.S. 一些相依性檔案例如 Keras, Tensorflow, TVM 的安裝就不一一記錄囉 OuO&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ubuntu 18.04&lt;/li&gt;
&lt;li&gt;TVM 0.6.dev (6a4d71ff40915611bd42b62994992b879e6be610)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;heading2&#34;&gt;一堆程式碼上菜囉&lt;/h1&gt;
&lt;h2 id=&#34;-cnnpredictpy&#34;&gt;原始 &lt;code&gt;cnnPredict.py&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;注意要下載或複製那個程式碼，&lt;code&gt;cnn.h5&lt;/code&gt; 跟 &lt;code&gt;test3.png&lt;/code&gt; 一樣要放對位置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scipy.misc &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; imread, imresize
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imread(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;test3.png&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Compute a bit-wise inversion so black becomes white and vice versa&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invert(x)
&lt;span style=&#34;color:#75715e&#34;&gt;# Make it the right size&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imresize(x,(&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# Convert to a 4D tensor to feed into our model&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;float32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
x &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Perform the prediction&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; load_model
model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_model(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cnn.h5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(x)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argmax(out))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很好，可以執行～&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 cnnPredict.py
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-tvm-&#34;&gt;加入 TVM 囉&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nnvm
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tvm
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tvm.relay &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; relay
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scipy.misc &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; imread, imresize
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; keras
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; load_model

x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imread(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;test3.png&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Compute a bit-wise inversion so black becomes white and vice versa&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invert(x)
&lt;span style=&#34;color:#75715e&#34;&gt;# Make it the right size&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imresize(x,(&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# Convert to a 4D tensor to feed into our model&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;float32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
x &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Load model from pre-trained file&lt;/span&gt;
model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_model(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cnn.h5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Compile with tvm&lt;/span&gt;
shape_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;input_1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;: (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;)}
func, params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; relay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frontend&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_keras(model, shape_dict)
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;llvm&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tvm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpu(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; relay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build_config(opt_level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    executor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; relay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build_module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_executor(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;graph&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, func, ctx, target)

&lt;span style=&#34;color:#75715e&#34;&gt;# Perform the prediction&lt;/span&gt;
dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;float32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
tvm_out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; executor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluate(func)(tvm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(dtype)), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;params)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argmax(tvm_out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asnumpy()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 cnnPredict_tvm.py
In &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;main&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;: 
v0.0.1
fn &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%conv2d_1_input, %v_param_1: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;32, 1, 3, 3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_2: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;32,&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_3: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64, 32, 3, 3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_4: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64,&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_5: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;128, 9216&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_6: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;128,&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_7: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10, 128&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_8: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10,&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  %0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.conv2d&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%conv2d_1_input, %v_param_1, channels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3, 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.bias_add&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%0, %v_param_2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.relu&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.conv2d&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%2, %v_param_3, channels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;64, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3, 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.bias_add&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%3, %v_param_4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.relu&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.max_pool2d&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%5, pool_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2, 2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, strides&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2, 2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;an internal invariant was violated &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; typechecking your program &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;22:05:21&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; tvm/src/relay/op/nn/pooling.cc:73: Check failed: data !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nullptr: 
; 
  %7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; transpose&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%6, axes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 2, 3, 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.batch_flatten&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.dense&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%8, %v_param_5, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;128&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.bias_add&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%9, %v_param_6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.relu&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.dense&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%11, %v_param_7, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.bias_add&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%12, %v_param_8&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  nn.softmax&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%13, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;扯，竟然不行＠＠，而且完全不知道錯哪，找了一些資料說是 shape 錯了，我試了各種排列組合也都不行&amp;hellip;.&lt;/p&gt;
&lt;h2 id=&#34;-mnist-&#34;&gt;只存 MNIST 的權重&lt;/h2&gt;
&lt;p&gt;只好使用上面提到 Keras 官網 &lt;a href=&#34;https://keras.io/getting-started/faq/#how-can-i-save-a-keras-model&#34;&gt;How can I save a Keras model?&lt;/a&gt; 的方式只存權重出來，這裡我們只需要改最後一行，&lt;code&gt;save&lt;/code&gt; 改成 &lt;code&gt;save_weights&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; keras
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.datasets &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mnist
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Sequential
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.layers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Dense, Dropout, Flatten
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.layers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Conv2D, MaxPooling2D
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; backend &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; K

batch_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;
num_classes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
epochs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# input image dimensions&lt;/span&gt;
img_rows, img_cols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# the data, shuffled and split between train and test sets&lt;/span&gt;
(x_train, y_train), (x_test, y_test) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mnist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_data()

x_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(x_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], img_rows, img_cols, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
x_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x_test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(x_test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], img_rows, img_cols, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
input_shape &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (img_rows, img_cols, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

x_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;float32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
x_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x_test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;float32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
x_train &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;
x_test &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x_train shape:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, x_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;train samples&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x_test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;test samples&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# convert class vectors to binary class matrices&lt;/span&gt;
y_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_categorical(y_train, num_classes)
y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_categorical(y_test, num_classes)

model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sequential()
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Conv2D(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),
                 activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
                 input_shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input_shape))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Conv2D(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(MaxPooling2D(pool_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Flatten())
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dense(num_classes, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;softmax&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))

model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(loss&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;losses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;categorical_crossentropy,
              optimizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;optimizers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Adadelta(),
              metrics&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;accuracy&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;])

model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(x_train, y_train,
          batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;batch_size,
          epochs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;epochs,
          verbose&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
          validation_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(x_test, y_test))
score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluate(x_test, y_test, verbose&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Test loss:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, score[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Test accuracy:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, score[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save_weights(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mnist_weights.h5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;跑了頗久，不過跟其應該比 ImageNet 快很多了。結果如下圖。
&lt;img src=&#34;https://drive.google.com/open?id=1qSdoAYPCxNk5tlI0ELivCieDWCQO9IOV&#34; alt=&#34;google-train a MNIST model with Keras&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;-keras--mnist--tvm&#34;&gt;自己用 Keras 建構一個 MNIST 再餵給 TVM&lt;/h2&gt;
&lt;p&gt;把上面產生的權重餵給自己建構的模型&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nnvm
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tvm
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tvm.relay &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; relay
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scipy.misc &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; imread, imresize
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; keras
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; load_model
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.datasets &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mnist
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Sequential
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.layers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Dense, Dropout, Flatten, InputLayer
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.layers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Conv2D, MaxPooling2D
num_classes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imread(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;test3.png&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Compute a bit-wise inversion so black becomes white and vice versa&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invert(x)
&lt;span style=&#34;color:#75715e&#34;&gt;# Make it the right size&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imresize(x,(&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# Convert to a 4D tensor to feed into our model&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;float32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
x &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Construct a MNIST model&lt;/span&gt;
model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sequential()
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Conv2D(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, input_shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Conv2D(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(MaxPooling2D(pool_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Flatten())
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dense(num_classes, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;softmax&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Load the weights that we get from last program&lt;/span&gt;
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_weights(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mnist_weights.h5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

shape_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;input_1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;: (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;)}
func, params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; relay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frontend&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_keras(model, shape_dict)
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;llvm&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tvm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpu(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; relay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build_config(opt_level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    executor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; relay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build_module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_executor(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;graph&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, func, ctx, target)

&lt;span style=&#34;color:#75715e&#34;&gt;# Perform the prediction&lt;/span&gt;
dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;float32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
tvm_out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; executor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluate(func)(tvm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(dtype)), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;params)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argmax(tvm_out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asnumpy()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 cnnPredict_tvm.py
In &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;main&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;: 
v0.0.1
fn &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%conv2d_1_input, %v_param_1: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;32, 1, 3, 3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_2: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;32,&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_3: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64, 32, 3, 3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_4: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64,&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_5: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;128, 9216&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_6: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;128,&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_7: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10, 128&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, %v_param_8: Tensor&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10,&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, float32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  %0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.conv2d&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%conv2d_1_input, %v_param_1, channels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3, 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.bias_add&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%0, %v_param_2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.relu&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.conv2d&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%2, %v_param_3, channels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;64, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3, 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.bias_add&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%3, %v_param_4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.relu&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.max_pool2d&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%5, pool_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2, 2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, strides&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2, 2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;an internal invariant was violated &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; typechecking your program &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;22:21:27&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; tvm/src/relay/op/nn/pooling.cc:73: Check failed: data !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nullptr: 
; 
  %7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; transpose&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%6, axes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 2, 3, 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.batch_flatten&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.dense&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%8, %v_param_5, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;128&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.bias_add&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%9, %v_param_6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.relu&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.dense&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%11, %v_param_7, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  %13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn.bias_add&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%12, %v_param_8&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  nn.softmax&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%13, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;扯，結果竟然一模一樣。&lt;/p&gt;
&lt;h2 id=&#34;heading3&#34;&gt;檢驗剛剛建立的模型是否正確&lt;/h2&gt;
&lt;p&gt;總之先試試看是不是跟直接讀 &lt;code&gt;cnn.h5&lt;/code&gt; 一樣。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nnvm
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tvm
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tvm.relay &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; relay
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scipy.misc &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; imread, imresize
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; keras
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; load_model
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.datasets &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mnist
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Sequential
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.layers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Dense, Dropout, Flatten, InputLayer
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.layers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Conv2D, MaxPooling2D
num_classes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imread(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;test3.png&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Compute a bit-wise inversion so black becomes white and vice versa&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invert(x)
&lt;span style=&#34;color:#75715e&#34;&gt;# Make it the right size&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imresize(x,(&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# Convert to a 4D tensor to feed into our model&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;float32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
x &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Construct a MNIST model&lt;/span&gt;
model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sequential()
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Conv2D(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, input_shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Conv2D(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(MaxPooling2D(pool_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Flatten())
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dense(num_classes, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;softmax&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Load the weights that we get from last program&lt;/span&gt;
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_weights(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mnist_weights.h5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Perform the prediction&lt;/span&gt;
out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(x)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argmax(out))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很好，是一樣&amp;hellip;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 cnnPredict.py
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading4&#34;&gt;突破，加個輸入層？&lt;/h2&gt;
&lt;p&gt;在找解決方式的過程中突然看到&lt;a href=&#34;https://stackoverflow.com/a/49600827/6734174&#34;&gt;這裡&lt;/a&gt;提到有 &lt;code&gt;InputLayer&lt;/code&gt;，不如加看看。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nnvm
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tvm
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tvm.relay &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; relay
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scipy.misc &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; imread, imresize
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; keras
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; load_model
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.datasets &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mnist
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Sequential
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.layers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Dense, Dropout, Flatten, InputLayer
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keras.layers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Conv2D, MaxPooling2D
num_classes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
input_shape &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imread(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;test3.png&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Compute a bit-wise inversion so black becomes white and vice versa&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invert(x)
&lt;span style=&#34;color:#75715e&#34;&gt;# Make it the right size&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imresize(x,(&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# Convert to a 4D tensor to feed into our model&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;float32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
x &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# model = load_model(&amp;#39;cnn.h5&amp;#39;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Construct a MNIST model&lt;/span&gt;
model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sequential()
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(InputLayer(input_shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input_shape))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Conv2D(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, input_shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input_shape))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Conv2D(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(MaxPooling2D(pool_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Flatten())
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;relu&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;))
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Dense(num_classes, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;softmax&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Load the weights that we get from last program&lt;/span&gt;
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_weights(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mnist_weights.h5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

shape_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;input_1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;: (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;)}
func, params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; relay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frontend&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_keras(model, shape_dict)
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;llvm&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tvm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpu(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; relay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build_config(opt_level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    executor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; relay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build_module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_executor(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;graph&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, func, ctx, target)

&lt;span style=&#34;color:#75715e&#34;&gt;# Pperform the prediction&lt;/span&gt;
dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;float32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
tvm_out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; executor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluate(func)(tvm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(dtype)), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;params)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argmax(tvm_out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asnumpy()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 test_mnist.py
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;扯，竟然過了 QuQ&lt;/p&gt;
&lt;h1 id=&#34;heading5&#34;&gt;其他&lt;/h1&gt;
&lt;h2 id=&#34;lutzroedernetronhttpsgithubcomlutzroedernetron&#34;&gt;&lt;a href=&#34;https://github.com/lutzroeder/netron&#34;&gt;&lt;code&gt;lutzroeder/netron&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;發現了一個視覺化工具可以看模型。
&lt;img src=&#34;https://drive.google.com/open?id=18rjO-BiQTXRsSDAtisBkyEEhkO2sIBoP&#34; alt=&#34;google-NETRON&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;-shape-&#34;&gt;想看中間的 shape 的話&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; layer &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;layers:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(layer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_shape)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(layer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(layer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;output_shape)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(layer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;output)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Github Flow (2)</title>
      <link>https://aben20807.github.io/posts/20190421-github-flow-2/</link>
      <pubDate>Sun, 21 Apr 2019 19:13:02 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190421-github-flow-2/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;針對昨天的再多釐清一些。順便補充一些東西。&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;關於流程&lt;/h1&gt;
&lt;p&gt;昨天的流程主要是有需要 fork 的，通常是針對那些你無法對原始專案直接操作的狀況。&lt;/p&gt;
&lt;p&gt;如果對同一個專案使用 GitHub flow 也是可以的，也就是說在同一個專案中開啟 branch 在對自己開啟 PR，或許這就是我一開始有點困惑的原因，結果是都適用。&lt;/p&gt;
&lt;h1 id=&#34;pr--merge-&#34;&gt;PR 被 merge 後呢&lt;/h1&gt;
&lt;h2 id=&#34;-merge-commit&#34;&gt;更新 merge commit&lt;/h2&gt;
&lt;p&gt;接下來要做的就是更新一下自己的 master (origin 跟 local)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git fetch upstream
$ git checkout master
$ git merge upstream/master
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-branch&#34;&gt;刪除 branch&lt;/h2&gt;
&lt;p&gt;GitHub 上在被 merge 的 PR 的界面會出現可以刪除 branch 的按鈕。
&lt;img src=&#34;https://drive.google.com/open?id=1MM_kFgO6PWBnPRPp9Ry3BgX4Lf6j2U3i&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;刪除完成後會出現提示，貌似還可以復原呢。這個步驟後你帳號遠端上的那個 branch 就不見了。
&lt;img src=&#34;https://drive.google.com/open?id=1Q39-VcdZ36CqtvOh0NCu1Ix35JxwuzaQ&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;再來是更新到本地端。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 列出本地端的分支 (加上遠端記錄)&lt;/span&gt;
$ git branch -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1QifWjcp6goVP329L8aBoeV98yVze_XAc&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;刪除遠端記錄&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 模擬遠端可刪除分支&lt;/span&gt;
$ git remote prune origin --dry-run

&lt;span style=&#34;color:#75715e&#34;&gt;# 執行刪除&lt;/span&gt;
$ git remote prune origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1w1LtPh3fYn6s2EO21yof6Xh8T60Gw-Zc&#34; alt=&#34;google- &#34;&gt;
&lt;img src=&#34;https://drive.google.com/open?id=1MdDsIHfyFUX9hAmorRbWYmg8tv0HYtO0&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;刪除本地分支後就大功告成&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git branch -d new_feature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading1&#34;&gt;參考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fizerkhan.com/blog/posts/Clean-up-your-local-branches-after-merge-and-delete-in-GitHub.html&#34;&gt;Clean up your local branches after merge and delete in GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Github Flow</title>
      <link>https://aben20807.github.io/posts/20190420-github-flow/</link>
      <pubDate>Sat, 20 Apr 2019 21:04:32 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190420-github-flow/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;最近算是真的在用多人合作的 git 了，以前大多只有自己在 add, commit, push。不過到多人的合作下就講求流程，這裡以 GitHub flow 為主要的流程做討論以及順便記錄一些會用到的指令。&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;其實是看了 &lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;Understanding the GitHub flow&lt;/a&gt; 之後還不是相當懂，跟同學(大神)討論了一下算是有釐清一些我的懷疑吧。&lt;/p&gt;
&lt;p&gt;p.s. 這裡有翻譯版：&lt;a href=&#34;https://medium.com/@trylovetom/%E8%AE%93%E6%88%91%E5%80%91%E4%BE%86%E4%BA%86%E8%A7%A3-github-flow-%E5%90%A7-4144caf1f1bf&#34;&gt;讓我們來了解 GitHub Flow 吧！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;注意&amp;gt; 因為目前專案還不算大型，所以目前遇到的狀況算是比較簡易的。
&amp;lt;注意&amp;gt; 由於我也是初心者，如果我有誤解的話請跟我說，感激不盡。&lt;/p&gt;
&lt;h1 id=&#34;github-flow&#34;&gt;GitHub flow&lt;/h1&gt;
&lt;p&gt;這個流程，主要是去掉 Git flow 有兩條主線的麻煩。不過誰比較好，還是得看用途，更有 GitLab flow 是合併兩個來用的＠＠&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub flow 只專注在 master 身上，從 master 上開啟 feature branch，在該 branch 上開發(會有一些 commit)，最後在透過 PR(pull request) 合併到 master。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面這句看似簡單，其實相當複雜，我盡量詳盡解釋。&lt;/p&gt;
&lt;p&gt;更清楚的解釋應該為：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;從主要專案(upstream) fork 一份到自己的帳號(origin)，修改 origin，從 origin/master 新增分支，開發完後將分支 push 到 origin/新分支 上後直接用新分支對 upstream/master 開啟 PR。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;fork-and-pr&#34;&gt;Fork and PR&lt;/h1&gt;
&lt;p&gt;首先，PR 可以達到討論及 code review 的效果，為了達到 PR 我們必須把主專案 fork 一份到自己的帳號。而 PR 的方式主要就是透過 GitHub 網頁提供的界面進行操作。&lt;/p&gt;
&lt;p&gt;不過，我試了一下，發現同一個 repo 還是可以透過 branch 發 PR 的，這我就有點不確定為何一定要 fork，或許 fork 是不一定，不過更改自己的 repo 會比較心安一點，尤其若是常使用&amp;hellip;.
&lt;img src=&#34;https://drive.google.com/open?id=1poKsFmBeJ650xMa6OtgxMUGNE8NYo8fy&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;branch&#34;&gt;Branch&lt;/h1&gt;
&lt;p&gt;Branch 在 git 中花費相當少，因為它就只是一個標籤，所以應該盡量使用它。GitHub flow 中保證 master 上的每一個版本都是可佈署的，因此在此流程中不建議直接在 master 上加 commit 而是在 master 上開一個 branch 出來。&lt;/p&gt;
&lt;p&gt;&amp;lt;注意&amp;gt; 一定要從 master 開 branch
但是又有一個特例：就是當別人還沒 merge 我的 PR 可是我接下來的開發又需要有這個 PR 的內容的時候。網路上我找到有人問這個問題 &lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/310427/in-github-flow-is-it-ok-to-base-feature-branch-on-another-feature-branch&#34;&gt;傳送門&lt;/a&gt;，好像就只能在 branch 分出另一個 branch 來先暫時用。&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;流程&lt;/h1&gt;
&lt;h2 id=&#34;heading2&#34;&gt;初始化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Fork 主要專案到自己的 GitHub 帳號&lt;/li&gt;
&lt;li&gt;Clone 自己 GitHub 中的專案 (fork 過來的)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone &amp;lt;自己專案的 url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;設定 upstream 來源&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git remote add upstream &amp;lt;主要專案的 url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading3&#34;&gt;開發中&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;前往 master 分支 (一開始就在 master 可以不用)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git checkout master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;新增並前往 feature 分支&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git checkout -b new_feature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;開始開發功能&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git add XXX
$ git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;push 到自己帳號的專案 (3. 4. 可以混用，push 完後一樣可以 commit 再 push)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git push origin new_feature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;準備發起 PR，先把專案更新到最新，也就是把 upstream 的東西更新到自己本地端&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git checkout master
$ git fetch upstream
$ git merge upstream/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;回到 feature 分支把 master 中從 upstream 來的新 commit 更新回 feature branch&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git checkout new_feature
$ git rebase master
$ git push origin new_feature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;發 PR
開啟 GitHub 界面，按下 Create pull request 的綠色按鈕，注意方向，輸入標題、解說文字、新增 reviewer 後按下 Create。這樣就大公告成了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;heading4&#34;&gt;參考資料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@yengttt/%E9%96%8B%E7%99%BC%E7%94%A8%E5%88%B0%E7%9A%84git%E6%B5%81%E7%A8%8B-c9082b914974&#34;&gt;這次專案用到的Git流程&lt;/a&gt;：本篇主要流程來自這裡，更詳盡請點擊參考。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://poychang.github.io/guide-to-use-github-flow/&#34;&gt;如何使用 GitHub Flow 來參與開源專案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>不同路徑之 Git Patch</title>
      <link>https://aben20807.github.io/posts/20190403-git-patch-different-directory/</link>
      <pubDate>Wed, 03 Apr 2019 16:50:28 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190403-git-patch-different-directory/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;最近也算常用 git，不過有些特殊的功能都沒用過，這次也不算是學學看，而是真的要用到了，總之就是還個技術債順便記錄。不過會用到這個情境的應該算是少數。&lt;/p&gt;
&lt;h1 id=&#34;tldr&#34;&gt;tl;dr&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git format-patch --relative &amp;lt;SHA&amp;gt; ./ -o /tmp/patches
$ git am /tmp/patches/*.patch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;git 有一個好用的工具可以針對 repo 上面的 commit 產生補丁檔 (patch)。詳細用法可以去查看官方說明文件 &lt;a href=&#34;https://git-scm.com/docs/git-format-patch&#34;&gt;git format-patch&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;這裡主要記錄一個使用情境：要把專案A 下的子專案a 的修改記錄做成 patch 給專案B 使用，注意，專案a 與專案B 是同一個專案。&lt;/p&gt;
&lt;p&gt;會有這樣需求主要是因為 B 是開源專案，然後我們拿來修改後變成 A 的子專案。當然最好的方式是用 fork，然後利用 submodule 管理，不過因為只有一個 repo 可以使用，所以就採用這個作法。&lt;/p&gt;
&lt;p&gt;限制：內部檔案名稱要相同&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;範例檔案架構&lt;/h1&gt;
&lt;p&gt;接下來利用簡單的範例來模擬。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;repo A&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;A
├── a
│   └── file_1.txt
└── sth_in_A.txt

* a257187 - &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Add sth in A
* a1f4b9e - init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;repo B&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;B
└── file_1.txt

* 63998ea - &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著進行一些修改 (記得用 git 去追蹤修改記錄)&lt;/p&gt;
&lt;p&gt;我們測試一些不同的行為，可以從下方 commit message 看出，同時修改(&lt;code&gt;eb948ee&lt;/code&gt;)也可以喔&lt;/p&gt;
&lt;p&gt;大概像是這樣&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;A
├── a
│   ├── file_1.txt
│   └── file_2.txt
└── sth_in_A.txt

* 0f5c75e - &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Add file_2 in a
* eb948ee - Modify file_1 and sth_in_A.txt
* 26bde10 - Modify sth_in_A.txt
* b551578 - Modify file_1
* a257187 - Add sth in A
* a1f4b9e - init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;-patch&#34;&gt;產生 patch&lt;/h1&gt;
&lt;p&gt;開始產生 patch 囉，首先 &lt;code&gt;cd&lt;/code&gt; 到子資料夾，接著打入下方指令，&lt;code&gt;a1f4b9e&lt;/code&gt; 是起始 commit，如果這個子專案是從中間才開始追蹤的話也可以從中間的 commit 開始。可以看到它只會針對 a 中有修改的部份才產生 patch 檔。&lt;code&gt;-o&lt;/code&gt; 是指定輸出的路徑，完全可以依照自己喜好修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cd A/a/
$ git format-patch --relative a1f4b9e ./ -o /tmp/patches
/tmp/patches/0001-Modify-file_1.patch
/tmp/patches/0002-Modify-file_1-and-sth_in_A.txt.patch
/tmp/patches/0003-Add-file_2-in-a.patch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;-patch1&#34;&gt;套用 patch&lt;/h1&gt;
&lt;p&gt;套用 patch 到專案B&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bach&#34; data-lang=&#34;bach&#34;&gt;$ cd B/
$ git am /tmp/patches/*.patch
Applying: Modify file_1
Applying: Modify file_1 and sth_in_A.txt
Applying: Add file_2 in a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最後可以看到它把所有的 commit 都一一重現&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;B
├── file_1.txt
└── file_2.txt

* e28e672 - &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Add file_2 in a
* 24d4693 - Modify file_1 and sth_in_A.txt
* 96d0b8c - Modify file_1
* 63998ea - init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Makefile Help Message</title>
      <link>https://aben20807.github.io/posts/20190402-makefile-help-message/</link>
      <pubDate>Tue, 02 Apr 2019 09:06:15 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190402-makefile-help-message/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;最近蠻常用 Makefile 的，想說寫一個 help 選項，這樣就不用要使用時都要打開 Makefile 看怎麼用，意外查到可以使用小技巧來印出 help。達到註解及文件的效果。&lt;/p&gt;
&lt;p&gt;原本可能在寫完所有 rule 後要再加一個 &lt;code&gt;help&lt;/code&gt; 來寫準備印出來給使用者的內容。如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;action1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;## Do action 1.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doing action 1...&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;action2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;## Do action 2.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doing action 2...&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;help&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;## Show help message.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage:\n&amp;#34;&lt;/span&gt;
	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  make &amp;lt;target&amp;gt;\n\n&amp;#34;&lt;/span&gt;
	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Targets:\n&amp;#34;&lt;/span&gt;
	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  action1\tDo action 1.\n&amp;#34;&lt;/span&gt;
	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  action2\tDo action 2.\n&amp;#34;&lt;/span&gt;
	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  help\t\tShow help message.\n&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1IwQiOPfxIXVfPhZ76N7UX497HuZ-lA3m&#34; alt=&#34;google-結果&#34;&gt;&lt;/p&gt;
&lt;p&gt;這種方式在數量一多下會很麻煩，尤其是要不斷確認上面是否有被更動。所以找到許多人針對每個 target 的註解去產生 help 資訊。這裡使用 perl 跟 awk 幫忙。&lt;/p&gt;
&lt;p&gt;下方印出的結果同上就不貼圖片了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;action1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;## Do action 1.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doing action 1...&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;action2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;## Do action 2.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doing action 2...&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;help&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;## Show help message.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage:\n&amp;#34;&lt;/span&gt;
	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  make &amp;lt;target&amp;gt;\n\n&amp;#34;&lt;/span&gt;
	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Targets:\n&amp;#34;&lt;/span&gt;
	@perl -nle&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print $&amp;amp; if m{^[a-zA-Z0-9_-]+:.*?## .*$$}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;MAKEFILE_LIST&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;		sort | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;		awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN {FS = &amp;#34;:.*?## &amp;#34;}; \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;		{printf &amp;#34;  %-18s %s\n&amp;#34;, $$1, $$2}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;稍微解釋一下 perl 那一行&lt;/p&gt;
&lt;p&gt;首先就是先使用 regexp 去 match 符合的表達式，&lt;code&gt;^[a-zA-Z0-9_-]+:.*?## .*$$&lt;/code&gt; 表示由一個單字(可能含數字)開頭 &lt;code&gt;:&lt;/code&gt; 後方是相依的部份，最後是用 &lt;code&gt;##&lt;/code&gt; 註解的描述。&lt;/p&gt;
&lt;p&gt;接著利用 pipe (&lt;code&gt;|&lt;/code&gt;) 給 awk，它可以針對欄 (column) 去操作文字，&lt;code&gt;BEGIN&lt;/code&gt; 區塊表示初始化宣告，也就是輸入的字串是用 &lt;code&gt;##&lt;/code&gt; 當作分割符號，最後利用 &lt;code&gt;printf()&lt;/code&gt; 去把第一欄及第二欄印出來。&lt;/p&gt;
&lt;p&gt;最後最後，加上點顏色頗不錯 OuO&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# color
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;BLUE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;33&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;34m
NC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;33&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0m

&lt;span style=&#34;color:#a6e22e&#34;&gt;action1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;## Do action 1.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doing action 1...&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;action2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;## Do action 2.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doing action 2...&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;help&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;## Show help message.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage:\n&amp;#34;&lt;/span&gt;
	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  make &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;BLUE&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;target&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;NC&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	@printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Targets:\n&amp;#34;&lt;/span&gt;
	@perl -nle&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print $&amp;amp; if m{^[a-zA-Z0-9_-]+:.*?## .*$$}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;MAKEFILE_LIST&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;		sort | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;		awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN {FS = &amp;#34;:.*?## &amp;#34;}; \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;		{printf &amp;#34;$(BLUE)  %-18s$(NC) %s\n&amp;#34;, $$1, $$2}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1RTn1OcTBserVT9XOFhDRSFA2f3Lx1R-G&#34; alt=&#34;google-有顏色版本&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;參考資料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nedbatchelder.com/blog/201804/makefile_help_target.html&#34;&gt;Makefile help target&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>First Met Hugo</title>
      <link>https://aben20807.github.io/posts/20190321-first-met-hugo/</link>
      <pubDate>Thu, 21 Mar 2019 22:20:12 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190321-first-met-hugo/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;正常轉換跑道時都會有一篇推坑文，不過我這篇算比較晚了，也不是為了摸久一點，就感覺好像一直沒啥時間寫文章。&lt;br&gt;
就請多見諒＠＠&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;從 Blogger 轉出來的原因可以去關於的頁面看看，我就不再贅述，此篇主要也不會手把手的教學如何用 Hugo 從頭到尾架設一個網頁，因為網路上有相當多這類的教學，我主要是記錄一些比較特別地方。接著跟我唸三遍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前端坑好深，前端坑好深，前端坑好深&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;heading1&#34;&gt;安裝&lt;/h1&gt;
&lt;p&gt;說不教好像也有點無情，不過在 GitHub 架 Hugo 真的太過簡單了，步驟真的算少，所以我就推給其他文章吧(可以先看完整篇再開始)：&lt;a href=&#34;https://medium.com/@chs_wei/%E5%9C%A8-github-%E9%83%A8%E7%BD%B2-hugo-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-9c40682dfe40&#34;&gt;在 GitHub 部署 Hugo 靜態網站&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;--&#34;&gt;安裝 - 注意事項&lt;/h1&gt;
&lt;p&gt;Ubuntu 請用 &lt;code&gt;snap&lt;/code&gt; 來安裝比較新的版本，用 &lt;code&gt;apt&lt;/code&gt; 會發現一堆主題不能用因為版本過舊。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo snap install hugo
$ hugo version
Hugo Static Site Generator v0.54.0 linux/amd64 BuildDate: 2019-02-01T13:33:06Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;結果注意事項就把 Hugo 全部安裝完成了＠＠，部屬在 GitHub 就跟大部分用法相同。&lt;/p&gt;
&lt;h1 id=&#34;heading2&#34;&gt;部落格架構配置&lt;/h1&gt;
&lt;p&gt;因為 Hugo 會針對主題和文章經過 &lt;code&gt;hugo&lt;/code&gt; 指令去產生一個完整的網站並預設放在 &lt;code&gt;public/&lt;/code&gt; 資料夾。所以一般會把寫文章的地方跟網站分成兩個 repo，也就是把 &lt;code&gt;public/&lt;/code&gt; push 到 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;，寫文章的就創建另一個 &lt;code&gt;blog-post&lt;/code&gt; 之類的 repo。這個作法可以使得網站不會被污染，也就是不會有奇怪的檔案，repo 也不會好像各種語言都有。&lt;/p&gt;
&lt;p&gt;但是，一般上面這種是會把主題的檔案都複製到你寫文章的 repo 裡這樣就可以自訂一些前端設計。&lt;/p&gt;
&lt;p&gt;我覺得這樣還不夠乾淨！因此我的方式是使用三個 repo：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;blog-post：存文章&lt;/li&gt;
&lt;li&gt;hugOuO：主題&lt;/li&gt;
&lt;li&gt;aben20807.github.io：發布網站&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;沒錯，多一個 repo 追蹤主題，由於 Hugo 會自動的搜尋一些資料夾找尋網站設定，在一開始的資料夾找不到時，會根據 &lt;code&gt;config.toml&lt;/code&gt; 中設定的主題去 &lt;code&gt;themes/&lt;/code&gt; 找對應的主題，所以一開始的資料夾就不要有任何前端的檔案，除非像是 google analytics 需要放置規定的檔案，不然所有的前端設計 (架構, css, javascript) 都放在主題的 repo 中。當然這是給那些會修改別人主題的人的建議，如果是直接用現成的那就不需要多一個 repo 了。&lt;/p&gt;
&lt;p&gt;以下是一個簡單的檔案結構：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;blog-post/ &amp;lt;----------------------- repo 1: 存文章
├── config.toml
├── content
│   ├── about
│   ├── _index.md
│   └── posts/ &amp;lt;------------------- 文章會在這裡
├── themes/
│   └── hugOuO/ &amp;lt;------------------ repo 2: 主題
│       ├── archetypes/
│       │   ├── default.md
│       │   └── posts.md
│       ├── layouts/
│       │   ├── 404.html
│       │   ├── _default/
│       │   ├── index.html
│       │   ├── index.json
│       │   ├── index.rss.xml
│       │   ├── partials/
│       │   └── shortcodes/
│       ├── static/
│       │   ├── css/
│       │   ├── img/
│       │   └── js/
│       └── theme.toml
└── public/ &amp;lt;---------------------- repo 3: 發布網站
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading3&#34;&gt;這樣安排的缺點&lt;/h2&gt;
&lt;p&gt;這麼多 repo 就是一個蠻大的缺點，不過若是非常在意的話可以利用 branch 來讓三個 repo 合併。&lt;br&gt;
但是這個缺點有一個優點 (?)，就是可以刷 GitHub 的 contributions 啊！每次寫文章改一堆東西就會綠一片OuO&lt;/p&gt;
&lt;h2 id=&#34;heading4&#34;&gt;其他&lt;/h2&gt;
&lt;p&gt;當然也可以利用 GitHub 和其他工具達到持續集成、部署，參考：&lt;a href=&#34;https://axdlog.com/zh/2018/using-hugo-and-travis-ci-to-deploy-blog-to-github-pages-automatically/&#34;&gt;利用Travis CI和Hugo將Blog自動部署到Github Pages&lt;/a&gt;。不過我是有點點懶惰，所以我就用 &lt;a href=&#34;https://github.com/aben20807/blog-post/blob/master/deploy.sh&#34;&gt;script&lt;/a&gt; 來部屬。&lt;/p&gt;
&lt;p&gt;還有 &lt;code&gt;blog-post&lt;/code&gt; repo 可以用 &lt;code&gt;.gitattributes&lt;/code&gt; 來讓 GitHub 把 markdown 當作一個語言來計算，&lt;a href=&#34;https://github.com/aben20807/blog-post/blob/master/.gitattributes&#34;&gt;傳送門&lt;/a&gt;。
&lt;img src=&#34;https://drive.google.com/open?id=1L-bAODhj57C7wFIBaWTgZuY0Sp0bEQFJ&#34; alt=&#34;google-結果展示&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;heading5&#34;&gt;圖片&lt;/h1&gt;
&lt;p&gt;通常架設在 GitHub 的靜態網站都會直接把圖片也傳到 repo 中，雖然說這樣會比較快而且方便，但是我不建議用 git 去追蹤圖片，到最後會非常肥大。所以我一開始就有想說用 google 雲端當作一個圖床 (Flickr 1TB 回來啊QuQ)，反正有學校帳號算是有無限空間吧 (還是當學生的小福利＠＠)，再加上 google 圖片可以無限上傳，我手機拍照的圖片都會自動上傳了，然後也可以跟雲端連結，也就是說在 google 雲端透過檔案存取到 google 圖片的檔案。不過因為它的 api 還不是說很好用，就是雲端右鍵拿到的連結是不能直接嵌入網頁的，所以要手動複製 id，我覺得頗麻煩就乾脆寫一個可以偵測是否在 markdown 使用 google 雲端的圖片，然後把它轉成對應的 url 同時提供點擊就可以直接連過去，這樣就可以放大檢視了。&lt;/p&gt;
&lt;p&gt;作法就是我的文章若要用到 google 雲端的圖片就要用以下語法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;![&lt;span style=&#34;color:#f92672&#34;&gt;google-標題&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;從雲端裡面右鍵拿到的分享連結&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;沒意外這篇文章內文都是用這個方式加圖片的，唯一缺點就是明顯慢很多＠＠，雖然慢會影響 SEO，不過算了，就會看的人就會來看吧。說到這個，流量很明顯跟 Blogger 時期差很多＠＠，實做&lt;a href=&#34;https://github.com/aben20807/hugOuO/blob/master/layouts/partials/custom-content.html#L5-L23&#34;&gt;傳送門&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;heading6&#34;&gt;文章&lt;/h1&gt;
&lt;p&gt;對於文章，我建議可以用日期當作檔名的前綴，以便排序。我的主題就會自動切割日期。Hugo 也有 permalinks 功能，就是把日期當作網站的路徑，不過我懶得用了＠＠&lt;/p&gt;
&lt;h1 id=&#34;heading7&#34;&gt;優點啦&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;單一執行檔，只需要安裝 hugo，其他什麼 ruby, python, node 都不用。&lt;/li&gt;
&lt;li&gt;建制快速，號稱目前地表最快，尤其當網站一多，目前有找到跟 Jekyll 的比較&lt;a href=&#34;https://forestry.io/blog/hugo-vs-jekyll-benchmark/&#34;&gt;傳送門&lt;/a&gt;，跟 Hexo 的可能還要找一下。&lt;/li&gt;
&lt;li&gt;網站內容乾淨，也就是上面的缺點啦，我是覺得這是優點 OuO，分多個 repo 不是很好嗎。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;heading8&#34;&gt;有趣的功能&lt;/h1&gt;
&lt;p&gt;下面這些功能其實不限於 Hugo，只要有想要其實都可以把它加到自己的網站，甚至是從頭自己刻的也可。不要忘了開頭念三次的東西 OuO&lt;/p&gt;
&lt;h2 id=&#34;1-&#34;&gt;1. 搜尋&lt;/h2&gt;
&lt;p&gt;由於之前 Blogger 算是內建搜尋的，所以這裡算是研究頗久，原本要使用一些已經做成套件的切字工具，但是中文字真的太難搞定了，所以我乾脆直接用 google 提供的搜尋：Google Custom Search。一樣，這裡就不一一教學，請移駕：&lt;a href=&#34;https://blog.yowko.com/google-search-in-hugo/&#34;&gt;將 Google自訂搜尋引擎 (Google Custom Search) 搭配 OpenSearch 加至 Hugo 網站中&lt;/a&gt;。真的要參考實做的話可以來這個 &lt;a href=&#34;https://github.com/aben20807/blog-post/commit/6f6b62898791322876091d4db98d580b8a7accdc#diff-44f0b83d58ef03d7cee156de462be50c&#34;&gt;commit&lt;/a&gt; 看看。對了，設定完後要等個幾天才會可以搜尋，我那時候以為我哪裡設定錯誤，結果等個幾天就可以用了。結果可以到這個&lt;a href=&#34;https://aben20807.github.io/search/&#34;&gt;頁面&lt;/a&gt;查看。
&lt;img src=&#34;https://drive.google.com/open?id=1YD4461mDTtn7MHssUOQxorRAiqkhRiVh&#34; alt=&#34;google-搜尋範例&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-toc-table-of-content&#34;&gt;2. TOC (Table Of Content)&lt;/h2&gt;
&lt;p&gt;Hugo 算有提供 toc 工具，但是用起來沒這麼好看，例如它無法設定深度，不管幾層就都會做成 toc 也就是 h1~6 都有，造成空間浪費。這裡我也是弄超級久，最後我是參考 &lt;a href=&#34;https://orianna-zzo.github.io/sci-tech/2018-08/blog%E5%85%BB%E6%88%90%E8%AE%B016-%E8%87%AA%E5%BB%BAhugo%E7%9A%84toc%E6%A8%A1%E6%9D%BF/#/hugo%E7%9A%84table-of-content&#34;&gt;AllinOne&lt;/a&gt; 這個主題的實做方式：&lt;a href=&#34;https://github.com/orianna-zzo/AllinOne/blob/master/layouts/partials/toc.html&#34;&gt;toc.html&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;3-headline-hash&#34;&gt;3. Headline Hash&lt;/h2&gt;
&lt;p&gt;也就是滑鼠移到標題會出現一個 anchor 可以產生直接跳到這個標題的連結，直接參考：&lt;a href=&#34;https://discourse.gohugo.io/t/adding-anchor-next-to-headers/1726&#34;&gt;Adding anchor next to headers&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;4-smooth-scroll&#34;&gt;4. Smooth Scroll&lt;/h2&gt;
&lt;p&gt;這個可以讓移動有滾動的動畫而不是直接跳到那邊，我是使用 &lt;code&gt;jquery.smooth-scroll.min.js&lt;/code&gt; 來達成，請參考這個 &lt;a href=&#34;https://github.com/aben20807/blog-post/commit/68fa52f8d25c90d003fec296081427d12c6724cf#diff-0aa74fe7c8cd2a2b79dab67ece16cb02&#34;&gt;commit&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;5-scrollspy&#34;&gt;5. Scrollspy&lt;/h2&gt;
&lt;p&gt;讓右邊的 toc 自動標記現在所在的標題位置，我是從 &lt;a href=&#34;https://stackoverflow.com/questions/30348314/how-to-use-scrollspy-without-using-bootstrap/49257431#49257431&#34;&gt;how to use scrollspy without using bootstrap 的其中一個回答&lt;/a&gt; 改成這個 &lt;a href=&#34;https://github.com/aben20807/blog-post/commit/94b0b7344de07858b4ed346bc76b30caafa71220#comments&#34;&gt;commit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.3.4.5. 合起來差不多就是這樣：
&lt;img src=&#34;https://drive.google.com/open?id=1Ent_uFFd1IuKhGna9hZ2uEBZ1cjoHw63&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;6--ouo&#34;&gt;6. 自動換標題 OuO&lt;/h2&gt;
&lt;p&gt;這算是一個有趣但是沒啥實用性的功能，我是在 &lt;a href=&#34;https://diygod.me/&#34;&gt;https://diygod.me/&lt;/a&gt; 看到的，當你暫時離開去其他分頁時，它的標題就會變換。建議不要在手機上用這個功能。參考：&lt;a href=&#34;https://blog.youdivi.com/tutorials/change-browser-tab-title-tab-not-active/&#34;&gt;CHANGE BROWSER TAB TITLE WHEN TAB NOT ACTIVE&lt;/a&gt;，&lt;a href=&#34;https://github.com/aben20807/blog-post/commit/4a468cb27289453f1a53ccb05db50343877438d8#diff-0aa74fe7c8cd2a2b79dab67ece16cb02&#34;&gt;commit&lt;/a&gt;，如何排擠手機：&lt;a href=&#34;https://stackoverflow.com/questions/3514784/what-is-the-best-way-to-detect-a-mobile-device-in-jquery/3540295#3540295&#34;&gt;What is the best way to detect a mobile device in jQuery?&lt;/a&gt;
&lt;img src=&#34;https://drive.google.com/open?id=1AF_3cXaG2gWU1VM5ybrrQDO2qXtEusGH&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-email-subscribe-mailchimphttpsmailchimpcom&#34;&gt;7. E-mail subscribe (&lt;a href=&#34;https://mailchimp.com/&#34;&gt;mailchimp&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;原本 Blogger 有 G+ 當作一個社群平台來分享發布的文章，不過這裡就沒有了，我想說需要有一個方法來提供讀者訂閱，不能叫他自己去申請 GitHub 然後訂閱我網站的 repo 吧。所以我就找到這個服務，它免費版提供 2000 個訂閱者，一個月可以寄 12000 封 e-mail，對我來說算是非常夠用了(吧＠＠)，剛剛看原本還以為只有兩個人 (我跟我的分身帳號)，結果竟然多一個人了！還不來&lt;a href=&#34;https://aben20807.github.io/subscription/&#34;&gt;訂閱&lt;/a&gt;？&lt;/p&gt;
&lt;p&gt;mailchimp 的用法其實官網就有提供，我英文不太行的看久一點就可以架設好服務了，我相信你們可以的 (?)&lt;/p&gt;
&lt;h2 id=&#34;8-google-analytics&#34;&gt;8. google analytics&lt;/h2&gt;
&lt;p&gt;Google 的流量監測，Hugo 已經有寫好可以直接用，在 &lt;code&gt;config.toml&lt;/code&gt; 直接加上自己的 token 就好，然後還要上傳一個證明是自己網站的 html 檔案，放在 &lt;code&gt;static/&lt;/code&gt; 裡面就可以。上面有提到流量差異大致上就如下，我 Blogger 那邊已經很久沒更新了，一天還是快 100 個人造訪呢 OuO。
&lt;img src=&#34;https://drive.google.com/open?id=1XoxtAg5qZT_sDIrXc8HITfE5QBKN0nXF&#34; alt=&#34;google-左：Blogger，右：這個網站QuQ&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;9-hued&#34;&gt;9. hued&lt;/h2&gt;
&lt;p&gt;因為每次編輯時都要用很長的路徑 &lt;code&gt;content/posts/xxxx.md&lt;/code&gt;，頗煩躁，所以就寫了一個把指令包起來的 script，安裝方式可以看 &lt;a href=&#34;https://github.com/aben20807/blog-post#hued&#34;&gt;README&lt;/a&gt;，還有補全喔，雖然應該是只有 oh-my-bash 可用。&lt;/p&gt;
&lt;h2 id=&#34;10-disqus-&#34;&gt;10. Disqus 評論系統&lt;/h2&gt;
&lt;p&gt;設定方式跟 google analytics 一樣簡單，簡單到我都忘了要設定&amp;hellip;.設定 short name 即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs 安裝 rainbow-delimiters 插件</title>
      <link>https://aben20807.github.io/posts/20190307-emacs-install-rainbow-delimiters/</link>
      <pubDate>Thu, 07 Mar 2019 20:23:24 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190307-emacs-install-rainbow-delimiters/</guid>
      
      
      <description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= --&gt;
&lt;p&gt;恩&amp;hellip;.身為一個 vimer，我還是想試試看 emacs，所以就選了系上的一堂教 lisp 的課。&lt;br&gt;
本篇記錄一下安裝插件的過程&lt;br&gt;
(雖然我這篇還是用 vim 打的&amp;hellip;.&lt;/p&gt;
&lt;p&gt;這個插件的名稱是 &lt;code&gt;rainbow-delimiters&lt;/code&gt;，顧名思義就是讓對應的括號有相同的顏色，這在一堆括號的語言 lisp 中可以對初學者較為友善。&lt;/p&gt;
&lt;h1 id=&#34;emacs-&#34;&gt;emacs 安裝&lt;/h1&gt;
&lt;p&gt;emacs 的安裝方式就還是提一下，不然我應該記不起來@@&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo add-apt-repository ppa:ubuntu-elisp/ppa
$ sudo apt-get update
$ sudo apt-get install emacs-snapshot emacs-snapshot-el
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading&#34;&gt;超基本按鍵&lt;/h1&gt;
&lt;p&gt;我是超新手，所以只暫時記錄最重要的@@&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl-x ctrl-s&lt;/code&gt;：儲存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-x ctrl-c&lt;/code&gt;：離開&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;heading1&#34;&gt;新增設定檔&lt;/h1&gt;
&lt;p&gt;首先需要新增一個設定檔，就像 vim 中的 &lt;code&gt;.vimrc&lt;/code&gt; 一樣，而為了方便管理我使用 &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;，我們就直接用 emacs 編輯吧～&lt;/p&gt;
&lt;p&gt;Note. &lt;code&gt;-nw&lt;/code&gt; 可以用非 GUI 的方式開啟 emacs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mkdir ~/.emacs.d/
$ emacs -nw ~/.emacs.d/init.el
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;-melpahttpsmelpaorg-&#34;&gt;支援 &lt;a href=&#34;https://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt; 插件庫&lt;/h1&gt;
&lt;p&gt;打開之後貼上&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((no-ssl (and (memq system-type &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(windows-nt ms-dos))
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (gnutls-available-p))))
       (proto (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; no-ssl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt;)))
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired                                         &lt;/span&gt;
  (add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt;(concat proto&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;://melpa.org/packages/&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;;(add-to-list &amp;#39;package-archives (cons&amp;#34;melpa-stable&amp;#34;(concat proto&amp;#34;://stable.melpa.org/packages/&amp;#34;)) t)                            &lt;/span&gt;
  (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; emacs-major-version &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;;; For important compatibility libraries like cl-lib                                                                           &lt;/span&gt;
    (add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gnu&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (concat proto &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;://elpa.gnu.org/packages/&amp;#34;&lt;/span&gt;)))))
(package-initialize)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;-rainbowdelimiters-&#34;&gt;新增 &lt;code&gt;rainbow-delimiters&lt;/code&gt; 插件&lt;/h1&gt;
&lt;p&gt;退出 (上面有記錄怎麼儲存跟離開) 後重新開啟 emacs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ emacs -nw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;按下 &lt;code&gt;alt-x&lt;/code&gt; 後輸入 &lt;code&gt;package-list-packages&lt;/code&gt; 接著按下 &lt;code&gt;Enter&lt;/code&gt;
&lt;img src=&#34;https://drive.google.com/open?id=1tcS1Yxs-I0J1Nf63528PVypU7LmrhDhG&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;會發現出現一個各種插件的頁面。&lt;/p&gt;
&lt;p&gt;搜尋方式請按 &lt;code&gt;ctrl-s&lt;/code&gt; 後輸入 &lt;code&gt;rainbow-delimiters&lt;/code&gt; 接著 &lt;code&gt;Enter&lt;/code&gt;  即可找到
&lt;img src=&#34;https://drive.google.com/open?id=1lQa5BBsjLRQxUheS41WTRi1maN1AtA90&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;在那一行按下 &lt;code&gt;i&lt;/code&gt; 會發現最前方多了一個 &lt;code&gt;I&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note. 要取消請按 &lt;code&gt;u&lt;/code&gt;
&lt;img src=&#34;https://drive.google.com/open?id=1DuzQMOTEc4MO4HByxDhKCpVu30fr3FvV&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;選完後按下 &lt;code&gt;x&lt;/code&gt; 就可以安裝了&lt;/p&gt;
&lt;p&gt;結果最後還需要加東西到 &lt;code&gt;~/emacs.d/init.el&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rainbow-delimiters&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prog-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rainbow-delimiters-mode&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改完之後會發現有很淺的變色了&lt;/p&gt;
&lt;h1 id=&#34;heading2&#34;&gt;自訂顏色&lt;/h1&gt;
&lt;p&gt;結果就如封面所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(custom-set-variables
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(package-selected-packages &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(rainbow-delimiters)))
(custom-set-faces
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(rainbow-delimiters-depth-1-face ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dark orange&amp;#34;&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(rainbow-delimiters-depth-2-face ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deep pink&amp;#34;&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(rainbow-delimiters-depth-3-face ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chartreuse&amp;#34;&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(rainbow-delimiters-depth-4-face ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deep sky blue&amp;#34;&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(rainbow-delimiters-depth-5-face ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yellow&amp;#34;&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(rainbow-delimiters-depth-6-face ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orchid&amp;#34;&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(rainbow-delimiters-depth-7-face ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spring green&amp;#34;&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(rainbow-delimiters-depth-8-face ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sienna1&amp;#34;&lt;/span&gt;))))
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading3&#34;&gt;參考資料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://5xruby.tw/posts/emacs-part1/&#34;&gt;Emacs 入坑引導 - 打造自己的 Ruby IDE - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/RainbowDelimiters&#34;&gt;RainbowDelimiters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ericscrivner.me/2015/06/better-emacs-rainbow-delimiters-color-scheme/&#34;&gt;Better Emacs Rainbow Delimiters Color Scheme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>把 app 加到 ubuntu 的 dash 目錄</title>
      <link>https://aben20807.github.io/posts/20190302-add-app-to-ubuntu-dash-home/</link>
      <pubDate>Sat, 02 Mar 2019 10:40:02 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190302-add-app-to-ubuntu-dash-home/</guid>
      
      
      <description>&lt;p&gt;所謂的 dash 就有點像是在 windows 10 點擊「開始」出現的很多 app 的畫面。而在 ubuntu 中有些程式的安裝方式是從網路上下載壓縮檔後解壓縮，一般要啟動的話就需要先去打開那個資料夾再點擊，有點麻煩，所以就找了一個最簡單的方式將要用的程式加到 dash 中。&lt;/p&gt;
&lt;p&gt;測試系統：Ubuntu 18.04&lt;/p&gt;
&lt;h1 id=&#34;-gnomedesktopitemedit&#34;&gt;使用 gnome-desktop-item-edit&lt;/h1&gt;
&lt;p&gt;首先安裝 &lt;code&gt;gnome-desktop-item-edit&lt;/code&gt; 這個工具&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt install --no-install-recommends gnome-panel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著新增一個應用程式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo gnome-desktop-item-edit /usr/share/applications/ --create-new
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出現一個小框框，填入名稱以及程式所在&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1YFjaDpgQhBUacfdD38UnId97hAoPG1QL&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;點 OK 後就會出現了，不需要重新登入或關機&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1dRR1G6VrP2oid0S9QBvTvXVMeFHzGF8r&#34; alt=&#34;google-最下排左邊數來第二個&#34;&gt;&lt;/p&gt;
&lt;p&gt;圖標是預設的，若需要要修改就編輯一下檔案，注意檔名是剛剛取的名稱加上 .desktop 的副檔名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo vim /usr/share/applications/VisualVM.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;-icon-&#34;&gt;加上 icon 路徑&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1rAWhlWkLTVIJ8JhS_o-o-gZW1grBVbQU&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;p&gt;儲存後就可以看到結果了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1P1k41x1OtC9bbsphoYVyNTBoA14xDTKf&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;參考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxconfig.org/how-to-create-desktop-shortcut-launcher-on-ubuntu-18-04-bionic-beaver-linux#h6-3-desktop-shortcut-creation-with-gnome-desktop-item-edit&#34;&gt;Desktop Shortcut creation with gnome-desktop-item-edit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>訂閱囉</title>
      <link>https://aben20807.github.io/posts/20190227-subscription/</link>
      <pubDate>Wed, 27 Feb 2019 17:39:51 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190227-subscription/</guid>
      
      
      <description>&lt;p&gt;訂閱起來～訂閱起來～&lt;/p&gt;
&lt;p&gt;本篇主要是測試訂閱有沒有問題 (希望沒有&lt;/p&gt;
&lt;p&gt;要訂閱的話可以透過右上角的信箱圖案填寫 email&lt;/p&gt;
&lt;p&gt;或是真的懶的話：https://aben20807.github.io/subscription/&lt;/p&gt;
&lt;p&gt;如果是 Gmail 的話可能會被分到「促銷內容」可以透過篩選器喔。或是用右鍵來修改已經寄到信箱的信的標籤喔。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=19Ftzj_DlKmuTLeyybZw0V50ucBLHuiJ7&#34; alt=&#34;google- &#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk About Shame</title>
      <link>https://aben20807.github.io/posts/20190225-talk-about-shame/</link>
      <pubDate>Mon, 25 Feb 2019 21:40:00 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190225-talk-about-shame/</guid>
      
      
      <description>&lt;p&gt;顧炎武的＜廉恥＞中提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;四者之中，恥尤為要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中的四者就是禮、義、廉、恥應該不用多說 (去複習國文啦&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;關於標題&lt;/h1&gt;
&lt;p&gt;(有時候英文標題就懶的改了，不然就是改了有點怪，想這次的，所以我就不改囉＠＠&lt;/p&gt;
&lt;p&gt;說到英文，「恥」在英文翻譯是 shame，不過在四維的英文中其對應的是 honor。根據不專業的討論，shame 是貶義，而英文卻傾向用褒義表達，更進一步的去解釋可以想成「恥」是讓我們了解什麼是不榮耀的事，大概是這樣。&lt;/p&gt;
&lt;p&gt;(圖片有點震撼我知道 OuO&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;正題&lt;/h1&gt;
&lt;p&gt;為何會突然講這個主題呢？其實很多事情都是先學會，然後在之後才會去遇到，甚至體會到一開始接觸到時沒有獲得的感觸。這次談的這個主題其實已經在腦海中想過頗多次，但就如同上述，是我在高中學到這段課文後過了很久才漸漸有看法。或許到大學這段期間還不算久，我想會有更多的東西可能是我到老還無法了解的吧。&lt;/p&gt;
&lt;p&gt;總結那篇課文，其認為人會違反一些道德倫理，是因為無恥所導致。&lt;/p&gt;
&lt;p&gt;結合到日常生活中，最微小的可以從那些不遵守交通規則的人身上看出，他們將這些視為理所當然，例如在台南闖紅燈是再稀鬆平常不過的事了，在那些人眼中我看不到一絲的羞恥感。這或許也是現行法律所無法顧慮的吧，之前上課總說法律是道德的最低標準，這也是為何重刑不管用，酒駕的還是會酒駕，因為罰錢根本是小事，內心的道德感一點也沒有覺得自己做錯。我覺得可能要更善加利用輿論壓力才能有效降低，例如酒駕就會有標籤，可能求職時就需要出示之類的，但這都只是外部的約束，主要還是要自己感覺到「恥」。&lt;/p&gt;
&lt;p&gt;除了這些，更有人會合理化自己的行為，認為自己沒有影響別人什麼的，其實就需要去思考那為何需要訂定交通規則。&lt;/p&gt;
&lt;p&gt;另外，亂丟垃圾也是，真心不懂為何有人就是會把垃圾留在離垃圾桶不到五步距離的飲水機上。總之族繁不及備載，這些事一直都會發生。&lt;/p&gt;
&lt;h1 id=&#34;heading2&#34;&gt;結論&lt;/h1&gt;
&lt;p&gt;好啦，其實也沒有要戰什麼，其實是想表達自己看到的現象彷彿跟以前學到的有些許映射。總之呢，希望世界和平，做人有多一點點羞恥心去用不同的角度去看待事情，這樣才能打造更和諧的社會。&lt;/p&gt;
&lt;h1 id=&#34;heading3&#34;&gt;後記&lt;/h1&gt;
&lt;p&gt;其實我是覺得我可能過於看重這件事了，所以會變得比較怕去麻煩別人，當然這有好有壞，我是不太建議像我這樣的個性，因為時常要跟自己打架 XDD。人活著也不是要一直去注意他人的眼光，去找一個適合自己的光譜位置，然後貫徹自己的想法吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Makefile for Testing</title>
      <link>https://aben20807.github.io/posts/20190216-makefile-for-testing/</link>
      <pubDate>Sat, 16 Feb 2019 10:00:48 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190216-makefile-for-testing/</guid>
      
      
      <description>&lt;p&gt;Makefile 可以執行終端機的指令，所以也可以搭配重新導向 (redirection) 用來做簡單測試&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    ./a.out &amp;lt; input.txt &amp;gt; output.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣只需要用 &lt;code&gt;$ make test&lt;/code&gt; 就可以測試輸入 input.txt，並把結果存到 output.txt&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;舊方法&lt;/h1&gt;
&lt;p&gt;不過若是有很多種輸入測資的話會有點麻煩，當然還是可以寫成這樣&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    ./a.out &amp;lt; input1.txt &amp;gt; output1.txt

&lt;span style=&#34;color:#a6e22e&#34;&gt;test2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    ./a.out &amp;lt; input2.txt &amp;gt; output2.txt

&lt;span style=&#34;color:#a6e22e&#34;&gt;test3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    ./a.out &amp;lt; input3.txt &amp;gt; output3.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    ./a.out &amp;lt; input1.txt &amp;gt; output1.txt
    ./a.out &amp;lt; input2.txt &amp;gt; output2.txt
    ./a.out &amp;lt; input3.txt &amp;gt; output3.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣寫的缺點就是每次測資增加的時候舊需要修改 Makefile&lt;/p&gt;
&lt;h1 id=&#34;makefile-&#34;&gt;Makefile 內建函式&lt;/h1&gt;
&lt;p&gt;不過其實有更好的寫法，利用 makefile 內建的函式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;INPUT_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input/linux/
INPUTS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;wildcard &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;INPUT_DIR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;*.txt&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
OUTPUT_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output/linux/
OUTPUTS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;addprefix &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;OUTPUT_DIR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;notdir &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;INPUTS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wildcard&lt;/code&gt;: 獲取輸入檔案列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notdir&lt;/code&gt;: 獲得檔案名稱 (去掉前面路徑)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addprefix&lt;/code&gt;: 加上前綴 (修改輸出路徑)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這樣的優點就是只要 input/linux/ 中有多的 .txt 檔就會自動加入測試，不需要修改 Makefile&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;完整範例&lt;/h1&gt;
&lt;h2 id=&#34;heading2&#34;&gt;檔案們&lt;/h2&gt;
&lt;h3 id=&#34;tc&#34;&gt;&lt;code&gt;t.c&lt;/code&gt;:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b;
    scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;CC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcc
EXEC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a.out

INPUT_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input/linux/
INPUTS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;wildcard &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;INPUT_DIR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;*.txt&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
OUTPUT_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output/linux/
OUTPUTS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;addprefix &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;OUTPUT_DIR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;notdir &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;INPUTS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; all, test, mk_parent_dir

&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;EXEC&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;mk_parent_dir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    @mkdir -p &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;OUTPUT_DIR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; mk_parent_dir &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;OUTPUTS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;$(OUTPUT_DIR)%.txt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;INPUT_DIR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;%.txt &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;EXEC&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
    ./a.out &amp;lt; $&amp;lt; &amp;gt; $@
    @cat $&amp;lt; $@ &lt;span style=&#34;color:#75715e&#34;&gt;# cat the content of file&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;$(EXEC)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; t.c
    &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CC&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; t.c

&lt;span style=&#34;color:#a6e22e&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    rm -rf &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;OUTPUT_DIR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; a.out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading3&#34;&gt;檔案架構&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ tree .
.
├── input
│   └── linux
│       ├── test1.txt
│       ├── test2.txt
│       └── test3.txt
├── Makefile
├── output
└── t.c
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading4&#34;&gt;使用&lt;/h2&gt;
&lt;h3 id=&#34;--make-test&#34;&gt;指令同為 &lt;code&gt;$ make test&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ make test
gcc t.c
./a.out &amp;lt; input/linux/test2.txt &amp;gt; output/linux/test2.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
./a.out &amp;lt; input/linux/test3.txt &amp;gt; output/linux/test3.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;177&lt;/span&gt;
./a.out &amp;lt; input/linux/test1.txt &amp;gt; output/linux/test1.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading5&#34;&gt;結果檔案架構&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ tree .
.
├── a.out
├── input
│   └── linux
│       ├── test1.txt
│       ├── test2.txt
│       └── test3.txt
├── Makefile
├── output
│   └── linux
│       ├── test1.txt
│       ├── test2.txt
│       └── test3.txt
└── t.c
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;heading6&#34;&gt;後記&lt;/h1&gt;
&lt;p&gt;上面的簡單例子中可能看不出 &lt;code&gt;$(INPUTS)&lt;/code&gt; 跟 &lt;code&gt;$(OUTPUTS)&lt;/code&gt; 的用途，不過在相依多的話可以直接代表全部的檔案，但若是需要做名稱配對的話還是需要 &lt;code&gt;%&lt;/code&gt; 出馬，就像 &lt;code&gt;$(OUTPUT_DIR)%.txt: $(INPUT_DIR)%.txt&lt;/code&gt; 來表示輸入輸出的檔名要一致。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>咖啡木蠹蛾</title>
      <link>https://aben20807.github.io/posts/20190212-zeuzera-coffeae-nietner/</link>
      <pubDate>Tue, 12 Feb 2019 22:51:30 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190212-zeuzera-coffeae-nietner/</guid>
      
      
      <description>&lt;p&gt;(以下圖片皆攝於 2019.02.03)&lt;/p&gt;
&lt;p&gt;咖啡木蠹蛾，學名 Zeuzera Coffeae Nietner
詳細可以去行政院農業委員會 農業試驗所提供的&lt;a href=&#34;http://web.tari.gov.tw/techcd/%E6%9E%9C%E6%A8%B9/%E5%B8%B8%E7%B6%A0%E6%9E%9C%E6%A8%B9/%E6%A5%8A%E6%A1%83/%E8%9F%B2%E5%AE%B3/%E6%A5%8A%E6%A1%83-%E5%92%96%E5%95%A1%E6%9C%A8%E8%A0%B9%E8%9B%BE.htm&#34;&gt;圖鑑&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=14FU_jdoqFlTPkXxMENhMgayz86EkCfeGvg&#34; alt=&#34;google-點圖可放大喔 OuO&#34;&gt;&lt;/p&gt;
&lt;p&gt;總之呢就是害蟲，幼蟲會把樹木的枝條蛀空。&lt;/p&gt;
&lt;p&gt;我們家就是幾乎不噴農藥雜草也不會一定要用除草劑處理的光禿禿的，所以難免有害蟲。
&lt;img src=&#34;https://drive.google.com/open?id=1W2XiqPRhfVaMGkPwO_wRMIiIO_o1tdZH3g&#34; alt=&#34;google-灑水中的葡萄園&#34;&gt;&lt;/p&gt;
&lt;p&gt;這隻剛從蛹中出來就被我拍到，然後通報給老媽，她趁牠還沒出去產卵就把牠處理掉了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1hssv_igXB1P3KEfEcCT5o2lbT64TF8JcbA&#34; alt=&#34;google-蛹，仔細看第1張圖會看到喔&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1GzQL4C-PyzQEkUnv7T2InNbzfUyjR2qZRg&#34; alt=&#34;google-葡萄營養珠(老媽說是氮珠)&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://aben20807.github.io/posts/features/</link>
      <pubDate>Wed, 06 Feb 2019 09:37:31 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/features/</guid>
      
      
      <description>&lt;p&gt;記錄一下一些特性和使用方式&lt;/p&gt;
&lt;h1 id=&#34;-heading&#34;&gt;標題 (heading)&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;# h1
## h2
### h3
#### h4 支援 emoji 😄
##### h5 支援中文~
###### h6 
####### h7 最多只有到 6 級
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;h1&#34;&gt;h1&lt;/h1&gt;
&lt;h2 id=&#34;h2&#34;&gt;h2&lt;/h2&gt;
&lt;h3 id=&#34;h3&#34;&gt;h3&lt;/h3&gt;
&lt;h4 id=&#34;h4--emoji-&#34;&gt;h4 支援 emoji 😄&lt;/h4&gt;
&lt;h5 id=&#34;h5-&#34;&gt;h5 支援中文~&lt;/h5&gt;
&lt;h6 id=&#34;h6&#34;&gt;h6&lt;/h6&gt;
&lt;p&gt;####### h7 最多只有到 6 級&lt;/p&gt;
&lt;p&gt;右邊會有浮動 TOC (table of contents)，可點擊！&lt;br&gt;
只會顯示 h1 ~ h3 過長會變成 &amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;test-112sdofjsojdfojasodjfosjofdsoifjaosjdofj&#34;&gt;test中文 1-12sdofjsojdfojasodjfosjofdsoifjaosjdofj&lt;/h3&gt;
&lt;h1 id=&#34;code-section&#34;&gt;Code section&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading&#34;&gt;強調字型&lt;/h1&gt;
&lt;p&gt;可參考：https://www.markdownguide.org/basic-syntax/#emphasis&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;__粗體__  
**粗體**  
_斜體_  
*斜體*  
__*粗斜體*__
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;粗體&lt;/strong&gt; 
&lt;strong&gt;粗體&lt;/strong&gt; 
&lt;em&gt;斜體&lt;/em&gt; 
&lt;em&gt;斜體&lt;/em&gt; 
&lt;strong&gt;&lt;em&gt;粗斜體&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;橫線&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;---
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;-bullet&#34;&gt;項目 (Bullet)&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;+ a
  + 1
  + 2
+ b
  1. OuO
  2. QuQ
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;a
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;b
&lt;ol&gt;
&lt;li&gt;OuO&lt;/li&gt;
&lt;li&gt;QuQ&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;heading2&#34;&gt;引用&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; The more I learn, the more I realize how much I don&#39;t know.  
&amp;gt; --- Albert Einstein
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;The more I learn, the more I realize how much I don&#39;t know.&lt;br&gt;
&amp;mdash; Albert Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;heading3&#34;&gt;插入圖片&lt;/h1&gt;
&lt;p&gt;目前並不打算直接上傳到 github，所以找了一些方式&lt;br&gt;
一般圖片&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;![&lt;span style=&#34;color:#f92672&#34;&gt;alt&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;https://drive.google.com/uc?export=view&amp;amp;id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://drive.google.com/uc?export=view&amp;amp;id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC&#34; alt=&#34;alt&#34;&gt;&lt;/p&gt;
&lt;p&gt;這裡大部份會使用 google 雲端當作圖床&lt;br&gt;
不過從取得連結那裡會拿到：https://drive.google.com/open?id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC&lt;br&gt;
要改成上面的連結才行，所以我動了一些手腳，下面還會顯示標題說明，點擊即可在新分頁開啟可放大的圖片瀏覽器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;![&lt;span style=&#34;color:#f92672&#34;&gt;google-title here&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;https://drive.google.com/open?id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC&#34; alt=&#34;google-title here&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;youtube&#34;&gt;YouTube&lt;/h1&gt;
&lt;pre&gt;
{{&amp;lt; youtube &amp;quot;&lt;span&gt;https://www.youtube.com/watch?v=jC3jnC1dsAg&lt;/span&gt;&amp;quot; &amp;gt;}}
&lt;/pre&gt;







&lt;div
  style=&#34; position: relative; width: 100%; height: 100%;
    padding-bottom: 56.25%;  //16:9 &#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/jC3jnC1dsAg?start=1&#34;
  style=&#34; position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34;
  class=&#34;center&#34;
  allowfullscreen frameborder=&#34;0&#34;
  title=&#34;YouTube Video&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;pre&gt;
{{&amp;lt; youtube &amp;quot;&lt;span&gt;https://www.youtube.com/watch?v=jC3jnC1dsAg?t=500&lt;/span&gt;&amp;quot; &amp;gt;}}
&lt;/pre&gt;







&lt;div
  style=&#34; position: relative; width: 100%; height: 100%;
    padding-bottom: 56.25%;  //16:9 &#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/jC3jnC1dsAg?start=500&#34;
  style=&#34; position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34;
  class=&#34;center&#34;
  allowfullscreen frameborder=&#34;0&#34;
  title=&#34;YouTube Video&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Happy New Year</title>
      <link>https://aben20807.github.io/posts/20190204-happy-new-year/</link>
      <pubDate>Mon, 04 Feb 2019 23:03:48 +0800</pubDate>
      <author>aben20807@gmail.com (Huang Po-Hsuan)</author>
      <guid>https://aben20807.github.io/posts/20190204-happy-new-year/</guid>
      
      
      <description>&lt;p&gt;今天除夕，首先祝各位新年快樂~&lt;/p&gt;
&lt;p&gt;第一天用比較偏累，基本上把會用的東西都裝一裝了，例如：google analysitcs, disqus。likecoin 的部份我覺得可能還要找方法，不然拖慢許多載入速度。&lt;/p&gt;
&lt;p&gt;總之，主因大致上可以推給 G+ 關閉吧，加上在 Blogger 那邊改主題頗累 (外加煩躁) 選擇 Hugo 主要是速度吧，號稱目前最快，原本考慮的 Jekyll 跟 Hexo 似乎在文章多的時候都會慢，所以就直上了(?)。&lt;/p&gt;
&lt;p&gt;這裡會發的文會更偏向記錄，要說是日記也是可，不過我相信我自己絕對不可能日更，尤其是已經在研究所幹活了，可能這篇第一篇也是最後一篇也說不定。&lt;/p&gt;
&lt;p&gt;恩&amp;hellip;也不知道怎麼結尾，那就這樣吧 OuO&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
