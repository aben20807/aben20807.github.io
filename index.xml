<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>記錄用</title><link>https://aben20807.github.io/</link><description>Recent content on 記錄用</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><managingEditor>aben20807@gmail.com (Huang Po-Hsuan)</managingEditor><webMaster>aben20807@gmail.com (Huang Po-Hsuan)</webMaster><atom:link href="https://aben20807.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Fastest Plot by Matplotlib on Large CSV</title><link>https://aben20807.github.io/posts/20220304-fastest-plot-by-matplotlib-on-large-csv/</link><pubDate>Fri, 04 Mar 2022 14:56:13 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20220304-fastest-plot-by-matplotlib-on-large-csv/</guid><description><![CDATA[
          
          
            <p><a href="https://aben20807.github.io/posts/20220304-fastest-plot-by-matplotlib-on-large-csv/"><img src="https://lh3.googleusercontent.com/pw/AM-JKLVWFTCEBBD1wWbQlg0TuK9NHv_6su0Z189Qu9_c9tGnZvAHvNYVGcbqFaWAwexSvGgGxlB16QKCMV9gKbC0j1geGEygrA_CsHa2QqK5TKfMwEegGP-ik7k5ovCmutEDPf-Teo5QcDRq4NsK28NDLWcavA=w1205-h894-no" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20220304-fastest-plot-by-matplotlib-on-large-csv/">Visit website to read the full article</a></p>
          <h1 id="tldr">TL;DR</h1> <p><a href="#最佳化版本">{{ 最佳化版本 }}</a></p> <h1 id="environment">Environment</h1> <ul> <li>WSL2 Ubuntu 18.04</li> </ul> <h1 id="資料產生範例">資料產生範例</h1> <p>Fixed point 與 floating point 的乘法絕對誤差 </p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstdint&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fstream&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;random&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e"></span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">constexpr</span> <span style="color:#66d9ef">int</span> N <span style="color:#f92672">=</span> <span style="color:#ae81ff">5&#39;000&#39;000</span>; <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">constexpr</span> <span style="color:#66d9ef">float</span> RANGE <span style="color:#f92672">=</span> <span style="color:#ae81ff">10.0</span>; <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">constexpr</span> <span style="color:#66d9ef">int</span> FRACTION_BITS <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>; <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">constexpr</span> <span style="color:#66d9ef">int</span> SCALING_FACTOR <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> FRACTION_BITS; std<span style="color:#f92672">::</span>mt19937 gen(<span style="color:#ae81ff">0</span>); std<span style="color:#f92672">::</span>uniform_real_distribution<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">float</span><span style="color:#f92672">&gt;</span> dis(<span style="color:#f92672">-</span>RANGE, RANGE); <span style="color:#75715e">#define FLOAT_TO_FIXED(x)                                  \ </span><span style="color:#75715e">  (static_cast&lt;uint32_t&gt;(                                  \ </span><span style="color:#75715e">      static_cast&lt;int32_t&gt;(x *                             \ </span><span style="color:#75715e">      static_cast&lt;float&gt;(SCALING_FACTOR)))) </span><span style="color:#75715e">#define FIXED_TO_FLOAT(x)                                  \ </span><span style="color:#75715e">  (static_cast&lt;float&gt;(static_cast&lt;int32_t&gt;(x)) /           \ </span><span style="color:#75715e">   static_cast&lt;float&gt;(SCALING_FACTOR)) </span><span style="color:#75715e"></span> <span style="color:#66d9ef">uint32_t</span> <span style="color:#a6e22e">fixed_point_mul</span>(<span style="color:#66d9ef">uint32_t</span> x, <span style="color:#66d9ef">uint32_t</span> y) {   <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">uint32_t</span><span style="color:#f92672">&gt;</span>(       (<span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int32_t</span><span style="color:#f92672">&gt;</span>(x) <span style="color:#f92672">*</span> <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int32_t</span><span style="color:#f92672">&gt;</span>(y))       <span style="color:#f92672">&gt;&gt;</span> FRACTION_BITS); } <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[]) {   std<span style="color:#f92672">::</span>ofstream out(<span style="color:#e6db74">&#34;data.csv&#34;</span>);   <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i{<span style="color:#ae81ff">0</span>}; i <span style="color:#f92672">&lt;</span> N; <span style="color:#f92672">++</span>i) {     <span style="color:#66d9ef">auto</span> x <span style="color:#f92672">=</span> dis(gen);     <span style="color:#66d9ef">auto</span> y <span style="color:#f92672">=</span> dis(gen);     <span style="color:#66d9ef">auto</span> z_float <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> y;     <span style="color:#66d9ef">auto</span> z_fixed <span style="color:#f92672">=</span>         FIXED_TO_FLOAT(             fixed_point_mul(FLOAT_TO_FIXED(x),                              FLOAT_TO_FIXED(y)));     <span style="color:#66d9ef">if</span> (i <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {       out <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;,&#39;</span>;     }     out <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>abs(z_float <span style="color:#f92672">-</span> z_fixed);   }   out.close();   <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; } </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ g++ -std<span style="color:#f92672">=</span>c++1z -o data_gen data_gen.cpp $ time ./data_gen real    0m1.862s user    0m1.829s sys     0m0.030s $ ls -lh data.csv Permissions Size User Date Modified Name .rw-r--r--   54M ben   <span style="color:#ae81ff">4</span> Mar 16:58  data.csv </code></pre></div></div><h1 id="python-environment">Python Environment</h1> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ virtualenv -p python3.7 venv3.7 $ source venv3.7/bin/activate $ pip install matplotlib numpy pandas </code></pre></div></div><h1 id="read-csv">Read CSV</h1> <p>首先第一個遇到的困難就是讀取 CSV 太慢，按照網路上找的各種方法 ，其實在小量資料下可以採用，不過我測試了一些方法，最後發現第三種版本可以最快的讀取 CSV 到 numpy array 中。</p> <ul> <li>v1_read_csv.py</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np fin <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;data.csv&#34;</span> data <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>genfromtxt(fin, delimiter<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;,&#39;</span>) print(data) </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ time python3 v1_read_csv.py <span style="color:#f92672">[</span>0.00228202 0.00304794 0.00644779 ... 0.00259626 0.00812531 0.00063801<span style="color:#f92672">]</span> real    0m38.557s user    0m35.961s sys     0m2.834s </code></pre></div></div><ul> <li>v2_read_csv.py</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd fin <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;data.csv&#34;</span> df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(fin, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;,&#39;</span>,header<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>) data <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>to_numpy()[<span style="color:#ae81ff">0</span>] print(data) </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ time python3 v2_read_csv.py <span style="color:#f92672">[</span>0.00228202 0.00304794 0.00644779 ... 0.00259626 0.00812531 0.00063801<span style="color:#f92672">]</span> real    2m44.089s user    2m41.911s sys     0m2.388s </code></pre></div></div><ul> <li>v3_read_csv.py</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np <span style="color:#f92672">import</span> csv fin <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;data.csv&#34;</span> <span style="color:#66d9ef">with</span> open(fin, newline<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#66d9ef">as</span> csvfile:     data <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>asarray([float(x) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> (list(csv<span style="color:#f92672">.</span>reader(csvfile, delimiter<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;,&#34;</span>))[<span style="color:#ae81ff">0</span>])]) print(data) </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ time python3 v3_read_csv.py <span style="color:#f92672">[</span>0.00228202 0.00304794 0.00644779 ... 0.00259626 0.00812531 0.00063801<span style="color:#f92672">]</span> real    0m1.583s user    0m1.393s sys     0m0.525s </code></pre></div></div><h1 id="plot">Plot</h1> <p>接下來是畫圖的部份。把所有點畫到畫布中會發現產生的 pdf 檔案蠻大，而且開啟時間蠻久。</p> <ul> <li>v4_plot.py</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np <span style="color:#f92672">import</span> csv <span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt fin <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;data.csv&#34;</span> <span style="color:#66d9ef">with</span> open(fin, newline<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#66d9ef">as</span> csvfile:     data <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>asarray([float(x) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> (list(csv<span style="color:#f92672">.</span>reader(csvfile, delimiter<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;,&#34;</span>))[<span style="color:#ae81ff">0</span>])]) print(data) fout <span style="color:#f92672">=</span> fin<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;.pdf&#34;</span> fig, ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots() ax<span style="color:#f92672">.</span>boxplot(data) ax<span style="color:#f92672">.</span>autoscale() plt<span style="color:#f92672">.</span>tight_layout() plt<span style="color:#f92672">.</span>savefig(fout, bbox_inches<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;tight&#34;</span>, dpi<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>) </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ time python3 v4_plot.py <span style="color:#f92672">[</span>0.00228202 0.00304794 0.00644779 ... 0.00259626 0.00812531 0.00063801<span style="color:#f92672">]</span> real    0m5.063s user    0m4.875s sys     0m2.854s $ ls -lh data.csv.pdf Permissions Size User Date Modified Name .rw-r--r--  206k ben   <span style="color:#ae81ff">5</span> Mar 10:25  data.csv.pdf </code></pre></div></div><h1 id="最佳化版本">最佳化版本</h1> <p>有很多資料點其實是重複的，我當下覺得應該有辦法可以忽略重複的點，但是又不能對資料做過濾，因為這樣分佈就錯誤了。一個比較好的方法其實是在 python 先計算好分佈 (最大，最小，中位數，第一分位數，第三分位數)。</p> <p>不過 matplotlib 提供 box plot 可以根據資料繪製盒狀圖，代表應該可以不用自行計算。因此朝向如何讓重複的點可以不被重複繪製。</p> <p>後來查到 rasterized 選項 ，可以將向量圖形轉成點陣圖，很大程度縮小產生的檔案大小。至此完整版的整理如下。</p> <ul> <li>v5_plot.py</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np <span style="color:#f92672">import</span> csv <span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt fin <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;data.csv&#34;</span> <span style="color:#66d9ef">with</span> open(fin, newline<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#66d9ef">as</span> csvfile:     data <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>asarray([       float(x) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span>          (list(csv<span style="color:#f92672">.</span>reader(csvfile, delimiter<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;,&#34;</span>))[<span style="color:#ae81ff">0</span>])]) print(data) fout <span style="color:#f92672">=</span> fin<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;.pdf&#34;</span> fig, ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots() ax<span style="color:#f92672">.</span>boxplot(data) ax<span style="color:#f92672">.</span>set_rasterized(<span style="color:#66d9ef">True</span>) ax<span style="color:#f92672">.</span>autoscale() plt<span style="color:#f92672">.</span>tight_layout() plt<span style="color:#f92672">.</span>savefig(fout, bbox_inches<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;tight&#34;</span>, dpi<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>) </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ time python3 v5_plot.py <span style="color:#f92672">[</span>0.00228202 0.00304794 0.00644779 ... 0.00259626 0.00812531 0.00063801<span style="color:#f92672">]</span> real    0m3.128s user    0m3.212s sys     0m2.050s $ ls -lh data.csv.pdf Permissions Size User Date Modified Name .rw-r--r--   37k ben   <span style="color:#ae81ff">5</span> Mar 11:46  data.csv.pdf </code></pre></div></div><p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVWFTCEBBD1wWbQlg0TuK9NHv_6su0Z189Qu9_c9tGnZvAHvNYVGcbqFaWAwexSvGgGxlB16QKCMV9gKbC0j1geGEygrA_CsHa2QqK5TKfMwEegGP-ik7k5ovCmutEDPf-Teo5QcDRq4NsK28NDLWcavA=w1205-h894-no" alt="繪製結果" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">繪製結果</center>     </figcaption>   </figure> </p> <h1 id="references">References</h1> <ul> <li><a href="https://medium.com/casual-inference/the-most-time-efficient-ways-to-import-csv-data-in-python-cc159b44063d">The most (time) efficient ways to import CSV data in Python</a></li> <li><a href="https://docs.python.org/3/library/csv.html">csv — CSV File Reading and Writing</a></li> </ul> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Fixed-point_arithmetic">Fixed-point arithmetic</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://stackoverflow.com/questions/3518778/how-do-i-read-csv-data-into-a-record-array-in-numpy">How do I read CSV data into a record array in NumPy?</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://adrian.pw/blog/matplotlib-rasterize/">Rasterize all lines below a layer with Matplotlib</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Quantum Toffoli Gate (CCNOT) IBM Quantum</title><link>https://aben20807.github.io/posts/20220303-quantum-toffoli-gate-ccnot-ibm-quantum/</link><pubDate>Thu, 03 Mar 2022 16:05:11 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20220303-quantum-toffoli-gate-ccnot-ibm-quantum/</guid><description><![CDATA[
          <p>使用 IBM Quantum Composer 去執行 CCNOT gate</p>
          
            <p><a href="https://aben20807.github.io/posts/20220303-quantum-toffoli-gate-ccnot-ibm-quantum/"><img src="https://lh3.googleusercontent.com/pw/AM-JKLW7J_uP_OIDxEAQW-kgUL7IN4QvBNhkYIuIhZXlxIYV3AnjbMvXjAYTChJ3zuw2a9zOFLosrTmT9iv6yUI9J4gdlrfIrQ5LHv7L2kZR7JHETDBAbbZn97hWE9Q-bxmPi--2ELMSTTOwCqGYdrU-rUdieg=w1462-h928-no" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20220303-quantum-toffoli-gate-ccnot-ibm-quantum/">Visit website to read the full article</a></p>
          <p>使用 IBM Quantum Composer 去執行 CCNOT gate</p>   <h1 id="執行分解後的-ccnot-步驟">執行分解後的 CCNOT 步驟</h1> <h2 id="註冊">註冊</h2> <p>IBM Quantum 網站: <a href="https://quantum-computing.ibm.com/">https://quantum-computing.ibm.com/</a></p> <p>選擇一種方式註冊並登入</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLWWEhIyTyin9-Cge_xkB3fYXaKPlZT2nW4ZqwiasvMc9bVF7ibjkaxDuoqit5MFDCSiHEwBVX6xB0yoyAleCEJ9GugJje_CTshi2HDSwKqiXmX-XnPgxbBG8Lr8_OgWeuwTs22w6trcjcckMD8yYdKEeg=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="點選-lunch-composer">點選 Lunch Composer</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVDonbejKxg0UZHiAjt9YQGSFurdzA3PqHGo1a9Pv5DPVRjLAWgK9ywtVJIiIBgUE-DxW1QC-bvw32L40BrciU8-ZgTaEjX3nUSf0JzrUqahCm_EdHuOCK4iOdu0AUQMdau1xITtv-ib2AQr7F6vsWHEw=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="開啟編輯介面後直接開始拉方塊-不需要按左邊的的-new-file我點超久都沒反應結果方塊一放就有新檔案">開啟編輯介面後直接開始拉方塊 (不需要按左邊的的 New file，我點超久都沒反應，結果方塊一放就有新檔案)。</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUkLalBYydKF1MqC9IoRuUVN43dHBXrCDMo_Cdq0fduJ2ejewbXMfJXmHYzQWjERhp0_jzPfXwRArAuOmltc3AvN99Br_7Mh0_SZtjOm6JJ7Tte3nHCcZbAM8bFtQs2uS2BV-Jzowheu9LZq0xI_X2drA=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="本次的電路圖跟上一篇相同對應的程式碼會自動生成-綠框機率也有模擬出來-藍框">本次的電路圖跟上一篇相同，對應的程式碼會自動生成 (綠框)，機率也有模擬出來 (藍框)</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLU-oFi2NjE_arGe3wEjOuKgwBPsah6zXAZEQ-rffhT-fvXmSn1A7thBugROYfcxW-11fuQgZXEFmGlmDDpkiQqlZXoR-NpPfozMZNh1ZN7lJHX8l-Q8hCwGuPXgM-dYV6SbqKp8A5SqTDm0upVz4wsj8g=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="接著可以改檔案名稱並儲存然後按右上角的-setup-and-run">接著可以改檔案名稱並儲存，然後按右上角的 Setup and run</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLViA5eCyd1j1emYrjoz9JYQqxFheIBhOqO3xF_-t5x0EUEuBaiIK709MJqyAniBzLbUQd71XBu7LUaJgLL8bvIKIr4aaSZn0HiwQLRGjt5eO1--R1At6EhGwKHYs78GhCUjPglsCJHOJbUIRrIL-H6uOg=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="這裡會列出很多可以使用的量子電腦點-see-details-可以看到該量子電腦的設定以及排隊情況如下">這裡會列出很多可以使用的量子電腦，點 See details 可以看到該量子電腦的設定以及排隊情況如下</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLXLH4FY2CixOQwra1LAy8MKdBbAA_ESjHl8A_HUAgkXFbDjcuQeGF1DQqBerpuiFJzz4gDyF1YThlhxqsP8c77IHSvA34QicJBoSd6FQafIrP93_FwBTKoOyN8CeTlpjQRTzagFJbAUwwSW9J2PdA7AZw=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="挑選一個量子電腦設定-job-名稱後就可以執行">挑選一個量子電腦、設定 job 名稱後就可以執行</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVCva1NqIs-SRZYY3NKZ084nLETp3ybH-HicGbSFIr6LVqrKiTCyQgcH0p0Rvr_M_OrCcrlUT9-FlNkoF4UapM-HINKvDzibFENmIgOiFiYefe8b3b2k-TXRUEwb1vIPU394QPR6C7-esjJZK79eHDx-w=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="左邊欄位會顯示目前狀態">左邊欄位會顯示目前狀態</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLWgiP8R-0sTfTTJPBdpOZTw4gN__T-Sh1zEaFYGoFuv6P7CWGDW81QhFCeBXrBazMQhCV99eKSn_GegWJhalOsNed-rmp6svMMCJVDC0e0SiiiruU_0MoFySofVHjSZZUFi4c-YSLFX-Wh-vtUoWYHfjQ=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="跑完後結果會顯示出來">跑完後結果會顯示出來</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLX7gbRZ-Kb6TCo3suz7FoIpbcrHigsj5cQs7fxvfPBZURKN_MBmYYufPgf7Kj1T3zuE9sR0VyWqGbcNruMt9DVZCACRrV30QzGMiepfvUdebtqEUKcH2ExGWh9h4XsF39WBJrnwPwomlsy7jc5CMrn_Lw=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="也可以選擇-see-more-details-查看執行細節">也可以選擇 See more details 查看執行細節</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLW6nFPz2wKvWga5GmfyWsyTviDShyRlLZGqMVUa568rzum_NC1mWmk3sxzXxr9GGYYJL-1temWb6NDk_y5_Dsm3PLGODaj5Pgrd1nx2w0qDYKrbaOk61PBSYdZHpsJnZ6GYYcMO1lN1EsJbZUXWNeB-Fw=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h1 id="ccnot-不用分解">CCNOT 不用分解!?</h1> <h2 id="後來發現有一個-ccnot-的方塊不過突然要等-9-個小時之後有結果再更新">後來發現有一個 CCNOT 的方塊，不過突然要等 9 個小時&hellip;之後有結果再更新</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLXPlejfwyXhXdO3a3mTJdyzeN-gqRxYUXwl3QL-a6oMUnjMg0LwBZTuntOkBgYGPsdOIxOpOnSkt9aIM0OO6RRa1dvQ6ZgsxITPMRPNwsp94ZweXyflV8siEmoIypUpTDc2qb5kIq9WD277yoP-uXc90Q=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="看起來是有類似-function-的結構">看起來是有類似 function 的結構</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLXWj9WuU0eHjO3jajkSy2caM389G80yHRCmYSbb-8L9TGq18Go2w-wX93v7P4MTpFz1x8fLQGCVUVdph21NEaeprGDeTkhp8PnEAQzsYZoX7Oukn-DiNsaZ2mSQqp-haieinvxbiJQPdGnCcvu8Wh51UA=w390-h451-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="更新-執行結果">更新: 執行結果</h2> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUwSRM1ZhZzSnMHaiIQu1Gw1sx-6w3TARRjK6a2W-ar97ZKlhMRjSb4EqRAkS7v7lVNozvJDPhV-anIEQEUR3ySG1OG-eKqw_OStSMOORM_lcn-duowKLDslw9XdyfnRo-yy6CIEANs9pRdJ7kj9XB_JQ=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUMeBqpCAf4XH3ZfmVM3LOiBb3L5N4XRv15cVdEVrfPeBRugq9AEtgupEDAbVVl0V3D0Kw0uDFglOzHnx17A9upCg7swAy-BPug8h44tw2a79NbytBkfSiuI2yz_M7RtkQOdEJsg2C2mH3C6XIu8LJ7aw=w2560-h1267-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p>
        ]]></description></item><item><title>Quantum Toffoli Gate (CCNOT) Decomposition</title><link>https://aben20807.github.io/posts/20220302-quantum-toffoli-gate-ccnot-decomposition/</link><pubDate>Wed, 02 Mar 2022 09:12:55 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20220302-quantum-toffoli-gate-ccnot-decomposition/</guid><description><![CDATA[
          <p>在課堂 &ldquo;量子電腦程式設計&rdquo; 學到的推導過程。  主要是將一個 CCNOT 分解成使用 6 個 CNOT。</p>
          
            <p><a href="https://aben20807.github.io/posts/20220302-quantum-toffoli-gate-ccnot-decomposition/"><img src="https://images.unsplash.com/photo-1462331940025-496dfbfc7564?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2422&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20220302-quantum-toffoli-gate-ccnot-decomposition/">Visit website to read the full article</a></p>
          <p>在課堂 &ldquo;量子電腦程式設計&rdquo; 學到的推導過程。  主要是將一個 CCNOT 分解成使用 6 個 CNOT。</p>   <h1 id="前言">前言</h1> <p>算是很久沒上課了，而更久沒體會到數學推導的有趣。剛好本學期修到這堂課，老師半強迫要我們搞懂整個流程，意外找回國高中時寫數學的樂趣。在此附上我認為最詳盡易懂的推導過程。</p> <p>gif 來自 cduck/bloch_sphere，references 中有附上連結。  另外，公式繁多可能有錯，再麻煩指正。</p> <h1 id="先備知識">先備知識</h1> <p>Gate 只會介紹本篇用到的。</p> <h2 id="math">Math</h2> <ul> <li>複數 ($\mathbb{C}$ ): 實部 (real part) + 虛部 (imaginary part), e.g., $x + yi, i = \sqrt{-1}$.</li> <li>Euler&rsquo;s identity: $e^{i\pi} + 1 = 0$.  </li> </ul> <h2 id="quantum-bit-qubit">Quantum bit (Qubit)</h2> <ul> <li>Quantum state  <ul> <li>Classical state 0: $\lvert 0\rangle = {\small\begin{bmatrix}1 \\ 0\end{bmatrix}}$ (0 的機率為 100%)</li> <li>Classical state 1: $\lvert 1\rangle = {\small\begin{bmatrix}0 \\ 1\end{bmatrix}}$ (1 的機率為 100%)</li> <li>Arbitrary state: $\lvert\Phi \rangle= \alpha\lvert 0\rangle + \beta\lvert 1\rangle = {\small\begin{bmatrix}\alpha \\ \beta\end{bmatrix}}, \alpha, \beta\in\mathbb{C}$ <ul> <li>(0 的機率為 $\lvert \alpha\lvert^2$, 1 的機率為 $\lvert \beta\lvert^2$)</li> </ul> </li> </ul> </li> </ul> <h2 id="1-bit-gate">1-bit Gate</h2> <ul> <li>Hadamard gate: $H = \frac{1}{\sqrt{2}}{\small\begin{bmatrix}1 &amp; 1\\ 1 &amp; -1\end{bmatrix}}$ <ul> <li>最常用作將 classical state 轉為疊加態 (superposition)。E.g.,</li> <li>$H\lvert 0\rangle = \frac{1}{\sqrt{2}}{\small\begin{bmatrix}1 &amp; 1\\ 1 &amp; -1\end{bmatrix}}{\small\begin{bmatrix}1 \\ 0\end{bmatrix}} = \frac{1}{\sqrt{2}}{\small\begin{bmatrix}1 \\ 1\end{bmatrix}} = \frac{\lvert 0\rangle+\lvert 1\rangle}{\sqrt{2}}$</li> <li>$H\lvert 1\rangle = \frac{1}{\sqrt{2}}{\small\begin{bmatrix}1 &amp; 1\\ 1 &amp; -1\end{bmatrix}}{\small\begin{bmatrix}0 \\ 1\end{bmatrix}} = \frac{1}{\sqrt{2}}{\small\begin{bmatrix}1 \\ -1\end{bmatrix}} = \frac{\lvert 0\rangle-\lvert 1\rangle}{\sqrt{2}}$</li> <li>解釋: $\lvert 0\rangle, \lvert 1\rangle$ 經過 $H$ 後其 $0, 1$ 的機率皆各為 $\lvert \frac{1}{\pm\sqrt{2}}\lvert^2 = \frac{1}{2} = $ 50%</li> </ul> </li> </ul> <p>   <figure class="gphoto-media">     <img src="https://raw.githubusercontent.com/aben20807/bloch_sphere/master/examples/hh_gate.gif" alt="Z 軸與 X 軸交換" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Z 軸與 X 軸交換</center>     </figcaption>   </figure> </p> <ul> <li>Phase shift gate: $T = {\small\begin{bmatrix}1 &amp; 0\\0 &amp; e^{i\frac{\pi}{4}}\end{bmatrix}}$</li> </ul> <p>   <figure class="gphoto-media">     <img src="https://raw.githubusercontent.com/aben20807/bloch_sphere/master/examples/ststs_gate.gif" alt="$T$ 轉 $\frac{\pi}{4}$；$S$ 轉 $\frac{\pi}{2}$，不過後者在本篇不會使用到" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">$T$ 轉 $\frac{\pi}{4}$；$S$ 轉 $\frac{\pi}{2}$，不過後者在本篇不會使用到</center>     </figcaption>   </figure> </p> <ul> <li>$T$&rsquo;s conjugate transpose : $T^\dagger = {\small\begin{bmatrix}1 &amp; 0\\0 &amp; e^{-i\frac{\pi}{4}}\end{bmatrix}}$</li> </ul> <h2 id="2-bit-gate">2-bit Gate</h2> <ul> <li>Controlled NOT gate ($CNOT, CX, U_{CN}$): $U_{CN} ={\small\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0\\ 0 &amp; 0 &amp; 0 &amp; 1\\ 0 &amp; 0 &amp; 1 &amp; 0\end{bmatrix}}$ <ul> <li>control qubit ($\lvert C\rangle$) 為 1 時，target qubit ($\lvert T\rangle$) 會翻轉 (flip)。E.g.,</li> <li>$U_{CN}(\frac{\lvert 0\rangle+\lvert 1\rangle}{\sqrt{2}})\lvert 0\rangle = {\small\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0\\ 0 &amp; 0 &amp; 0 &amp; 1\\ 0 &amp; 0 &amp; 1 &amp; 0\end{bmatrix}} \frac{\lvert 00\rangle+\lvert 10\rangle}{\sqrt{2}} = {\small\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0\\ 0 &amp; 0 &amp; 0 &amp; 1\\ 0 &amp; 0 &amp; 1 &amp; 0\end{bmatrix}} \frac{1}{\sqrt{2}} {\small\begin{bmatrix}1\\0\\1\\0\end{bmatrix}} = \frac{1}{\sqrt{2}} {\small\begin{bmatrix}1\\0\\0\\1\end{bmatrix}} = \frac{\lvert 00\rangle+\lvert 11\rangle}{\sqrt{2}}$</li> <li>解釋: 用 control bit 經過 $H$ 後會有 50-50 的機率，target bit 輸入為 0。則在 control bit 為 1 時，target bit 會轉為 1。因此輸出僅有兩種可能: 00 或 11。</li> </ul> </li> </ul> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLV7c8ZHg0TZh0i7yFMz1EgAktYeO6iW22d53R47cDyiGwrG0XyUs0SrKqENSw5UlQt_Fvw1HBulxV5AxQTcPpLddQLFG784UHvn-Hx7DU_K8yqGUD5Q9U9JjbE44G2HAHpBR2tf_QWw0zZeh-TN1dnxYA=w422-h232-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h1 id="toffoli-gate-ccnot">Toffoli Gate (CCNOT)</h1> <p>顧名思義，有兩個 control bit，不過是兩個同時為 1 時才會影響 target bit。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLWN7STxJXBZjouz7ERqxJBegn9wendBx2BgUMt9o6fL-xTPRUGUZXhnbpV-7V7eOWj4RHZW2rZiICvfFPA576n29fpOGU5NTvWYgURwY5IVFAt2qIsiVHikDv7Vz-2KCq-R8laieVOM8LTlWjHwLjhSsA=w472-h252-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <p>不過它其實等價於下面的形式:</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUHKHYDE_SeNuNya8Pu1S9gh28MSlVVunxK6mYbhTsKQgKaK2p0sLmhGUTMnYH4Lw4nz3LJpjvnCOoWt8hiux9hsoHmQS50H8ODd4FHsIRlJlbHwdpxQ9aCuCsUIDOQC2GnPdYOH4kqYe8kllJ_dBRrcw=w1156-h262-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h1 id="推導過程">推導過程</h1> <p>這邊要先注意，輸入的兩個 control bit 有經過 $H$ 變成疊加態，也就是下圖。不同階段的狀態使用不同符號 ($\lvert\Phi_i\rangle, i = 1&hellip;16$) 以便對應。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLX4-2YX3so43rmOGPzHAGCXdjqjG6Zb5OPkPGRijQCv09nAq-rJMoezlZFq5Si_3ItjAUVkfjGjgE7Tkar7VwH5y1nyOvNpzk4vGJ8Nh7DiyP24r8aNuIGstBdgXALjNXj_HJv1xOy6EjYHQOV5GwKjPg=w1203-h372-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <p>$$ \def\TT{i\frac{\pi}{4}} \begin{equation*} \small \begin{split} \lvert\Phi_1\rangle =&amp; \frac{1}{\sqrt{2}}(\lvert 0\rangle+\lvert 1\rangle) \frac{1}{\sqrt{2}}(\lvert 0\rangle+\lvert 1\rangle) \lvert 0\rangle \\ =&amp; \frac{1}{2}(\lvert 000\rangle+\lvert 010\rangle+\lvert 100\rangle+\lvert 110\rangle) \newline \newline \lvert\Phi_2\rangle =&amp; \frac{1}{2} \Biggr(\lvert 00\rangle\frac{1}{\sqrt{2}}(\lvert 0\rangle+\lvert 1\rangle) \newline &amp;\quad+\lvert 01\rangle\frac{1}{\sqrt{2}}(\lvert 0\rangle+\lvert 1\rangle) \newline &amp;\quad+\lvert 10\rangle\frac{1}{\sqrt{2}}(\lvert 0\rangle+\lvert 1\rangle) \newline &amp;\quad+\lvert 11\rangle\frac{1}{\sqrt{2}}(\lvert 0\rangle+\lvert 1\rangle)\Biggr)\newline =&amp; \frac{1}{2\sqrt{2}}(\lvert 000\rangle+\lvert 001\rangle+\lvert 010\rangle+\lvert 011\rangle+\lvert 100\rangle+\lvert 101\rangle+\lvert 110\rangle+\lvert 111\rangle) \newline \newline \lvert\Phi_3\rangle =&amp; \frac{1}{2\sqrt{2}}(\lvert 000\rangle+\lvert 001\rangle+\lvert 011\rangle+\lvert 010\rangle+\lvert 100\rangle+\lvert 101\rangle+\lvert 111\rangle+\lvert 110\rangle) \newline \newline \lvert\Phi_4\rangle =&amp; \frac{1}{2\sqrt{2}}( \lvert 000\rangle+ e^{-\TT}\lvert 001\rangle+ e^{-\TT}\lvert 011\rangle+ \lvert 010\rangle+ \lvert 100\rangle+ e^{-\TT}\lvert 101\rangle+ e^{-\TT}\lvert 111\rangle+ \lvert 110\rangle) \newline \newline \lvert\Phi_5\rangle =&amp; \frac{1}{2\sqrt{2}}( \lvert 000\rangle+ e^{-\TT}\lvert 001\rangle+ e^{-\TT}\lvert 011\rangle+ \lvert 010\rangle+ \lvert 101\rangle+ e^{-\TT}\lvert 100\rangle+ e^{-\TT}\lvert 110\rangle+ \lvert 111\rangle) \newline \newline \lvert\Phi_6\rangle =&amp; \frac{1}{2\sqrt{2}}( \lvert 000\rangle+ e^{\TT}e^{-\TT}\lvert 001\rangle+ e^{\TT}e^{-\TT}\lvert 011\rangle+ \lvert 010\rangle\newline &amp;\qquad+ e^{\TT}\lvert 101\rangle+ e^{-\TT}\lvert 100\rangle+ e^{-\TT}\lvert 110\rangle+ e^{\TT}\lvert 111\rangle)\newline =&amp; \frac{1}{2\sqrt{2}}( \lvert 000\rangle+\lvert 001\rangle+ \lvert 011\rangle+\lvert 010\rangle+e^{\TT}\lvert 101\rangle+ e^{-\TT}\lvert 100\rangle+ e^{-\TT}\lvert 110\rangle+ e^{\TT}\lvert 111\rangle) \newline \newline \lvert\Phi_7\rangle =&amp; \frac{1}{2\sqrt{2}}( \lvert 000\rangle+\lvert 001\rangle+ \lvert 010\rangle+\lvert 011\rangle+e^{\TT}\lvert 101\rangle+ e^{-\TT}\lvert 100\rangle+ e^{-\TT}\lvert 111\rangle+ e^{\TT}\lvert 110\rangle) \newline \newline \lvert\Phi_8\rangle =&amp; \frac{1}{2\sqrt{2}}( \lvert 000\rangle+ e^{-\TT}\lvert 001\rangle+ \lvert 010\rangle+ e^{-\TT}\lvert 011\rangle+ \lvert 101\rangle+ e^{-\TT}\lvert 100\rangle+ e^{-2\TT}\lvert 111\rangle+ e^{\TT}\lvert 110\rangle) \newline \newline \lvert\Phi_{9}\rangle =&amp; \frac{1}{2\sqrt{2}}( \lvert 000\rangle+ e^{-\TT}\lvert 001\rangle+ \lvert 010\rangle+ e^{-\TT}\lvert 011\rangle+ \lvert 100\rangle+ e^{-\TT}\lvert 101\rangle+ e^{-2\TT}\lvert 110\rangle+ e^{\TT}\lvert 111\rangle) \newline \newline \lvert\Phi_{10}\rangle =&amp; \frac{1}{2\sqrt{2}}( \lvert 000\rangle+ \lvert 001\rangle+ \lvert 010\rangle+ \lvert 011\rangle+ \lvert 100\rangle+ \lvert 101\rangle+ e^{-2\TT}\lvert 110\rangle+ e^{2\TT}\lvert 111\rangle) \newline \newline \lvert\Phi_{11}\rangle =&amp; \frac{1}{2\sqrt{2}}( \lvert 000\rangle+ \lvert 001\rangle+ e^{\TT}\lvert 010\rangle+ e^{\TT}\lvert 011\rangle+ \lvert 100\rangle+ \lvert 101\rangle+ e^{-\TT}\lvert 110\rangle+ e^{3\TT}\lvert 111\rangle) \newline \newline \lvert\Phi_{12}\rangle =&amp; \frac{1}{2\sqrt{2}}\Biggr( \lvert 00\rangle \frac{1}{\sqrt{2}}(\lvert 0\rangle+\lvert 1\rangle) \newline &amp;\qquad+ \lvert 00\rangle \frac{1}{\sqrt{2}}(\lvert 0\rangle-\lvert 1\rangle)\newline &amp;\qquad+ \lvert 01\rangle \frac{1}{\sqrt{2}}(\lvert 0\rangle+\lvert 1\rangle)e^{\TT}\newline &amp;\qquad+ \lvert 01\rangle \frac{1}{\sqrt{2}}(\lvert 0\rangle-\lvert 1\rangle)e^{\TT}\newline &amp;\qquad+ \lvert 10\rangle \frac{1}{\sqrt{2}}(\lvert 0\rangle+\lvert 1\rangle)\newline &amp;\qquad+ \lvert 10\rangle \frac{1}{\sqrt{2}}(\lvert 0\rangle-\lvert 1\rangle)\newline &amp;\qquad+ \lvert 11\rangle \frac{1}{\sqrt{2}}(\lvert 0\rangle+\lvert 1\rangle)e^{-\TT}\newline &amp;\qquad+ \lvert 11\rangle \frac{1}{\sqrt{2}}(\lvert 0\rangle-\lvert 1\rangle)e^{3\TT}\Biggr)\newline =&amp; \frac{1}{2\sqrt{2}}( \frac{2}{\sqrt{2}}\lvert 000\rangle+ e^{\TT}\frac{2}{\sqrt{2}}\lvert 010\rangle+ \frac{2}{\sqrt{2}}\lvert 100\rangle+ e^{-\TT}\frac{2}{\sqrt{2}}\lvert 111\rangle )\newline =&amp; \frac{1}{2}(\lvert 000\rangle + e^{\TT}\lvert 010\rangle + \lvert 100\rangle + e^{-\TT}\lvert 111\rangle) \newline \newline \lvert\Phi_{13}\rangle =&amp; \frac{1}{2}(\lvert 000\rangle + e^{\TT}\lvert 010\rangle + \lvert 110\rangle + e^{-\TT}\lvert 101\rangle) \newline \newline \lvert\Phi_{14}\rangle =&amp; \frac{1}{2}(\lvert 000\rangle + \lvert 010\rangle + e^{-\TT}\lvert 110\rangle + e^{-\TT}\lvert 101\rangle) \newline \newline \lvert\Phi_{15}\rangle =&amp; \frac{1}{2}(\lvert 000\rangle + \lvert 010\rangle + \lvert 110\rangle + \lvert 101\rangle) \newline \newline \lvert\Phi_{16}\rangle =&amp; \frac{1}{2}(\lvert 000\rangle + \lvert 010\rangle + \lvert 100\rangle + \lvert 111\rangle) \end{split} \end{equation*} $$</p> <h1 id="解釋">解釋</h1> <p>最終結果推出這樣的輸入下 (前兩位元疊加態，第三位元 0) 只有四種輸出可能 (000, 010, 100, 111) 各佔 25%，前三種因為前兩位元不全為 1 所以第三位元維持 0。第四種因為前兩位元皆為 1，第三位元因此翻轉成 1。</p> <h1 id="補充說明">補充說明</h1> <p>其中我認為最精采的是 $\lvert\Phi_{12}\rangle$，在這步驟中，原先 8 個狀態透過 $H$ 作用後可以抵消掉 4 個狀態。比較需要注意的是 $e^{-\TT} = -1 \cdot e^{3\TT}$ 因此會消掉 $\lvert 11\rangle\lvert 0\rangle$ 這項。</p> <h1 id="references">References</h1> <ul> <li><a href="https://en.wikipedia.org/wiki/Quantum_logic_gate">Quantum logic gate - wiki</a></li> <li><a href="https://github.com/cduck/bloch_sphere">Qubit Bloch Sphere Visualization: cduck/bloch_sphere - github</a></li> </ul> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Complex_number">complex number - wiki</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Euler%27s_identity">Euler&rsquo;s identity - wiki</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Quantum_state">Quantum state - wiki</a>&#160; </p> </li> <li id="fn:4" role="doc-endnote"> <p><a href="https://zh.wikipedia.org/zh-tw/%E5%85%B1%E8%BB%9B%E8%BD%89%E7%BD%AE">共軛轉置 - wiki</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Vscode Latex Workshop Pdf Viewer Auto Refresh</title><link>https://aben20807.github.io/posts/20220123-vscode-latex-workshop-pdf-viewer-auto-refresh/</link><pubDate>Sun, 23 Jan 2022 11:20:21 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20220123-vscode-latex-workshop-pdf-viewer-auto-refresh/</guid><description><![CDATA[
          <p>每次要重開 pdf viewer 很麻煩，而且最近突然無法在編譯好 pdf 後自動更新 viewer 了，很惱人。找了方法來解決，雖然不夠完美，不過很夠用了。</p>
          
            <p><a href="https://aben20807.github.io/posts/20220123-vscode-latex-workshop-pdf-viewer-auto-refresh/"><img src="https://images.unsplash.com/photo-1638164570687-28edd5f0a124?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1374&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20220123-vscode-latex-workshop-pdf-viewer-auto-refresh/">Visit website to read the full article</a></p>
          <p>每次要重開 pdf viewer 很麻煩，而且最近突然無法在編譯好 pdf 後自動更新 viewer 了，很惱人。找了方法來解決，雖然不夠完美，不過很夠用了。</p> <p>Related post: <a href="https://aben20807.github.io/posts/20210811-use-vscode-to-write-latex-paper/">[Use VSCode to Write LaTeX Paper]</a></p> <h1 id="environment">Environment</h1> <ul> <li>Win10</li> <li>VSCode Version: 1.63.2</li> <li>Latex Workshop: v8.23.0</li> <li>Trigger Task on Save: v0.2.17</li> </ul> <h1 id="steps">Steps</h1> <ol> <li> <p>Install <a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.triggertaskonsave">Trigger Task on Save</a> (ID: gruntfuggly.triggertaskonsave)</p> </li> <li> <p><code>settings.json</code> (global):</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{     <span style="color:#75715e">// your other settings... </span><span style="color:#75715e"></span>    <span style="color:#f92672">&#34;latex-workshop.latex.autoBuild.run&#34;</span>: <span style="color:#e6db74">&#34;onSave&#34;</span>,     <span style="color:#f92672">&#34;latex-workshop.view.pdf.viewer&#34;</span>: <span style="color:#e6db74">&#34;tab&#34;</span>,     <span style="color:#f92672">&#34;triggerTaskOnSave.tasks&#34;</span>: {         <span style="color:#f92672">&#34;update pdf&#34;</span>: [             <span style="color:#e6db74">&#34;*.tex&#34;</span>         ]     }, } </code></pre></div></div></li> <li> <p><code>.vscode/tasks.json</code> (local):</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{     <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;2.0.0&#34;</span>,     <span style="color:#f92672">&#34;tasks&#34;</span>: [         {             <span style="color:#f92672">&#34;label&#34;</span>: <span style="color:#e6db74">&#34;build&#34;</span>,             <span style="color:#f92672">&#34;command&#34;</span>: <span style="color:#e6db74">&#34;${command:latex-workshop.build}&#34;</span>,             <span style="color:#f92672">&#34;problemMatcher&#34;</span>: [],         },         {             <span style="color:#f92672">&#34;label&#34;</span>: <span style="color:#e6db74">&#34;update pdf&#34;</span>,             <span style="color:#f92672">&#34;command&#34;</span>: <span style="color:#e6db74">&#34;${command:latex-workshop.refresh-viewer}&#34;</span>,             <span style="color:#f92672">&#34;dependsOn&#34;</span>:[<span style="color:#e6db74">&#34;build&#34;</span>],             <span style="color:#f92672">&#34;problemMatcher&#34;</span>: [],             <span style="color:#f92672">&#34;group&#34;</span>: {                 <span style="color:#f92672">&#34;kind&#34;</span>: <span style="color:#e6db74">&#34;build&#34;</span>,                 <span style="color:#f92672">&#34;isDefault&#34;</span>: <span style="color:#66d9ef">true</span>             }         }     ] } </code></pre></div></div></li> </ol> <h1 id="說明">說明</h1> <p>會需要 Trigger Task on Save 是因為要在儲存 *.tex 的檔案時觸發 &ldquo;update pdf&rdquo; 的 task，由於 &ldquo;update pdf&rdquo; 依賴 (dependsOn) &ldquo;build&rdquo;，所以會先執行 &ldquo;build&rdquo; 的 task，結束後呼叫 refresh-viewer。</p> <h1 id="不完美之處">不完美之處</h1> <p>可以看到整個流程會呼叫兩次 build (一次是 onSave、一次是 triggerTaskOnSave)，取消其中一者會導致 pdf viewer 在 pdf 還沒編譯好時就更新。兩個都存在就會等第一次編譯好才更新 (真是奇怪的 bug)，因此缺點就是會編譯兩次，不過第二次因為是重複所以速度很快幾乎不影響使用。</p> <h1 id="references">References</h1> <ul> <li><a href="https://www.reddit.com/r/vscode/comments/dhsff9/comment/f8fmdhj/?utm_source=share&amp;utm_medium=web2x&amp;context=3">Auto-update pdf-viewer - reddit</a></li> <li><a href="https://code.visualstudio.com/docs/editor/tasks">Integrate with External Tools via Tasks - vscode</a></li> </ul>
        ]]></description></item><item><title>本週回顧</title><link>https://aben20807.github.io/posts/20220115-weekly-review/</link><pubDate>Sat, 15 Jan 2022 12:04:49 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20220115-weekly-review/</guid><description><![CDATA[
          <p>沒有要固定更新，不過分享一下。</p>
          
            <p><a href="https://aben20807.github.io/posts/20220115-weekly-review/"><img src="https://images.unsplash.com/photo-1639977299489-a3d5a8f78811?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1374&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20220115-weekly-review/">Visit website to read the full article</a></p>
          <p>沒有要固定更新，不過分享一下。</p>   <h1 id="機車漏油">機車漏油</h1> <p>原本星期三預計要跟女友去看奈良美智特展  ，結果出發前發現機車發不動，然後有很重的汽油味，才看到地板已經一堆油，好險沒燒起來。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVXRncFYR27ZhH-JmvDJItbkexsy3cd2FosFso81s8Hjr6BWjMOrqzABmpwRYVRA-ujzz6gJHvPZq7hpz9e6pIDie_lZssKWGgjWsZOFo4rIZf-Il_HIjq1koM_z1dVx1ZIEZYoc_thnvLzFr2zeVwiIw=w1692-h1268-no" alt="漏油" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">漏油</center>     </figcaption>   </figure> </p> <p>記得上次一樣跟女友去漁光島的時候就有聞到，以為只是一般廢氣。所以只好先放棄 (之後再預約)，然後我就找了附近評價最好的機車行，直接把車牽過去。老闆人蠻好的，又修得算快，說之後有問題可以叫他過去不用自己牽過來，在此推薦。</p> <ul> <li>駿陞機車行:     </li> </ul> <h1 id="重訓肌肉拉傷">重訓肌肉拉傷</h1> <p>女友之前抽到動滋券 ，結果這次似乎只能用在健身房或是去看球賽，剛好附近健身房有優惠用動滋券體驗一個月，我有時候會陪她去，結果這禮拜去練二頭肌後疼痛感蠻明顯，感覺是拉傷。幸好沒有到很嚴重，休息幾天後有逐漸恢復。</p> <h1 id="放棄-evernote">放棄 Evernote</h1> <p>Evernote 突然說網頁版的也算是一個裝置，而又只限定兩個裝置，所以感覺不夠用了。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLV5EoUg9_j5f9U7mhWHfeFug8mZQTQ6MCuObaJVUJy8KqcNkXSIjNUxwx3MF1Ar3MkjamrwyCIC13uUQXQ9CDQdbsRWhQpCIQVG0WSjTZJBzXEWyTkwUgwqDUAKUfehtCCWEK9rqeHIYRY83tjPKBCagA=w994-h746-no" alt="撤銷裝置" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">撤銷裝置</center>     </figcaption>   </figure> </p> <p>我就直接把所有筆記移植到 Notion (我用 enex2notion  ，不過上傳蠻花時間)，過程中才發現我的筆記太雜亂，分類又直接用記事本。總之目前轉用 Notion，教育版還可以免費使用 pro 的功能。我之前多少有用過 Notion，不過當時的效能不太好，現在使用感覺進步許多。</p> <h1 id="新玩具">新玩具</h1> <p>新手機沒有 3.5mm 耳機孔了，剛好被打廣告，所以就腦波弱下單，品質不錯 (應該是我耳機太爛聽不出差異)。另外不知道為何 S21U 預設會把高音調弱，進到 Adapt Sound 裡面測試一下耳朵狀態後才能全開。</p> <p>這樣我的 LG V30+ 連當隨身聽的機會都沒有了，算是真的退休了。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVp8y_S4KSi2nWJ11u9V_-Uhxp_aqNH9cGEqXsoylkQ5Live_hbpq7uOaWH14FZCyLCxrNAgxI-jG8T0zk2OBsNX0n_WX2wWV0aP_PDNb-3HzLLsOEQLpz-89_BSppon7H7pucofsRYo7U9h5D1pGvLvg=w1692-h1268-no" alt="BGVP T01s" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">BGVP T01s</center>     </figcaption>   </figure> </p> <h1 id="實驗室尾牙火鍋">實驗室尾牙火鍋</h1> <p>結果沒有開瓶器，後來把螺絲釘鎖進去後靠剪刀把軟木塞取出。</p> <blockquote> <p>酒後不開車，安全有保障。</p> </blockquote> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLXw18ZuSfFzLaOsBzMMoLZhsW-3uo5Ky17tXpM_HWZRyKLZpciZlvKPEzoIt83BLLby6pXb2lv8eCtfIPtOq4yAmD8WDXYW6Ilx8jEG2OcjLHCwoP3Di_kyNygdDsp7Phk9RH-qMknK6uoiljZMvR3q-w=w1692-h1268-no" alt="用螺絲釘開紅酒" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">用螺絲釘開紅酒</center>     </figcaption>   </figure> </p> <h1 id="網站更新">網站更新</h1> <ul> <li>Add footnote tooltip popup bubble (不用再移到下方看 footnote 了)   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUJV1Q7aqI_GNiL8wsHQTekjz6A_BDWydsh9cETtlyogcNSMviTfJo03hyY23JOAogkIlJMMyp7BZGNlL5zPC9M_yC-VfKTdzzjxOAaa4uIvNyuEkJFl_BVyYn89MYA53-4sk7qjsEu5o1c5DALYSrx8g=w373-h121-no" alt="footnote tooltip" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">footnote tooltip</center>     </figcaption>   </figure> </li> <li>Reduce the size of the image from unsplash on homepage</li> <li>Improve media print</li> </ul> <h1 id="結語">結語</h1> <p>我比較懶惰，目前還沒有打算定時更新，請見諒。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVbwAyRINy95lOA0baTwPlePUx0Z8wE3arMsvOr9lpB4H3xrumk95bqkDxbtQjayRiHcnywbzoWSMgCc2YUYpXDDUVPj_VT3F4m56eTSnyqUPcVZhHYuruEXKP2R-WhJ1fdB3U_9Tw72Uj_6iFErocqeg=w1692-h1268-no" alt="用實驗室老鼠結束這回合" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">用實驗室老鼠結束這回合</center>     </figcaption>   </figure> </p> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://www.tnam.museum/exhibition/detail/278">奈良美智特展YOSHITOMO NARA - 臺南市美術館</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://hpm.5000.gov.tw/cp.aspx?n=207">動滋券 - 行政院振興五倍券</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://github.com/vzhd1701/enex2notion">vzhd1701/enex2notion</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>cmake + gdb 簡易流程</title><link>https://aben20807.github.io/posts/20211208-cmake-gdb/</link><pubDate>Wed, 08 Dec 2021 16:33:26 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20211208-cmake-gdb/</guid><description><![CDATA[
          
          
            <p><a href="https://aben20807.github.io/posts/20211208-cmake-gdb/"><img src="https://images.unsplash.com/photo-1582845512747-e42001c95638?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2070&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20211208-cmake-gdb/">Visit website to read the full article</a></p>
            <h1 id="前言">前言</h1> <p>使用教材: <a href="https://github.com/aben20807/learn_cmake">aben20807/learn_cmake</a></p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git clone https://github.com/aben20807/learn_cmake.git $ cd learn_cmake </code></pre></div></div><h1 id="基本編譯及執行">基本編譯及執行</h1> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mkdir build $ cd build $ cmake .. $ make $ ./bin/exec hello <span style="color:#ae81ff">3</span> </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ls bin/  CMakeFiles/  extern/  lib/  src/  cmake_install.cmake  CMakeCache.txt  Makefile </code></pre></div></div><h1 id="改用-ninja-來取代-make-可跳過">改用 ninja 來取代 make [可跳過]</h1> <p><a href="https://ninja-build.org/">Ninja</a>，跟 make 相同地位，但號稱是更快速的建置系統，主要可以善用平行化編譯，且沒有 make 那樣的歷史包袱導致過於複雜，ninja 生來就是用來被產生，沒錯，cmake 也可以產生 ninja 使用的編譯腳本。目前相當多大型專案 (Google Chrome, parts of Android, LLVM) 都仰賴 ninja。</p> <p>因為用不同工具編譯的指令不同 make 用 <code>make</code>， ninja 用 <code>ninja</code>，所以 cmake 有一個指令 (<code>$ cmake --build .</code>) 是可以依照當初產生的來自動呼叫對應的指令，後面章節會用到。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo apt install ninja-build </code></pre></div></div><p>刪除使用 make 的版本並指定使用 ninja</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cd .. $ rm -r build $ mkdir build $ cd build $ cmake -G Ninja .. $ ninja $ ./bin/exec hello <span style="color:#ae81ff">3</span> </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ls bin/  CMakeFiles/  extern/  lib/  src/  build.ninja  cmake_install.cmake  CMakeCache.txt  rules.ninja </code></pre></div></div><h1 id="使用-gdb">使用 gdb</h1> <p>建議可以先參考舊文 <a href="https://aben20807.blogspot.com/2018/06/1070618-gdb-gdb-dashboard.html">107.06.18 好看的 gdb, gdb-dashboard</a> 來提升 gdb 的顏值 (x</p> <p>使用 gdb 主要原因就是因為程式只有印出 Segmentation fault 然後就沒有其他了，不會通靈的話基本上無法解決。不過本篇使用的是最簡單的例子，一般會更複雜，不過使用 gdb 還是比通靈實在多了。</p> <p>為了演示，我將 <code>../src/main.cpp</code> 改為下面內容，當前目錄都在 <code>learn_cmake/build/</code> 中:</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;say_hello_util/hello.hpp&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sum_header/sum.hpp&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e"></span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Foo</span> {     <span style="color:#66d9ef">int</span> x; }; <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {     hh<span style="color:#f92672">::</span>hello();     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> ss<span style="color:#f92672">::</span>sum(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;     Foo<span style="color:#f92672">*</span> ptr <span style="color:#f92672">=</span> (Foo<span style="color:#f92672">*</span>)malloc(<span style="color:#66d9ef">sizeof</span>(Foo));     ptr<span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">=</span> <span style="color:#ae81ff">42</span>;     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> ptr<span style="color:#f92672">-&gt;</span>x;     free(ptr);     ptr <span style="color:#f92672">=</span> NULL;     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> ptr<span style="color:#f92672">-&gt;</span>x; } </code></pre></div></div><h2 id="使用流程">使用流程:</h2> <ol> <li>發現問題</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cmake --build . <span style="color:#75715e"># 呼叫 make 或 ninja</span> $ ./bin/exec hello <span style="color:#ae81ff">3</span> Segmentation fault </code></pre></div></div><ol start="2"> <li>利用 cmake 產生 debug 專用的編譯指令，讓額外的程式碼資訊一起編譯到執行檔中 (稍後可以試試不經過這一步會如何，需要先 <code>$ rm CMakeCache.txt</code>)，此步驟在 ninja 或 make 都可以適用。</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cmake -G Ninja -DCMAKE_BUILD_TYPE<span style="color:#f92672">=</span>Debug .. $ cmake --build . </code></pre></div></div><ol start="3"> <li>使用 gdb 開啟並執行編譯好的檔案</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ gdb -q -ex run --args ./bin/exec </code></pre></div></div><p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLWzgME7xChueCMU3Du2i7Rbwpf7NkaItrB81ASPPNCKofxcG3b6Z7KSkXvjpEZW-J_2JOr4R4ifWxuMIoFaWdHLElryG6pdftZmFlYXaDvnMWUU6dkxM7jauDN2rK2MIN8brp5V24JqpoNZ_naFX35KOg=w959-h516-no" alt="顯示出錯位置，第 19 行 ptr 已經不可用" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">顯示出錯位置，第 19 行 ptr 已經不可用</center>     </figcaption>   </figure> </p> <h1 id="參考資料">參考資料</h1> <ul> <li><a href="https://ithelp.ithome.com.tw/articles/10221101">Day 11: 中場休息 CMake 教學 - renewang</a></li> <li><a href="https://stackoverflow.com/questions/7724569/debug-vs-release-in-cmake/7725055#7725055">Debug vs Release in CMake</a></li> <li><a href="https://ithelp.ithome.com.tw/articles/10241563">拯救資工系學生的基本素養—使用 GDB 除錯基本教學 - 微中子</a></li> </ul>
        ]]></description></item><item><title>安裝 Ubuntu 後必做的事</title><link>https://aben20807.github.io/posts/20211208-must-do-after-installing-ubuntu/</link><pubDate>Wed, 08 Dec 2021 11:39:07 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20211208-must-do-after-installing-ubuntu/</guid><description><![CDATA[
          <p>大幅提高方便性</p>
          
            <p><a href="https://aben20807.github.io/posts/20211208-must-do-after-installing-ubuntu/"><img src="https://images.unsplash.com/photo-1638874992371-55c089919a2d?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1974&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20211208-must-do-after-installing-ubuntu/">Visit website to read the full article</a></p>
          <p>大幅提高方便性</p>   <h1 id="前言">前言</h1> <p>本篇不包含如何安裝作業系統，而是在作業系統 (不限於直接安裝，大部分在虛擬機、WSL2 也適用) 上調整設定或安裝一些工具</p> <h1 id="inputrc">inputrc</h1>   <p>[如果稍後會安裝 oh-my-bash 可以跳過]</p> <p>在 home 下編輯 <code>vim ~/.inputrc</code>，內容如下，儲存後關閉重開終端機，就可以實現打前幾個字按&quot;上&quot;然後搜尋歷史紀錄了。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#e6db74">&#34;\e[A&#34;</span>: history-search-backward <span style="color:#e6db74">&#34;\e[B&#34;</span>: history-search-forward </code></pre></div></div><p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLWN4ATYRzzDi5CeNZORHf-lg_CvoTXD8j-xeBkRUBpb3hiwrQssYIFZcZhAcwwXiXI1S4vMLzEyFCPN4PsqEP19NXX5Nhidyoyakp9BMtMgJP3yZNUVVHnwiu-_oeXpeZfvtetLI9ogCwPYgCb6JBb9wA=w600-h338-no" alt="使用前" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">使用前</center>     </figcaption>   </figure>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLXdjWL35yAlAOv87Lmc-C1ZZHx_nOCSDyvk0a59wfAa2BTexFNKZiMjfGrX-bRERbenem4CsOT7-er0uUCKID4KbNcCOWVBXBzPPspjeRzRc_C5gj4gTc-frKTT1RIZK7M9MCRoYrk2kn-b_lKTjb6ynw=w600-h338-no" alt="使用後" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">使用後</center>     </figcaption>   </figure> </p> <p>進階參考: <a href="https://www.topbug.net/blog/2017/07/31/inputrc-for-humans/">A ~/.inputrc for Humans</a></p> <h1 id="oh-my-bash">oh-my-bash</h1>   <p>先前我有試用過 Fish shell  ，真的蠻人性化的，不過因為後來大部分要跑實驗，主流還是使用 bash，fish 也無法支援部分 bash 的功能，因此就放棄使用了。也因此就研究 bash 相關的內容，也沒有機會使用 Zsh  。</p> <p><a href="https://github.com/ohmybash/oh-my-bash">ohmybash/oh-my-bash</a> 提供了許多功能，雖然無法到達 fish 那樣提供視覺化的指令補全  ，不過跟原生的 bash 比較還是方便許多。</p> <ul> <li>oh-my-bash 安裝方式: <a href="https://github.com/ohmybash/oh-my-bash#basic-installation">https://github.com/ohmybash/oh-my-bash#basic-installation</a></li> </ul> <p>我也有設計一個主題，不過沒有 PR，所以要使用的話在安裝完 oh-my-bash 後再透過下面連結提供的指令安裝:</p> <ul> <li>oh-my-ouo 主題安裝方式: <a href="https://github.com/aben20807/oh-my-ouo#install">https://github.com/aben20807/oh-my-ouo#install</a></li> </ul> <h2 id="方便的功能">方便的功能</h2> <ol> <li><code>mcd</code> 可以取代 <code>mkdir</code> + <code>cd</code></li> <li>git 會顯示修改狀態</li> <li>bashmarks (<code>bm</code>) 可以提供書籤功能，快速到達指定資料夾</li> <li>virtualenv 會標註目前在虛擬 python 環境 (ouo 主題)</li> <li>不需要修改 <code>~/.inputrc</code> 就可以搜尋歷史紀錄</li> </ol> <h1 id="file-manager-nautilus-copy-file-path">file manager (nautilus) copy file path</h1>   <p>[WSL2 不適用]</p> <p>有時候透過 GUI 找檔案時要複製它的路徑，這個套件就有點類似 VSCode 的功能，讓檔案管理員也可以直接複製檔案路徑。</p> <ul> <li>安裝步驟: <a href="https://github.com/chr314/nautilus-copy-path#manual-installation">https://github.com/chr314/nautilus-copy-path#manual-installation</a></li> </ul> <p>   <figure class="gphoto-media">     <img src="https://raw.githubusercontent.com/chr314/nautilus-copy-path/master/screenshot.png" alt="效果，圖片來源: chr314/nautilus-copy-path" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">效果，圖片來源: chr314/nautilus-copy-path</center>     </figcaption>   </figure> </p> <h1 id="ag---silver-searcher">Ag - silver searcher</h1>   <p>搜尋文字檔案內容用，在找程式碼時下頗方便的。有時候在 GitHub 網頁內的搜尋結果找不到的用 ag 就對了。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVA4aVBfYPy0w7cWmFGLsqf3HZ0NPTrfys01Gb50uV1_Bww1PAZKqNUPpDubcBstAHK2Xl5kDZTp-qSnlvo3b7SoOtYK5g6tiCj0p7ncpcMer9-XHzW2qpW023SYlB6zKTK8-tI2ESJk1OV5ISiuZw7lw=w959-h723-no" alt="找出有 &ldquo;hugo &ldquo;，內容及在哪個檔案裡" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">找出有 &ldquo;hugo &ldquo;，內容及在哪個檔案裡</center>     </figcaption>   </figure> </p> <h1 id="rust-相關工具">Rust 相關工具</h1> <p>Rust 最近越來越穩定，也有許多工具都用 Rust 重寫且使用起來更為友善，不過要使用這些工具前要先安裝 Rust。</p> <ul> <li>Rust 環境安裝方式: <a href="https://www.rust-lang.org/tools/install">https://www.rust-lang.org/tools/install</a></li> <li>另外要將下方內容放到 <code>~/.bashrc</code> 中</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Rust</span> export RUST_HOME<span style="color:#f92672">=</span>$HOME/.cargo/ export PATH<span style="color:#f92672">=</span>$PATH:$RUST_HOME/bin </code></pre></div></div><h2 id="exahttpsgithubcomoghamexa-取代-ls"><a href="https://github.com/ogham/exa">exa</a> 取代 ls</h2>   <p>因為我們已經有 Rust 環境了，所以可以使用 <code>$ cargo install exa</code> 安裝。</p> <p><code>~/.bashrc</code> 中可以加入以下來取代 <code>ls</code></p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">alias ls<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;exa -F --group-directories-first&#39;</span> alias ll<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;exa -alF&#39;</span> alias lls<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;exa --sort=size -l&#39;</span> </code></pre></div></div><h2 id="bathttpsgithubcomsharkdpbat-取代-cat"><a href="https://github.com/sharkdp/bat">bat</a> 取代 cat</h2> <p>安裝:</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cargo install --locked bat </code></pre></div></div><p>alias:</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">alias cat<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;bat&#39;</span> </code></pre></div></div><h2 id="dusthttpsgithubcombootandydust-取代-du"><a href="https://github.com/bootandy/dust">dust</a> 取代 du</h2> <p>安裝:</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cargo install du-dust </code></pre></div></div><p>alias:</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">alias disk<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;dust&#39;</span> </code></pre></div></div><section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://fishshell.com/">https://fishshell.com/</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://zsh.sourceforge.io/">https://zsh.sourceforge.io/</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://fishshell.com/assets/img/screenshots/autosuggestion.png">https://fishshell.com/assets/img/screenshots/autosuggestion.png</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Human Resource Machine</title><link>https://aben20807.github.io/posts/20211205-human-resource-machine/</link><pubDate>Sun, 05 Dec 2021 14:23:22 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20211205-human-resource-machine/</guid><description><![CDATA[
          <p>[非業配] 最近 (12/7 前) <a href="https://store.steampowered.com/app/375820/Human_Resource_Machine/">steam</a> 特價中 (Human Resource Machine + 7 Billion Humans 兩款合併只需要 NT$114)。</p>
          
            <p><a href="https://aben20807.github.io/posts/20211205-human-resource-machine/"><img src="https://lh3.googleusercontent.com/pw/AM-JKLUSQMHkdrqkmpz22I1d7bvqY7gsEaAYNSqTJ485lm2TW5ft5Eh4PgLjzmFhCtA2rD6suoGuXZAypqMoPUEUCJHvHrp_WCuB-CavFNEcDfMZmiZ9c9QqWy-wRudcNDkk_uCbz7Kpm9JIi2-CY08Pb8_Ugw=w1737-h1337-no" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20211205-human-resource-machine/">Visit website to read the full article</a></p>
          <p>[非業配] 最近 (12/7 前) <a href="https://store.steampowered.com/app/375820/Human_Resource_Machine/">steam</a> 特價中 (Human Resource Machine + 7 Billion Humans 兩款合併只需要 NT$114)。</p>   <p>如果是寫程式寫到走火入魔，連玩遊戲也要找一款可以鍛鍊邏輯的，那我推薦這款 <a href="https://store.steampowered.com/app/375820/Human_Resource_Machine/">Human Resource Machine</a>。遊戲做畫蠻精緻的，也有大量跟程式相關的內容。另外此遊戲有續作 <a href="https://store.steampowered.com/app/792100/7_Billion_Humans/">7 Billion Humans</a>，同樣也是相關的內容。我玩前幾關發現前者是低階 (low-level) 指令，遊戲過程像是用 instructions  、assembly code   去解決問題，例如費波那契數列  、排序  ；後者有出現 if-else 等高階語言特性，可能會比較像 Scratch   或是 MIT App Inventor   那樣拉方塊寫程式的感覺。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUSQMHkdrqkmpz22I1d7bvqY7gsEaAYNSqTJ485lm2TW5ft5Eh4PgLjzmFhCtA2rD6suoGuXZAypqMoPUEUCJHvHrp_WCuB-CavFNEcDfMZmiZ9c9QqWy-wRudcNDkk_uCbz7Kpm9JIi2-CY08Pb8_Ugw=w1737-h1337-no" alt="Human Resource Machine 真實遊戲畫面" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Human Resource Machine 真實遊戲畫面</center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUB52uq9J-F1T9pIypzlABm0adH8l2GlMoXo5UYRZwIcxN7ZScCIv_L1I170cngeM8-QHgC2YOp1jn-aGkp6zDPh5gaslk59E58SFIXNE8M1VruOk22tBECKcST4bMwnkMyUAGBoHiwUFsoOGuCr-3R7g=w2560-h1440-no" alt="7 Billion Humans 真實遊戲畫面" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">7 Billion Humans 真實遊戲畫面</center>     </figcaption>   </figure> </p> <p>判定方式除了是否解決問題外還有針對指令數量以及執行速度當作可以最佳化的面向。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVYEQctI5PEqAfa_n6y0kgIHndEyhXGLvjqFrLv2jCt9panxRbicj1ciZhjtJTBN9jX_A0V7Rn1OtNJuAvFK4uWCByl_0bvfyQKF7KjnYQ2cyKICopWnXdWqexJ2FJI88Fg5uKUDozI8Gl04k7HGbRAUQ=w1737-h1337-no" alt="Human Resource Machine 真實遊戲畫面" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Human Resource Machine 真實遊戲畫面</center>     </figcaption>   </figure> </p> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Machine_code">https://en.wikipedia.org/wiki/Machine_code</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Assembly_language">https://en.wikipedia.org/wiki/Assembly_language</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Fibonacci_number">https://en.wikipedia.org/wiki/Fibonacci_number</a>&#160; </p> </li> <li id="fn:4" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Sorting_algorithm">https://en.wikipedia.org/wiki/Sorting_algorithm</a>&#160; </p> </li> <li id="fn:5" role="doc-endnote"> <p><a href="https://scratch.mit.edu/">https://scratch.mit.edu/</a>&#160; </p> </li> <li id="fn:6" role="doc-endnote"> <p><a href="https://appinventor.mit.edu/">https://appinventor.mit.edu/</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Find and Count Words Using Vim</title><link>https://aben20807.github.io/posts/20211204-find-and-count-words-using-vim/</link><pubDate>Sat, 04 Dec 2021 16:54:07 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20211204-find-and-count-words-using-vim/</guid><description><![CDATA[
            <p>用 vim 計算出現次數</p>
          
            <p><a href="https://aben20807.github.io/posts/20211204-find-and-count-words-using-vim/"><img src="https://images.unsplash.com/photo-1586769852836-bc069f19e1b6?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2670&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20211204-find-and-count-words-using-vim/">Visit website to read the full article</a></p>
            <p>用 vim 計算出現次數</p> <p>因為我預設的搜尋是大小寫無關 (Case insensitive, 可自行用 <code>:echo &amp;ignorecase</code> 確認)，因此搜尋有時候會包含非目標的字，若要區分大小寫可以使用下方的指令。把 <code>target word</code> 換成你想找的字或句子即可。</p> <p>Command 模式下執行：</p> <ul> <li>Case insensitive:</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim">:%<span style="color:#a6e22e">s</span><span style="color:#e6db74">/target word/</span>/<span style="color:#a6e22e">ng</span><span style="color:#960050;background-color:#1e0010"> </span></code></pre></div></div><ul> <li>Case sensitive:</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim">:%<span style="color:#a6e22e">s</span><span style="color:#e6db74">/target word/</span>/<span style="color:#a6e22e">ngI</span><span style="color:#960050;background-color:#1e0010"> </span></code></pre></div></div><p>執行完會顯示類似 <code>4 matches on 4 lines</code> 來呈現搜尋結果。</p>
        ]]></description></item><item><title>大 大 大更新</title><link>https://aben20807.github.io/posts/20211203-huge-update-on-this-website/</link><pubDate>Fri, 03 Dec 2021 09:50:48 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20211203-huge-update-on-this-website/</guid><description><![CDATA[
            <p>本網站最近的更新項目</p>
          
            <p><a href="https://aben20807.github.io/posts/20211203-huge-update-on-this-website/"><img src="https://images.unsplash.com/photo-1588671789988-d0c186cb9e84?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=3774&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20211203-huge-update-on-this-website/">Visit website to read the full article</a></p>
            <p>本網站最近的更新項目</p> <h1 id="前言">前言</h1> <p>最近做了許多大更新，果然還是有一個自己的主題 (theme) 比較自由，但是缺點就是會一直改來改去，似乎沒有盡頭。</p> <p><del>哎呀，昨天 20211202 沒發到文。</del></p> <p>寫完發現太長了，所以右邊有開啟 toc。</p> <h1 id="auto-deploy-from-the-private-repo">Auto deploy from the private repo</h1> <h2 id="private-repo">Private repo</h2> <p>本網站已經從原先開源發文內容的方式改為把該 repo 設定為私人，主要原因是為了防止別人輕易拿到原始內容進而能夠輕鬆盜取。先前我也已經檢舉了一堆內容農場，雖然防不勝防，不過我看到有些討論是建議把原始內容隱藏起來。再來私人模式下我也比較能夠控制一些內容何時可以公開發佈，這大概可以適用在鐵人賽預先囤文 (雖然我還不知道會不會參加)。原先舊的因為星星數頗多，所以維持公開並改為純記錄 issue (發文靈感)。</p> <h2 id="github-action">GitHub Action</h2> <p>此外，為了發文方便性，佈署方式已經從原先在本地端編譯好網站再推上去改為利用 GitHub Action。也就是我只要將內容更新推上 private repo，則 GitHub 那邊會自動幫忙編譯及推到<a href="https://github.com/aben20807/aben20807.github.io">目標 repo</a>。因此整理一下，為了這個網站我現在有4個 repo：</p> <ul> <li><a href="https://github.com/aben20807/hugOuO">aben20807/hugOuO</a>：主題</li> <li><a href="https://github.com/aben20807/blog-post">aben20807/blog-post (private)</a>：發文內容</li> <li><a href="https://github.com/aben20807/blog-post-issues">aben20807/blog-post-issues</a>：記錄靈感，<del>收集星星</del></li> <li><a href="https://github.com/aben20807/aben20807.github.io">aben20807/aben20807.github.io</a>：渲染成此網站的目標 repo</li> </ul> <p>為了使用 GitHub Action 完成自動佈署，我用了以下工具：</p> <ul> <li><a href="https://github.com/peaceiris/actions-hugo">peaceiris/actions-hugo</a>：用於使用 hugo 編譯網站</li> <li><a href="https://github.com/cpina/github-action-push-to-another-repository">cpina/github-action-push-to-another-repository-directory</a>：因為我的內容跟渲染 repo 分離，所以需要這個工具推到另外一個 repo，需要按照教學申請 <code>API_TOKEN_GITHUB</code></li> <li><a href="https://github.com/nektos/act">nektos/act</a>：用於本地端測試 yaml 可不可以動</li> </ul> <p>另外有一些小技巧會用到：</p> <ul> <li><code>set-output</code>: <a href="https://stackoverflow.com/a/65616499">https://stackoverflow.com/a/65616499</a></li> <li>Multiple lines for git message in yaml: <a href="https://stackoverflow.com/a/5064653">https://stackoverflow.com/a/5064653</a></li> </ul>   <details>   <summary><span>完整 <code>blog-post/.github/workflows/deploy.yml</code> 內容 </span></summary>   <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span> <span style="color:#f92672">on</span>:   <span style="color:#f92672">push</span>:     <span style="color:#f92672">branches</span>:       - <span style="color:#ae81ff">master</span> <span style="color:#f92672">jobs</span>:   <span style="color:#f92672">deploy</span>:     <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-18.04</span>     <span style="color:#f92672">concurrency</span>:       <span style="color:#f92672">group</span>: <span style="color:#ae81ff">${{ github.workflow }}-${{ github.ref }}</span>     <span style="color:#f92672">steps</span>:       - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Dump GitHub context</span>         <span style="color:#f92672">env</span>:           <span style="color:#f92672">GITHUB_CONTEXT</span>: <span style="color:#ae81ff">${{ toJson(github) }}</span>         <span style="color:#f92672">run</span>: <span style="color:#ae81ff">echo &#34;$GITHUB_CONTEXT&#34;</span>       - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>         <span style="color:#f92672">with</span>:           <span style="color:#f92672">submodules</span>: <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># Fetch Hugo themes (true OR recursive)</span>           <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">0</span>    <span style="color:#75715e"># Fetch all history for .GitInfo and .Lastmod</span>       - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Hugo</span>         <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-hugo@v2</span>         <span style="color:#f92672">with</span>:           <span style="color:#f92672">hugo-version</span>: <span style="color:#e6db74">&#39;0.89.4&#39;</span>           <span style="color:#f92672">extended</span>: <span style="color:#66d9ef">true</span>       - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>         <span style="color:#f92672">run</span>: <span style="color:#ae81ff">hugo --gc --minify --cleanDestinationDir</span>       - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Copy README.md</span>         <span style="color:#f92672">run</span>: <span style="color:#ae81ff">cp README_web.md public/README.md</span>       - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Retrieve commit message</span>         <span style="color:#f92672">run</span>: <span style="color:#ae81ff">|</span> <span style="color:#75715e"># https://trstringer.com/github-actions-multiline-strings/</span>           <span style="color:#ae81ff">CMT_MSG_STR=$(cat &lt;&lt; EOF</span>           <span style="color:#ae81ff">Deploy site `date &#39;+%Y-%m-%d %H:%M:%S&#39;`</span>           <span style="color:#ae81ff">by `hugo version`</span>           <span style="color:#ae81ff">from ORIGIN_COMMIT</span>           <span style="color:#ae81ff">EOF</span>           <span style="color:#ae81ff">)</span>           <span style="color:#ae81ff">CMT_MSG_STR=&#34;${CMT_MSG_STR//$&#39;\n&#39;/&#39;%0A&#39;}&#34;</span>           <span style="color:#ae81ff">echo &#34;::set-output name=CMT_MSG::$CMT_MSG_STR&#34;</span>         <span style="color:#f92672">id</span>: <span style="color:#ae81ff">message</span>       - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>         <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">cpina/github-action-push-to-another-repository@main</span>         <span style="color:#f92672">env</span>:           <span style="color:#f92672">API_TOKEN_GITHUB</span>: <span style="color:#ae81ff">${{ secrets.API_TOKEN_GITHUB }}</span>         <span style="color:#f92672">with</span>:           <span style="color:#f92672">source-directory</span>: <span style="color:#e6db74">&#39;public&#39;</span>           <span style="color:#f92672">destination-github-username</span>: <span style="color:#e6db74">&#39;aben20807&#39;</span>           <span style="color:#f92672">destination-repository-name</span>: <span style="color:#e6db74">&#39;aben20807.github.io&#39;</span>           <span style="color:#f92672">commit-message</span>: <span style="color:#ae81ff">${{ steps.message.outputs.CMT_MSG }}</span>           <span style="color:#f92672">user-email</span>: <span style="color:#ae81ff">aben20807@gmail.com</span>           <span style="color:#f92672">target-branch</span>: <span style="color:#ae81ff">master</span> </code></pre></div></div> </details> <h1 id="dark-mode">Dark mode</h1> <p>最近流行深色模式，主要可能是因為 OLED 螢幕比較省電，另外是可以減低藍光對眼睛的傷害。原先我打算跳槽到其他炫炮主題 (e.g., <a href="https://github.com/dillonzq/LoveIt">LoveIt</a>)，不過後來查到深色模式可能沒有很複雜，所以就自己用了。我直接從 <a href="https://yonkov.github.io/post/add-dark-mode-toggle-to-hugo/">SWITCHING OFF THE LIGHTS PART TWO - ADDING DARK MODE TO HUGO</a> 複製過來，比較麻煩的是 CSS 的控制。因為我原先都是手動硬改，所以這裡也需要比較多功 (細節可以去<a href="https://github.com/aben20807/hugOuO/blob/75d26d4f0eae8e796d0c781b3fd6cbd9641149fc/static/css/hugouo.css#L545-L622">主題 repo</a> 看)。不過算是有完成，最右上角有一個切換的按鈕，也是因為這次機會我才知道原來有 <code>localStorage</code> 可以用。</p> <h1 id="go-top-button">Go top button</h1> <p>捲動一段距離後，右下角會出現一個前往最上面的按鈕。我的舊網站其實有這個功能，不過一直沒有移植過來，所以就趁這個更新的機會順便。這樣之後手機版就不用再手動滑到最上面。</p> <h1 id="prevnext-post">Prev/Next post</h1> <p>偶然發現有這個技巧，所以順便&hellip;，我是從 <a href="https://brianli.com/adding-next-previous-post-links-in-hugo/">Adding Next and Previous Post Links in Hugo</a> 直接複製，然後加上一些 CSS 的 class 以便符合主題。因此回覆的上面就會有上、下一篇的連結。</p> <h1 id="series">Series</h1> <p>後來發現還是需要有一個分類來管理系列文章，這跟原先的分類、標籤不同，主要針對同一高度相關的議題 (會標記 ep 幾)。例如：<a href="https://aben20807.github.io/series/build-a-simple-compiler/">Build a simple compiler</a>。</p> <h1 id="license-section">License section</h1> <p>發現還不錯的設計：<a href="https://jdhao.github.io/2021/11/28/how_i_write_blog/">jdhao&rsquo;s blog</a>，不過我是自己找如何讓分號對齊：<a href="https://stackoverflow.com/a/9891619">How to align about the colon in each line of text like movie credits often do</a></p> <p>   <figure class="gphoto-media">     <img src="https://user-images.githubusercontent.com/14831545/143805190-77ad75c9-f91c-40cd-b220-587446c9cee2.png" alt="成果" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">成果</center>     </figcaption>   </figure> </p> <h1 id="與網站無關">與網站無關</h1> <h2 id="new-phone">New phone</h2> <p>本人換新手機了，雖然已經過一個多月，不過還是無法適應這個重量，可能是原先 LG V30+ 實在是太輕。這3年的區間感覺最大升級是相機的軟體部份。螢幕雖然有 120Hz 但是實在是太耗電所以我預設是關閉。螢幕下指紋比起實體辨識還是有準確率問題。內建喇叭有立體感我蠻喜歡的。</p> <p>   <figure class="gphoto-media">     <img src="https://images.unsplash.com/photo-1637924681501-458bb899b071?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=3774&amp;q=80" alt="S21U 拍攝滿月" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">S21U 拍攝滿月</center>     </figcaption>   </figure> </p> <h2 id="instagram">Instagram</h2> <p>已斷捨離，聯絡請用 messenger，近況更新暫用 FB 或本網站，如果是最近拍了什麼可以去我的 <a href="https://unsplash.com/@aben20807">unsplash</a>。</p> <h1 id="最後來一段-ouo">最後來一段 OuO</h1> <p>雖然我沒玩，也沒業配&hellip;</p>  
        ]]></description></item><item><title>Ubuntu 中文輸入法 Hime</title><link>https://aben20807.github.io/posts/20211018-ubuntu-chinese-input-hime/</link><pubDate>Mon, 18 Oct 2021 09:28:11 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20211018-ubuntu-chinese-input-hime/</guid><description><![CDATA[
            <p>更新一下設定部分</p>
          
            <p><a href="https://aben20807.github.io/posts/20211018-ubuntu-chinese-input-hime/"><img src="https://images.unsplash.com/photo-1524668951403-d44b28200ce0?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1374&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20211018-ubuntu-chinese-input-hime/">Visit website to read the full article</a></p>
            <p>更新一下設定部分</p> <blockquote> <p>輸入法編輯器（英語：input method editor，縮寫為IME），是指鍵盤擊鍵或滑鼠移動翻譯成字符來輸入的作業系統組件。 &ndash; <a href="https://zh.wikipedia.org/wiki/%E8%BE%93%E5%85%A5%E6%B3%95">wiki</a></p> </blockquote> <p>舊文: <a href="https://aben20807.blogspot.com/2015/10/1041008-kali-linux20_8.html">https://aben20807.blogspot.com/2015/10/1041008-kali-linux20_8.html</a></p> <h1 id="安裝">安裝</h1> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo apt install hime </code></pre></div></div><h1 id="設定系統預設輸入法">設定系統預設輸入法</h1> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ im-config </code></pre></div></div>  <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUbOang03O8QLfNgCt31S1uKjZAMzZVEsBZM_oLGP8AaOp_A1uIFTM4mLf3_zBCgi7P536M6mot8rC11ELl27ZXPIplKNTyLvmE8iM8DwejJppStaBawybZFzg2pvaKowYVTmeWGX5xeJThZL_vJQsJGg=w600-h430-no" alt="Step 1" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Step 1</center>     </figcaption>   </figure>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLW71pHLSR-juKxKpiKl71wc1Twd0hAh7BDLLkY5_R2p5Z6ckd_n6DdnXXTUHwUX_iwjHmpKfVogN3hERJbqYG8DU2bvWY2YualojziwUMk5sePNVnmz9SprmCPcv1rglo-60TcI1MCH6rFxVoqbIYBaXw=w683-h430-no" alt="Step 2" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Step 2</center>     </figcaption>   </figure>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLWDFFlbFkxs4pIvIuMFOiXQVwnz6sDFWR9OMvaVQf5uu0XLsLntDtm6D6ZcNscv9qGJ3AO9SirvZ7QNYUWnpaGGp3b623GQBuSexsZvFuahTce7inE1w7Pl6ZIazEacK20I_a9eBSSQFKHseh0_qPnqbQ=w635-h435-no" alt="Step 3" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Step 3</center>     </figcaption>   </figure> </details> <h1 id="輸入法設定">輸入法設定</h1> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUSWO732Q9q6vSsG9Lm9V3XJHIYbLTls36rcHG9vNaLty9LRYOtG4tEDbO7-0zulzbuUnxIR7H6eJl8cUhOcIi6lMEtQ2JOxQFeV8Yo2JWklozOVJWTY_LZz5OHhcULsLvwk1M-bmwFw_20B8rWvi_Vpw=w124-h134-no" alt="點擊圖示" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">點擊圖示</center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUt_uTDW10lidV_mFZNoSTne7Qi8PlBQ7bg2Vw27vO150iQc9RoBF1No-194kN37mRlDeKCaJ4GFPmXkoJnM2TS7uTkhkltHFdJ1vV60rTEQFHv8DnmU5yBTkDmpcMklEevPc65cAJQQORfyxFnLBu20g=w1178-h1135-no" alt="分頁 1" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">分頁 1</center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVKtjanJ9oPB1XNoLpuGb0mw1Dx5mXJhJRdCOaPK69GG-Hj3hmHQLzNGzvSIu8mzuGeYYt9_na2GZbjtKW40S8_k46WzuA2riE3EwwDQ1vvxoLhjpIMYRbC4dau9kmD1ZoPaoGpjiHXO59pIfRbPWm79A=w1176-h1134-no" alt="分頁 2" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">分頁 2</center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLWFCgJUi1ONy8R7c8zXUKKk7UfrTdfgJylwTmPD_aSa4caaIuL1RkA17BW-TGyoGOIjS31YEQRR3i_CtOsRAmUQUQ1yDslFNaWrTkWNgaa_tD5B-dBd9y0fgD-Hu4jTLRaZyfq66skqCa-d6-4VrmaGCQ=w1179-h1133-no" alt="分頁 3" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">分頁 3</center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLW6pS9SMeM6Y36SAJTF2emFj0nQyGNF5Wy2yu0fAaN2W0DzHIVIzRB0hq24bWDq0grqYV9MiSyrCpS5lLJPa5mAkIxZDuA59R5cDtvAK3vWhLX0jwVPoyaaMa0l8DmUzJPrES0yuV6auSvpe4f6E0Xicw=w1176-h1135-no" alt="分頁 4" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">分頁 4</center>     </figcaption>   </figure> </p>
        ]]></description></item><item><title>Ubuntu Multiple Audio Devices</title><link>https://aben20807.github.io/posts/20210814-ubuntu-multiple-audio-devices/</link><pubDate>Sat, 14 Aug 2021 15:08:12 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210814-ubuntu-multiple-audio-devices/</guid><description><![CDATA[
            <p>聲音同時輸出多個裝置 (藍芽、喇叭、螢幕)</p>
          
            <p><a href="https://aben20807.github.io/posts/20210814-ubuntu-multiple-audio-devices/"><img src="https://images.unsplash.com/photo-1535406208535-1429839cfd13?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1655&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20210814-ubuntu-multiple-audio-devices/">Visit website to read the full article</a></p>
            <p>聲音同時輸出多個裝置 (藍芽、喇叭、螢幕)</p> <h1 id="前言">前言</h1> <p>假日用電腦看電影，找不到 win10 可以設定同時多個音訊輸出 (網路提供的都不能用)。所以就看看 Ubuntu 可不可以，結果只需要安裝 paprefs 這個套件就好，也太簡單了吧 👍</p> <h1 id="使用-paprefs">使用 paprefs</h1> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo apt install paprefs <span style="color:#75715e"># 安裝</span> $ paprefs <span style="color:#75715e"># 開啟設定視窗</span> </code></pre></div></div><p>選擇 Simultaneous Output 頁面，並勾選如下圖</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLV-ZBr1zarhENeHCexK-1txjCCnWoW16_nWJrJxFUCq3g4aSuAbNjyNa4BvtgbsqvITH4FkCYHadg9nm0ctVw6xdijpSHL363TYp3GC5_QU4pQ0N9DRa_XLsDsLp2REkckaXh1IApGrL0fFKSO8kBKZyg=w757-h339-no" alt="virtual output device" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">virtual output device</center>     </figcaption>   </figure> </p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ pulseaudio -k <span style="color:#75715e"># 重新整理音訊卡</span> </code></pre></div></div><p>接著就會出現一個新的輸出卡如下圖，選擇這個就會在所有裝置輸出聲音了，個別聲音的音量在個別去設定，或是關閉螢幕聲音即可。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVmz3mgDsg5iz7CVmmL2qDpR_QwR4u6u2nRCP-X4GVkBesON9AFMESBPVEapnZ4n3hGTjyKWOSrvy6IVlgzfCoAxi2r3cZsqLnR9rEerj5OzLZfV1xnYSdSP0cE9CHGxbbJNQx3tdujqm498DmMDlp9zg=w1291-h713-no" alt="音效輸出卡" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">音效輸出卡</center>     </figcaption>   </figure> </p> <h1 id="回復">回復</h1> <p>取消勾選後執行 <code>pulseaudio -k</code> 即可。</p> <h1 id="結語">結語</h1> <blockquote> <p>大哥沒有輸 QuQ</p> </blockquote> <h1 id="references">References</h1> <ul> <li><a href="https://askubuntu.com/a/78179">Play sound through two or more outputs/devices</a></li> </ul>
        ]]></description></item><item><title>Use Matplotlib to Plot Academic Figures</title><link>https://aben20807.github.io/posts/20210812-use-matplotlib-to-plot-academic-figures/</link><pubDate>Thu, 12 Aug 2021 13:18:37 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210812-use-matplotlib-to-plot-academic-figures/</guid><description><![CDATA[
            <p>輕鬆畫出有學術質感的圖表</p>
          
            <p><a href="https://aben20807.github.io/posts/20210812-use-matplotlib-to-plot-academic-figures/"><img src="https://lh3.googleusercontent.com/pw/AM-JKLWQU7NG5P2FICQUsbsbsSnd4OvpK-J5gAkHa9oU5S-lsJ7sKXktgA6WWqHpPY90VfQLGi9XvBid3PoGZ6kM0Bfdu8Q9V8E4H_mG3flfFYzpYX2xUKvOgck0jmvXV8Thaoq7sNv4pY3K2PCWUlrF-Ft2ow=w1891-h1112-no" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20210812-use-matplotlib-to-plot-academic-figures/">Visit website to read the full article</a></p>
            <p>輕鬆畫出有學術質感的圖表</p> <h1 id="前言">前言</h1> <p>本篇示範一個用 matplotlib 畫一個基本的折線圖，在 ubuntu 跟 windows 10 都有試過，不過本篇以 windows 10 的指令為主。</p> <p>雖然有想過寫成一個工具，使用者只要提供資料，就可以自動畫出圖。不過後來發現這個想法是不實際，因為每張圖幾乎都需要客製化，所以就改成提供一個模板，要做任何調整會比較方便。</p> <h1 id="安裝套件">安裝套件</h1> <h2 id="python39">Python3.9</h2> <p>Windows 直接到官網下載即可，Ubuntu 需要使用 PPA 。</p>   <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLXjOlfhfiQNgWI02_rZb4Wb574Fu4Wur9o6OKhoyNMjexMuCOxm0CCZcVHN_2J3unY1gLHsXw-brNYZcu-_ZTs391zX9dh568EJUTUZevMF626zka1_CuOirPByW0xVteY8pA5Wj3hcah8FtnX_cDPFsQ=w1705-h1291-no" alt="windows python3.9" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">windows python3.9</center>     </figcaption>   </figure> </details> <h3 id="安裝-virtualenv-並進入虛擬環境">安裝 virtualenv 並進入虛擬環境</h3> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">&gt; pip install virtualenv </code></pre></div></div><p>要進入虛擬環境時需要執行 active 的腳本，在 Ubuntu 就很方便執行 <code>$ source venv/bin/activate</code>，但是 powershell 有權限問題，所以要先設定 。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">&gt; mkdir matplotlib_test &gt; cd matplotlib_test &gt; virtualenv --python python3.9 venv &gt; Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope <span style="color:#66d9ef">Process</span> -Force &gt; .\venv\Scripts\activate.ps1 (venv)&gt; pip list </code></pre></div></div><p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLV60iyL8ezSo7VKOvo5mleP9Ur5NEK2nNV2ABbdR9zMWJZGaaqMQYJLTaQNxPHcPQ56avYFMRh1-cZFBRqFOPDMJbhZ_lMI_UL4ZdddicANA6fAitgOUyzkxRt7ncqv9vVcZuKrkQuuXns2epiRY7NDvw=w624-h148-no" alt="pip list of a clear venv" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">pip list of a clear venv</center>     </figcaption>   </figure> </p> <h3 id="matplotlib-and-scienceplots">Matplotlib and SciencePlots</h3> <p>圖表樣式主要靠 SciencePlots  來完成，所以我們只要專注使用 Matplotlib 來製作圖表即可。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">(venv)&gt; pip install matplotlib==3.4.2 (venv)&gt; pip install SciencePlots==1.0.8 (venv)&gt; pip list <span style="color:#75715e"># 詳細版本資訊參考用</span> Package         Version --------------- ------- cycler          0.10.0 kiwisolver      1.3.1 matplotlib      3.4.2 numpy           1.21.1 Pillow          8.3.1 pip             21.2.3 pyparsing       2.4.7 python-dateutil 2.8.2 SciencePlots    1.0.8 setuptools      57.4.0 six             1.16.0 wheel           0.37.0 </code></pre></div></div><h1 id="畫圖技巧">畫圖技巧</h1> <p>強烈建議先去看一下這篇 <a href="https://zhuanlan.zhihu.com/p/93423829">matplotlib：先搞明白plt. /ax./ fig再画</a>。我原先用 matplotlib 也是亂用，看過之後了解大概的區塊是哪個模組在控制。</p> <p>下圖的各個部位的名稱可以大概記一下，這樣在搜尋時會比較方便。主要中心思想就是關於實際畫圖的都使用 <code>ax</code>，只有在建立跟輸出時才用 <code>plt</code>。下方會有範例。   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLV39YBiIYsdoJnTbBEfB23amAIXrpG65S-cq4ozucbJ13wlQNkKfsV7w0pWLeCnIDAYgVkj6tTpEv1tIPdm_v5S2Vv8n_Uvw1102twnZMG9OZhC2yxgNj6-c-hFpnRggyEL4nNPjpwzf5-fUcWH0ZUHBg=w385-h401-no" alt="Parts of a Figure" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Parts of a Figure</center>     </figcaption>   </figure>   </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLX_WJxX_h8KTZjCPicenrC56Y2v4B4Trd6ft1DHJDG_YxycOsar94WCx073O9GWS7wSZZKH0QSSEQrWRAosK3zz16F73MvbT3J0O6ERQB0U2dCbhSis7RlQdWDSG95_TQmYua9DBi3kdTFpw4DmqwtHSA=s800-no" alt="components of a Matplotlib figure" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">components of a Matplotlib figure</center>     </figcaption>   </figure>   </p> <h1 id="實際範例">實際範例</h1> <ul> <li><code>data.csv</code>:</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">n,A,B,C,D 10,1,2,1,6 100,3,3,6,6 1000,2,9,1,6 10000,3,7,7,6 100000,3,10,8,6 1000000,16,19,2,6 10000000,125,86,41,6 </code></pre></div></div><ul> <li><code>plot.py</code>:</li> </ul> <div style="border: 1px solid #888888;"></div><ul> <li>程式碼解釋 <ul> <li>[10], [11] 會有兩個 name 主要是因為讀取時的欄位名稱不能有特殊符號，所以在繪製時才綁定顯示名稱 [31]</li> <li>[12] 某些資料要跳過但是檔案裡還是會有</li> <li>[13] 哪些需要標出資料標籤的數值</li> <li>[14] 哪些資料點需要特別用圓點標記</li> <li>[37] <code>f&quot;{y:.1f}&quot;</code> 可設定資料標籤輸出格式，例如: 取到小數點第一位。<code>x-0.0*x, y-0.2*y</code> 後方有減去一個位移是用來避免線段與資料標籤重疊</li> <li>[46] 一般論文中的圖表標題是用 Latex 語法 (caption) 來定義，所以生成時不需要，不過若是要拿來做簡報的話有標題會比較好。</li> <li>[48] ~ [56] 設定 x、y 軸資訊</li> <li>[61] 存成 pdf</li> </ul> </li> <li>成果   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLXIabK6jEA9LyeJs0waYEXbROoY0OIfFGN8i2JckUubn_eMd6YrGWZsLjEnhiH0_oym_7TYHVlbima_KBLsDxEQhmB_tYKyDcAI0pPFcQkJKsxVrcHxbMcuxaARAGxk9kaNiI3HA_nRXbia5RuxmjnJLQ=w1738-h1301-no" alt="折線圖" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">折線圖</center>     </figcaption>   </figure> </li> </ul> <p>[2021.08.13] 修正 linestyle</p> <h1 id="其他">其他</h1> <p>用 Matplotlib 在一個 Figure 中塞入多個 Axes 是可以的，不過我目前遇到的都是用 Latex 的 minipage 來完成，這樣就可以有各自的 label 可以分開 ref。如下，不過這就有點離題了。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-latex" data-lang="latex"><span style="color:#66d9ef">\begin</span>{table}[tbh!]   <span style="color:#66d9ef">\centering</span>   <span style="color:#66d9ef">\begin</span>{minipage}[t]{.47<span style="color:#66d9ef">\linewidth</span>}     <span style="color:#66d9ef">\includegraphics</span><span style="color:#a6e22e">[width=\linewidth]</span>{figures/A.pdf}     <span style="color:#66d9ef">\captionof</span>{figure}{AAA}     <span style="color:#66d9ef">\label</span>{fig:A}   <span style="color:#66d9ef">\end</span>{minipage}   <span style="color:#66d9ef">\qquad</span>   <span style="color:#66d9ef">\begin</span>{minipage}[t]{.47<span style="color:#66d9ef">\linewidth</span>}     <span style="color:#66d9ef">\includegraphics</span><span style="color:#a6e22e">[width=\linewidth]</span>{figures/B.pdf}     <span style="color:#66d9ef">\captionof</span>{figure}{BBB}     <span style="color:#66d9ef">\label</span>{fig:B}   <span style="color:#66d9ef">\end</span>{minipage} <span style="color:#66d9ef">\end</span>{table} </code></pre></div></div><h1 id="錯誤排除">錯誤排除</h1> <h2 id="filenotfounderror-missing-font-metrics-file-rsfs10"><code>FileNotFoundError: missing font metrics file: rsfs10</code></h2> <p>Solution  </p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">&gt; miktex-maketfm.exe rsfs10 </code></pre></div></div><h2 id="permissionerror-errno-13-permission-denied-resultpdf"><code>PermissionError: [Errno 13] Permission denied: 'result.pdf'</code></h2> <p>輸出覆寫 pdf 時有視窗開著該檔案，把 result.pdf 關掉即可。</p> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://tecadmin.net/how-to-install-python-3-9-on-ubuntu-18-04/">https://tecadmin.net/how-to-install-python-3-9-on-ubuntu-18-04/</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://stackoverflow.com/a/59815372">virtualenv in PowerShell?</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://github.com/garrettj403/SciencePlots">https://github.com/garrettj403/SciencePlots</a>&#160; </p> </li> <li id="fn:4" role="doc-endnote"> <p><a href="https://matplotlib.org/1.5.1/faq/usage_faq.html#parts-of-a-figure">https://matplotlib.org/1.5.1/faq/usage_faq.html#parts-of-a-figure</a>&#160; </p> </li> <li id="fn:5" role="doc-endnote"> <p><a href="https://matplotlib.org/stable/tutorials/introductory/usage.html#parts-of-a-figure">https://matplotlib.org/stable/tutorials/introductory/usage.html#parts-of-a-figure</a>&#160; </p> </li> <li id="fn:6" role="doc-endnote"> <p><a href="https://stackoverflow.com/a/65965075">https://stackoverflow.com/a/65965075</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Use VSCode to Write LaTeX Paper</title><link>https://aben20807.github.io/posts/20210811-use-vscode-to-write-latex-paper/</link><pubDate>Wed, 11 Aug 2021 13:50:05 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210811-use-vscode-to-write-latex-paper/</guid><description><![CDATA[
            <p>記錄一下如何用 VSCode 寫 paper</p>
          
            <p><a href="https://aben20807.github.io/posts/20210811-use-vscode-to-write-latex-paper/"><img src="https://images.unsplash.com/photo-1532153975070-2e9ab71f1b14?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1650&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20210811-use-vscode-to-write-latex-paper/">Visit website to read the full article</a></p>
            <p>記錄一下如何用 VSCode 寫 paper</p> <h1 id="前言">前言</h1> <p>為了測完整的安裝流程，我用 virtualbox 裝了一個乾淨的 windows 10。記錄到可以編譯 latex 的最簡化流程就好，所以本篇的終端機使用的是 powershell 而不是 WSL。在 Ubuntu 理論上也可以套用這個方法，不過安裝的套件就不同，例如: MikTex 就要換成 Tex Live  。</p> <p>本篇範例使用 ACM 釋出的模板  ，因此 IEEE 或是學校畢業論文的模板可能會有所不同。</p> <p>因為圖太多了，所以使用 &ldquo;示意圖&rdquo; 按鈕來隱藏圖片，想參考時打開即可。</p> <h2 id="latex-cheat-sheet">LaTeX Cheat sheet</h2> <ul> <li><a href="https://www.andy-roberts.net/writing/latex/formatting">Getting to Grips with LaTeX</a></li> <li><a href="https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols">List of LaTeX mathematical symbols</a></li> <li><a href="https://www.tablesgenerator.com/latex_tables#">Latex Tables Generator</a></li> </ul> <h1 id="安裝套件">安裝套件</h1> <p>安裝順序應該沒關係，本篇測試順序是 VSCode → MikTex → Perl。</p> <h2 id="perl">Perl</h2> <p>這裡直接安裝推薦的版本: <a href="https://strawberryperl.com/">Strawberry Perl</a>，選 64-bit 版本。</p>   <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLXs_PdqsqpM2mkMvhICdIe37zPtDQsvKfVtuWNfwjcUk2SnzbBnOkSrtPApkKZjIJonrr2POWGVmwTJLCj-BbRQA5z_ZakRrts1mL_9yUm4woKKtn6sO9ivljF58cjZaaZEaOmZ8-lhTREJW6uBRxV4BQ=w1600-h1200-no" alt="Strawberry Perl" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Strawberry Perl</center>     </figcaption>   </figure> </details> <h2 id="miktex">MikTex</h2> <p>這個是 Latex 編譯器包，安裝網址: <a href="https://miktex.org/download">https://miktex.org/download</a>。</p> <p>安裝完後會跳出提醒來安裝所有更新。</p>   <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUyFhHoqLOl0ud9GfH2YxuUAQGRPdyNVWIaO4NB9AhaxmKnLUdBhxyiW7750RNHiqIlYTj1IUAzfDFqPOy_XDyvvF3Lb4XW8hv5JOo2tm4L-UI6Q0tvlyaUe_G_SIobWkL8FLf_VFUHu70ZCP1kQE8aBQ=w1600-h1200-no" alt="安裝所有更新" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">安裝所有更新</center>     </figcaption>   </figure> </details> <p>打開 powershell 輸入 <code>latexmk.exe</code> 確認安裝正確。可能會先跳出一個視窗要安裝新套件，點選 install 即可。</p>   <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLV2gfq28ff0fnfv74PB_m6DHG-hl9a4wgEfxOdrQ2idrQoNu52LWlBXMjtmngSETOVxsKiHrFO4YI0npZ5UMw_FRvyMkzYdd3AIIa3oBGazrXP1hJqwL2PYAGh4tOV9SS-iUhMq5zZZu-N8ofNGYn0W6w=w1600-h1200-no" alt="powershell" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">powershell</center>     </figcaption>   </figure> </details> <h2 id="vscode">VSCode</h2> <p>建議安裝時打開 &ldquo;以 Code 開啟&rdquo; 的功能。</p>   <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLXlBw7vOU2XUjDrJR7KfMSu416nevszajoo2n9NAHIKO58wgb7xrkPdbewM3lvoXGzCZTZXAx7cGxIdlEDYWqXAv4TcdkvhjOCFKXt-aA8jpgvXWcovW56py_GJD2jvhNkNCV4KcZEAJxBOeRPdmdwmqg=w1600-h1200-no" alt="以 Code 開啟" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">以 Code 開啟</center>     </figcaption>   </figure> </details> <h3 id="外掛">外掛</h3> <p>理論上必要的只有 latex-workshop，其他的選用。</p> <ul> <li>james-yu.latex-workshop</li> <li>mhutchie.git-graph</li> <li>coenraads.bracket-pair-colorizer</li> <li>valentjn.vscode-ltex: 英文文法檢查，需要安裝 Java</li> <li>vscode-icons-team.vscode-icons</li> </ul>   <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLUhazz8sW9uiCIu6fkCbTaBQXRJu2-a2Il_r6qWN_EjoWCqvqxHrP-DY_e7JQ8GITghx60BCYwzQ5eamEfv2ni1zbVps5rT2CV_y9CkRgEAuPwJCrZFv4j9g0VC7PO3IiAmeCo-gQyuNX04jEhRX76kIg=w1600-h1200-no" alt="vscode 外掛" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">vscode 外掛</center>     </figcaption>   </figure> </details> <h3 id="針對-latex-文字顯示設定">針對 latex 文字顯示設定</h3> <p>使用 <code>Ctrl-Shift-P</code>，輸入 setting，打開 json 檔。可加入如下設定，這樣只會針對 latex 設定，而不會影響程式編輯。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{     <span style="color:#f92672">&#34;[latex]&#34;</span>: {         <span style="color:#f92672">&#34;editor.fontSize&#34;</span>: <span style="color:#ae81ff">18</span>,         <span style="color:#f92672">&#34;editor.fontFamily&#34;</span>: <span style="color:#e6db74">&#34;&#39;Georgia&#39;&#34;</span>,         <span style="color:#f92672">&#34;editor.lineNumbers&#34;</span>: <span style="color:#e6db74">&#34;on&#34;</span>,         <span style="color:#f92672">&#34;editor.wordWrap&#34;</span>: <span style="color:#e6db74">&#34;bounded&#34;</span>,         <span style="color:#f92672">&#34;editor.letterSpacing&#34;</span>: <span style="color:#ae81ff">0.1</span>,         <span style="color:#f92672">&#34;editor.lineHeight&#34;</span>: <span style="color:#ae81ff">38</span>,         <span style="color:#f92672">&#34;editor.formatOnSave&#34;</span>: <span style="color:#66d9ef">false</span>,     }, } </code></pre></div></div>  <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVyoAzzgE5xs4JLPpuXtcx8_CPKlIfKZmtu-an-S94W5TUdBtUJ_A904RSGZEK0G4JZMC9gD4C9GOO4tiZnXs-lU3qfuwiAcE303UhtyN7cunSkswmlUwiPsSLkrvnt1DribaWwWPFAFX_U-kP-I1sy8Q=w1600-h1200-no" alt="setting.json" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">setting.json</center>     </figcaption>   </figure>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLV1YqPWPVOaUPtlh4ZeC4j4SrbcJKeRRDDVnk9MT4627oJVYfFIxPVpmICFv8-EQg1lyCv76dN0cIA8HtSdbmyp6rgTQ6ESejTwpxXoiJSnY9oUqo0mwo43U-dS6U_quVyzinCgdVcj7yY7suNaXAL5HA=w1600-h1200-no" alt="latex setting" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">latex setting</center>     </figcaption>   </figure> </details> <h1 id="範例">範例</h1> <p>這裡直接使用 git 來拉範例 (使用 ACM 模板)，因此會需要用到 git，可直接安裝 <a href="https://gitforwindows.org/">git for windows</a>，或直接上 github 下載也可以。</p>   <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVzP-_HMuTJhu1eGgAI1OJVBik9t1idYqKj9GdBjiBIuRgPaVohradkWO3RzPDmIpTVodYZ6_S2T9OJ64XYorCieaPqS3DCEmfw6LZkEPBEEbLyD3KRIWd_qeQmLjVYkMVCcbTqZakB5v29B8qR3ZMaCQ=w1600-h1200-no" alt="git for windows" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">git for windows</center>     </figcaption>   </figure> </details> <p>直接在 powershell 執行下面指令 (前方 <code>&gt;</code> 不需要複製)，就會看到 vscode 打開範例資料夾。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">&gt; git clone https<span style="color:#960050;background-color:#1e0010">:</span>//github.com/aben20807/paper-template.git &gt; code .\paper-template\ </code></pre></div></div><p>點開 paper.tex 檔案後，左方會出現 TEX 的圖示，點開後執行編譯的 recipe (最長那個)。這時候會跳出安裝套件的視窗。</p>   <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLWp9ZNMNj-yePUCWIj1AvQquVNlK6QYqXWTje1vL6U7JN8fC4OuqhFdhyIIgDlD4ydMI-x_Gvu2hqWEE49NDhQgIbmJoLqsM8VAkiz5Q5eaBCBCMSU-z1EX6KiJfcX-WomSZokxHHJNZhgnZrSUAE9kSg=w1600-h1200-no" alt="編譯" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">編譯</center>     </figcaption>   </figure> </details> <p>如果不想要一個一個點的話可以從開始選單中找 &ldquo;MiKTex Console&rdquo;，在 setting 中把自動安裝套件改成 Always。</p>   <details>   <summary><span>示意圖 </span></summary>      <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLXm4NBSLxHqiFM2ISIUKqJ-p8IFzCb9wQRMBwxU1VCrCUqRTNFpc8zwqWGonri1KFM0uQY7WNGgBMVwolb4dYcpMWBbFiSrjtOmaAKbM0ImvtpnmcpOoW8515RVAH9nRgZVWySfY0eBe_pzi16mM6mh0w=w1600-h1200-no" alt="MiKTex Console" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">MiKTex Console</center>     </figcaption>   </figure> </details> <p>最後就成功把範例編譯完成</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVawO6vCeLTqrKvREekjNGd0G-Ogq9g4OBBtJlNmtsNcA_C75WBFS5qPZgrVK97JjQO05GU9HPMIrLMQpINWsLKDDczZayHama0igM0yuOJqkbp7GXE9Lz3IihhuCRfivOfhvtI6jpUfcXWmkcz60BJLg=w1600-h1200-no" alt="完成" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">完成</center>     </figcaption>   </figure> </p> <h1 id="錯誤排除">錯誤排除</h1> <ul> <li>有時候 pdf viewer 在編譯後不會自動更新，這時候要先關閉那個分頁，再重新打開即可。</li> <li>編譯失敗時會出現打開錯誤訊息的視窗，或是可以直接開啟 LaTeX Compiler 的 Output，如上圖 (完成) 下方視窗所示。</li> </ul> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://linuxconfig.org/how-to-install-latex-on-ubuntu-18-04-bionic-beaver-linux">How to install LaTex on Ubuntu 18.04 Bionic Beaver Linux</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://www.acm.org/publications/taps/word-template-workflow#h-2.-the-workflow-and-templates">ACM Primary Article Templates AND Publication Workflow</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>使用 FileLocator 在資料夾中搜尋文件內容</title><link>https://aben20807.github.io/posts/20210806-search-text-in-multiple-files/</link><pubDate>Fri, 06 Aug 2021 15:20:27 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210806-search-text-in-multiple-files/</guid><description><![CDATA[
            <p>知識實在不容易累積</p>
          
            <p><a href="https://aben20807.github.io/posts/20210806-search-text-in-multiple-files/"><img src="https://lh3.googleusercontent.com/pw/AM-JKLVrBASd3V8HLIHeqrvn951PzqHkaT2Nxy2HUbNrmY_6L4IKCw3IeDoz5KLsYeTDwP0o7-RPpS6zvPRAkFafKuVD5cztcOOvXGgwpG9QzYSDIzo0LkbNgU0bwjd4rnGQ-eXIY0jtaRfx_P70FpC97Po3Wg=w1245-h870-no" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20210806-search-text-in-multiple-files/">Visit website to read the full article</a></p>
            <p>知識實在不容易累積</p> <p>這其實是我個人覺得，不知道其他人感覺?</p> <p>為何不容易累積?</p> <p>最主要原因就是沒有一個好的管理系統來整理這些知識，而時間一久自然就逐漸忘記，自已最近就很常遇到明明就看過且解決過，但是臨時遇到相同問題時無法找到當時解決的方法，只好再重新來一遍，來來回回已經耗費許多時間。</p> <p>因此我現在遇到問題時，在解決過程我就盡量把所有步驟都寫起來，但是不是很完整的整理，就僅是將使用到的參考網址、指令流程複製下來放到文件或報告投影片 (利用隱藏投影片)，這樣做法一來快速方便，二來與報告放在一起可以做最大化的連結效果。</p> <p>然而，時間一久就會發現要在這些報告中搜尋內容不太容易，因為這些檔案大多不是純文字檔，例如: word、ppt，最暴力的方法就一個一個檔案開起來然後用 Ctrl-F 輸入關鍵字搜尋，真的不太方便。如果是純文字檔 (txt, md) 可以用 <code>ag</code> (silversearcher-ag  ) 或是直接用 vscode 開啟資料夾來搜尋。</p> <p>也是因為這樣我某些時段就會想把這些報告改成用 markdown，但是做投影片又離不開 ppt、google slide，所以後來才找到這個可以直接搜尋資料夾內所有檔案的方法。我所使用的是 FileLocator Lite  (雖然有 pro 的試用期，但是我選 Lite，不過不確定是否被迫強制試用，希望不要 QuQ)。</p> <p>這裡示範一下在資料夾中找出有提及 &ldquo;memcheck&rdquo; 的文件，可以限制文件的種類，但注意要用分號 <code>;</code> 隔開，目標資料夾也同理。比較可惜是搜尋字串不能用正規表達式。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVrBASd3V8HLIHeqrvn951PzqHkaT2Nxy2HUbNrmY_6L4IKCw3IeDoz5KLsYeTDwP0o7-RPpS6zvPRAkFafKuVD5cztcOOvXGgwpG9QzYSDIzo0LkbNgU0bwjd4rnGQ-eXIY0jtaRfx_P70FpC97Po3Wg=w1245-h870-no" alt="搜尋範例" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">搜尋範例</center>     </figcaption>   </figure> </p> <p>找出檔案後，我還是點開然後用 Ctrl-F 搜尋，不過比原先的 &ldquo;遍歷搜尋法&rdquo; 快多了。</p> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://github.com/ggreer/the_silver_searcher">https://github.com/ggreer/the_silver_searcher</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://www.mythicsoft.com/filelocatorlite/download/">https://www.mythicsoft.com/filelocatorlite/download/</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Build a Simple Compiler Ep3</title><link>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/</link><pubDate>Thu, 22 Jul 2021 20:17:52 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/</guid><description><![CDATA[
            <p>指令生成 (Codegen)</p>
          
            <p><a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/"><img src="https://images.unsplash.com/photo-1534631615537-d8f2af94b6ae?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1650&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/">Visit website to read the full article</a></p>
            <p>指令生成 (Codegen)</p> <ul> <li>Series: <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/">[ep0]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/">[ep1]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/">[ep2]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/">[ep3]</a></li> <li>Source code: <a href="https://github.com/aben20807/learn_compiler">aben20807/learn_compiler</a></li> </ul> <h1 id="指令生成-codegen">指令生成 (Codegen)</h1> <p><del>由於是簡化版的編譯器</del>，我們不產生中間的表達式 (Intermediate representation, IR)  ，也不會有 Abstract syntax tree (AST)  ，而是直接利用上一篇的螢幕輸出改成對應的 Java bytecode 指令  。有興趣的可以去參考完整列表   看有支援什麼神奇功能。會寫 Java 的也可以參考如何使用反組譯的方式   找出對應的 bytecode 來觀察行為。</p> <h1 id="jasmin">Jasmin</h1> <p>Jasmin   為一 JVM 的組譯器，其會將可讀指令形式的 bytecode 轉換成 .class 的形式 (可執行的 bytecode)。</p> <h2 id="j-檔格式"><code>.j</code> 檔格式</h2> <ul> <li>開頭及結尾如下，只需要在一開始開檔時就寫入開頭，等到全部指令產生完畢，離開前再寫入結尾即可。</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">.source</span> <span style="color:#66d9ef">bytecode.j</span> <span style="color:#a6e22e">.class</span> <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">Main</span> <span style="color:#a6e22e">.super</span> <span style="color:#66d9ef">java</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">lang</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">Object</span> <span style="color:#a6e22e">.method</span> <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">main</span>([<span style="color:#66d9ef">Ljava</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">lang</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">String</span><span style="color:#75715e">;)V </span><span style="color:#75715e"></span><span style="color:#66d9ef">.limit</span> <span style="color:#66d9ef">stack</span> <span style="color:#ae81ff">10</span> <span style="color:#a6e22e">.limit</span> <span style="color:#66d9ef">locals</span> <span style="color:#ae81ff">10</span>          <span style="color:#75715e">; generated instructions </span><span style="color:#75715e"></span>	     <span style="color:#a6e22e">return</span> <span style="color:#a6e22e">.end</span> <span style="color:#66d9ef">method</span> </code></pre></div></div><h1 id="完整程式碼">完整程式碼</h1> <p>仔細看的話就會發現跟 ep2 的程式碼幾乎差不多，只有加了寫檔把對應操作的指令寫入 bytecode.j。</p>   <div class="alert error-msg">     <i class="fa fa-times-circle"></i>     下方程式碼的 symbol table 為求簡單所以使用一維陣列實作，僅適用於本範例，容易造成記憶體錯誤且無法套用至多層級的 scope，所以請勿學習。   </div> <ul> <li><code>mycompiler.y</code>:</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/*	Definition section */</span> <span style="color:#f92672">%</span>{     <span style="color:#75715e">//Extern variables that communicate with lex </span><span style="color:#75715e"></span>    <span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;common.h&#34; </span><span style="color:#75715e"> </span><span style="color:#75715e"></span>    <span style="color:#75715e">// #define YYDEBUG 1 </span><span style="color:#75715e"></span>    <span style="color:#75715e">// int yydebug = 1; </span><span style="color:#75715e"></span>     <span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">int</span> yylineno;     <span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">yylex</span>();     <span style="color:#66d9ef">extern</span> FILE <span style="color:#f92672">*</span>yyin;     <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">yyerror</span> (<span style="color:#66d9ef">char</span> <span style="color:#66d9ef">const</span> <span style="color:#f92672">*</span>s)     {         printf(<span style="color:#e6db74">&#34;error:%d: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, yylineno, s);     }     <span style="color:#75715e">#define codegen(...) \ </span><span style="color:#75715e">        do { \ </span><span style="color:#75715e">            for (int i = 0; i &lt; indent_cnt; i++) { \ </span><span style="color:#75715e">                fprintf(fout, &#34;\t&#34;); \ </span><span style="color:#75715e">            } \ </span><span style="color:#75715e">            fprintf(fout, __VA_ARGS__); \ </span><span style="color:#75715e">        } while (0) </span><span style="color:#75715e"></span>     <span style="color:#75715e">/* Symbol table function */</span>     <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">create_symbol</span>(<span style="color:#75715e">/* ... */</span>);     <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">insert_symbol</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> id_name);     <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">lookup_symbol</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> id_name);     <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">dump_symbol</span>();     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">get_op_name</span>(op_t op) {         <span style="color:#66d9ef">switch</span> (op) {             <span style="color:#66d9ef">case</span> OP_ADD:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ADD&#34;</span>;             <span style="color:#66d9ef">case</span> OP_SUB:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;SUB&#34;</span>;             <span style="color:#66d9ef">case</span> OP_MUL:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;MUL&#34;</span>;             <span style="color:#66d9ef">case</span> OP_DIV:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;DIV&#34;</span>;             <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;unknown&#34;</span>;         }     }     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">get_op_instruction</span>(op_t op) {         <span style="color:#66d9ef">switch</span> (op) {             <span style="color:#66d9ef">case</span> OP_ADD:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;iadd&#34;</span>;             <span style="color:#66d9ef">case</span> OP_SUB:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;isub&#34;</span>;             <span style="color:#66d9ef">case</span> OP_MUL:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;imul&#34;</span>;             <span style="color:#66d9ef">case</span> OP_DIV:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;idiv&#34;</span>;             <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;unknown&#34;</span>;         }     }     <span style="color:#75715e">/* Global variables */</span>     <span style="color:#66d9ef">int</span> example_symbol_cnt <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;     <span style="color:#75715e">#define MAX_SYMBOL_NUM 10 </span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>example_symbol[MAX_SYMBOL_NUM] <span style="color:#f92672">=</span> {};     <span style="color:#66d9ef">int</span> indent_cnt <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#75715e">// control the number of ident in bytecode </span><span style="color:#75715e"></span>    FILE<span style="color:#f92672">*</span> fout <span style="color:#f92672">=</span> NULL; <span style="color:#f92672">%</span>} <span style="color:#f92672">%</span>error<span style="color:#f92672">-</span>verbose <span style="color:#75715e">/* Use variable or self-defined structure to represent </span><span style="color:#75715e"> * nonterminal and token type </span><span style="color:#75715e"> */</span> <span style="color:#f92672">%</span><span style="color:#66d9ef">union</span> {     <span style="color:#66d9ef">int</span> val;     <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>id_name;     op_t op; } <span style="color:#75715e">/* Token without return */</span> <span style="color:#f92672">%</span>token DECL PRINT NEWLINE <span style="color:#75715e">/* Token with return, which need to sepcify type */</span> <span style="color:#f92672">%</span>token <span style="color:#f92672">&lt;</span>val<span style="color:#f92672">&gt;</span> NUMLIT <span style="color:#f92672">%</span>token <span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span> IDENT <span style="color:#75715e">/* Nonterminal with return, which need to sepcify type */</span> <span style="color:#f92672">%</span>type <span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span> AddOp MulOp <span style="color:#75715e">/* Yacc will start at this nonterminal */</span> <span style="color:#f92672">%</span>start Program <span style="color:#75715e">/* Grammar section */</span> <span style="color:#f92672">%%</span> Program     : StatementList ; StatementList     : Statement StatementList     <span style="color:#f92672">|</span> ; Statement     : DeclStmt     <span style="color:#f92672">|</span> PrintStmt ; DeclStmt     : DECL IDENT <span style="color:#e6db74">&#39;=&#39;</span> Expression NEWLINE {         <span style="color:#66d9ef">int</span> ref <span style="color:#f92672">=</span> insert_symbol(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>);         printf(<span style="color:#e6db74">&#34;IDENT %s, ref: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>, ref);         printf(<span style="color:#e6db74">&#34;STORE</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);         free(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>);         codegen(<span style="color:#e6db74">&#34;istore %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, ref);     } ; PrintStmt     : PRINT Expression NEWLINE {         printf(<span style="color:#e6db74">&#34;PRINT</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);         codegen(<span style="color:#e6db74">&#34;getstatic java/lang/System/out Ljava/io/PrintStream;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);         codegen(<span style="color:#e6db74">&#34;swap</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);         codegen(<span style="color:#e6db74">&#34;invokevirtual java/io/PrintStream/print(I)V</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     } ; Expression     : AddExpr ; AddExpr     : AddExpr AddOp MulExpr {         printf(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, get_op_name(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>));         codegen(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, get_op_instruction(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>));     }     <span style="color:#f92672">|</span> MulExpr ; AddOp     : <span style="color:#e6db74">&#39;+&#39;</span>  {         <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#f92672">=</span> OP_ADD;     }     <span style="color:#f92672">|</span> <span style="color:#e6db74">&#39;-&#39;</span> {         <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#f92672">=</span> OP_SUB;     } ; MulExpr     : MulExpr MulOp Operand {         printf(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, get_op_name(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>));         codegen(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, get_op_instruction(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>));     }     <span style="color:#f92672">|</span> Operand ; MulOp     : <span style="color:#e6db74">&#39;*&#39;</span> {         <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#f92672">=</span> OP_MUL;     }     <span style="color:#f92672">|</span> <span style="color:#e6db74">&#39;/&#39;</span> {         <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#f92672">=</span> OP_DIV;     } ; Operand     : NUMLIT {         printf(<span style="color:#e6db74">&#34;NUMLIT %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>val<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">1</span>);         codegen(<span style="color:#e6db74">&#34;ldc %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>val<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">1</span>);     }     <span style="color:#f92672">|</span> IDENT {         <span style="color:#66d9ef">int</span> ref <span style="color:#f92672">=</span> lookup_symbol(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">1</span>);         printf(<span style="color:#e6db74">&#34;IDENT %s, ref: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">1</span>, ref);         printf(<span style="color:#e6db74">&#34;LOAD</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);         free(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">1</span>);         codegen(<span style="color:#e6db74">&#34;iload %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, ref);     }     <span style="color:#f92672">|</span> <span style="color:#e6db74">&#39;(&#39;</span> Expression <span style="color:#e6db74">&#39;)&#39;</span> ; <span style="color:#f92672">%%</span> <span style="color:#75715e">/* C code section */</span> <span style="color:#66d9ef">int</span> main(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[]) {     <span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>) {         yyin <span style="color:#f92672">=</span> fopen(argv[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">&#34;r&#34;</span>);     } <span style="color:#66d9ef">else</span> {         yyin <span style="color:#f92672">=</span> stdin;     }     <span style="color:#75715e">/* Codegen output init */</span>     <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>bytecode_filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bytecode.j&#34;</span>;     fout <span style="color:#f92672">=</span> fopen(bytecode_filename, <span style="color:#e6db74">&#34;w&#34;</span>);     codegen(<span style="color:#e6db74">&#34;.source bytecode.j</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     codegen(<span style="color:#e6db74">&#34;.class public Main</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     codegen(<span style="color:#e6db74">&#34;.super java/lang/Object</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     codegen(<span style="color:#e6db74">&#34;.method public static main([Ljava/lang/String;)V</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     codegen(<span style="color:#e6db74">&#34;.limit stack 10</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     codegen(<span style="color:#e6db74">&#34;.limit locals 10</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     indent_cnt<span style="color:#f92672">++</span>;     create_symbol();     yyparse();     dump_symbol();     <span style="color:#75715e">/* Codegen end */</span>     codegen(<span style="color:#e6db74">&#34;return</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     indent_cnt<span style="color:#f92672">--</span>;     codegen(<span style="color:#e6db74">&#34;.end method</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     fclose(fout);     fclose(yyin);     printf(<span style="color:#e6db74">&#34;Total lines: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, yylineno);     <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; } <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> create_symbol() {     printf(<span style="color:#e6db74">&#34;&gt; Create symbol table</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     <span style="color:#75715e">// do nothing... </span><span style="color:#75715e"></span>} <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> insert_symbol(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> id_name) {     printf(<span style="color:#e6db74">&#34;&gt; Insert {%s} into symbol table; assign it as ref {%d}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,          id_name, example_symbol_cnt);     example_symbol[example_symbol_cnt] <span style="color:#f92672">=</span> strdup(id_name);     example_symbol_cnt<span style="color:#f92672">++</span>;     <span style="color:#66d9ef">return</span> example_symbol_cnt <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; } <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> lookup_symbol(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> id_name) {     printf(<span style="color:#e6db74">&#34;&gt; Lookup in symbol table</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> example_symbol_cnt; i<span style="color:#f92672">++</span>) {         <span style="color:#66d9ef">if</span> (strcmp(id_name, example_symbol[i]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {             <span style="color:#66d9ef">return</span> i;         }     }     printf(<span style="color:#e6db74">&#34;{%s} not found in symbol table</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, id_name);     <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; } <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> dump_symbol() {     printf(<span style="color:#e6db74">&#34;&gt; Dump symbol table</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> example_symbol_cnt; i<span style="color:#f92672">++</span>) {         free(example_symbol[i]);     } } </code></pre></div></div><h1 id="測試範例">測試範例</h1> <ul> <li><code>input/in01.lc</code>:</li> </ul> <pre tabindex="0"><code>decl x = 1 + 4 decl y = 2 decl num = x + y * (3 + 5) print num </code></pre><ul> <li>Result (其他檔案，如 Makefile 請參考 Source code):</li> </ul> <pre tabindex="0"><code>$ make $ ./mycompiler &lt; input/in01.lc $ java -jar jasmin.jar -g bytecode.j Generated: Main.class $ java Main 21 </code></pre><section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Intermediate_representation">https://en.wikipedia.org/wiki/Intermediate_representation</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">https://en.wikipedia.org/wiki/Abstract_syntax_tree</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Java_bytecode">https://en.wikipedia.org/wiki/Java_bytecode</a>&#160; </p> </li> <li id="fn:4" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings">Java bytecode instruction listings</a>&#160; </p> </li> <li id="fn:5" role="doc-endnote"> <p><a href="https://github.com/aben20807/blog-post/issues/105">https://github.com/aben20807/blog-post/issues/105</a>&#160; </p> </li> <li id="fn:6" role="doc-endnote"> <p><a href="http://jasmin.sourceforge.net/guide.html">http://jasmin.sourceforge.net/guide.html</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Build a Simple Compiler Ep2</title><link>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/</link><pubDate>Thu, 22 Jul 2021 19:17:52 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/</guid><description><![CDATA[
            <p>語法剖析器 (Parser)</p>
          
            <p><a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/"><img src="https://images.unsplash.com/photo-1445294211564-3ca59d999abd?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1567&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/">Visit website to read the full article</a></p>
            <p>語法剖析器 (Parser)</p> <ul> <li>Series: <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/">[ep0]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/">[ep1]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/">[ep2]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/">[ep3]</a></li> <li>Source code: <a href="https://github.com/aben20807/learn_compiler">aben20807/learn_compiler</a></li> </ul>   <div class="info-msg">     <i class="fa fa-info-circle"></i>     從文章長度跟作業繳交期限就可以知道 parser 的難度遠大於 scanner，所以請提早動手開始，<del>雖然不斷宣導下還是一定有人會不信邪前一個禮拜才開始</del>。   </div> <h1 id="語法剖析器-parser">語法剖析器 (Parser)</h1> <p>與詞法分析器 (Scanner) 相同，這裡我們仰賴語法剖析器產生器來建構符合我們定義文法的語法剖析器。</p> <p>由於我們再來會使用到的 JVM 功能是屬於 stack-based 的 virtual machine  ，所以在語法剖析時就要預先考慮產生對應的指令順序。</p> <h2 id="bison-yacc-三大區塊">bison (yacc) 三大區塊</h2> <p>這裡其實與上一篇幾乎相同 (用 <code>%%</code> 切了三個區塊出來)，只是中間區塊從 Rules section 換成 Grammar section，用來定義文法。</p> <p>寫法如下，其實跟課本學到的文法表示差不多只是換個符號表示。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Parent     : Child1 Child2 Child3     <span style="color:#f92672">|</span> Child4 ; </code></pre></div></div><h2 id="action">Action</h2> <p>Action   可以在 parse 過程中插入某些定義的動作，如下方程式範例中大括號部分。可以看到並不限於在最後方加上，也可以在 child 間加上 action。所以在建構不同層的 symbol table 時可以利用這個特性。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Parent     : Child1 {         printf(<span style="color:#e6db74">&#34;after reducing Child1; before reducing Parent&#34;</span>);     } Child2 Child3 {         printf(<span style="color:#e6db74">&#34;reduce Parent!&#34;</span>);     }     <span style="color:#f92672">|</span> Child4 {         printf(<span style="color:#e6db74">&#34;reduce Parent from Child4&#34;</span>);     } ; </code></pre></div></div><h2 id="利用-semantic-value-將下方資訊向上傳遞">利用 Semantic value 將下方資訊向上傳遞</h2> <p>為了向上傳遞資訊，bison (yacc) 提供了這項功能，讓下方的 action 可以用 <code>$$</code> 來作為回傳值，而上方的 action 可以用 <code>$1</code>, <code>$2</code> 來存取對應來自下方的回傳值。要使用這項功能需要注意需要在 Definition section 宣告相關的型別 (包含 <code>%union</code>, <code>%token</code>, <code>%type</code>)   。另外，數字所表示的位子需要把 action 也計算進去，如下方範例第一個 rule <code>$1</code> 來自 <code>Child1</code>; <code>$2</code> 來自 <code>Child1</code> 的 action, <code>$3</code> 來自 <code>Child2</code>, <code>$4</code> 來自 <code>Child3</code>。換 rule 則再從 1 開始，如 <code>$1</code> 來自 <code>Child4</code>。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Parent     : Child1 {         printf(<span style="color:#e6db74">&#34;after reducing Child1; before reducing Parent&#34;</span>);     } Child2 Child3 {         <span style="color:#960050;background-color:#1e0010">$$</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">123</span> <span style="color:#f92672">+</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">4</span>;         printf(<span style="color:#e6db74">&#34;reduce Parent!&#34;</span>);     }     <span style="color:#f92672">|</span> Child4 {         <span style="color:#960050;background-color:#1e0010">$$</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">1</span>;         printf(<span style="color:#e6db74">&#34;reduce Parent from Child4&#34;</span>);     } ; </code></pre></div></div><h1 id="symbol-table">Symbol table</h1> <p>由於硬體 (或是虛擬機器) 是看不懂你程式所寫的 <code>x</code>, <code>y</code> 變數，所以編譯器需要給這些變數一個位址 (address) 或是參考 (reference) 來代表不同的變數 (因為 JVM 常用參考來說明，所以這裡以後者來表示這個專有名詞)，因此 symbol table 最大用意就在生成 &ldquo;變數&rdquo; 與 &ldquo;參考&rdquo; 的一對一對應表，當有 scope 的概念時必須考慮變數是否在外層已經被定義並且從中獲取對應的參考，再來就是作業會遇到的內容就不多加贅述，不過可以提示: 是要利用 linked list 來實作 (沒意外大二資料結構就教過)。</p> <h1 id="stack-based">Stack-based</h1> <h2 id="運算範例">運算範例</h2> <p>利用 Stack-based 的運算可以大幅減少硬體的相依性，也因為 JVM 採用這個運算模式，所以我們產生的指令需要符合可執行的順序。下圖簡單示範一個加法的運作流程，左方為對應的虛擬指令，①: 第 1,2 行會把 x 變數存放的值放入 stack；②: y 也放入後遇到第 5 行的加法運算，因此將 stack 中兩個值 pop 出來進行加法運算；③: 最後將運算結果放回。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVeUXwOtg_rkDa19Jd4yQ7AT2_7Ijf_6iQhaDiplgQf4-ZrvVvvl50lP0o2d3aime409KsaCtxmeyr4VN5_jZNaiFm0fBwazef5yNccep0_4hCuYok2BtO8qH9eMgOF_za2GpGjZONQGY-C6f40kMuFhQ=w611-h332-no" alt="Stack 版本的運算" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Stack 版本的運算</center>     </figcaption>   </figure> </p> <p><strong>進階版本</strong> <code>decl num = x + y * (3 + 5)</code> 應該要產生如下的指令順序，則在 JVM 執行流程會是: 第一個遇到的運算是 <code>ADD</code>，所以 <code>3</code>、<code>5</code> 做完後放回 <code>8</code>，再來是 <code>MUL</code>，就是剛剛放回的 <code>8</code> 與 <code>y</code>，依此類推，最後才將結果存到 <code>num</code> 中</p> <pre tabindex="0"><code>IDENT x, ref: 0 LOAD IDENT y, ref: 1 LOAD NUMLIT 3 NUMLIT 5 ADD MUL ADD IDENT num, ref: 2 STORE </code></pre><h2 id="轉成-stack-based-順序">轉成 stack-based 順序</h2> <p>這裡就不包含詳細的從頭教學，這裡示範怎麼透過 action 來將原先的順序轉換成 stack-baced 順序。根據輸入的字串 <code>x * 2</code>，parser 會以同樣的順序跑過，符合可以 reduce 時才會向上合併，例如，<code>MulExpr</code> (從 <code>IDENT</code> ① 來), <code>MulOp</code>, <code>Operand</code> (從 <code>NUMLIT</code> ② 來) 都走過就會 reduce 成 <code>MulExpr</code> 接著執行它的 action ③。為了在 ③ 才印出運算子，這裡我們需要在 ③ 時知道下方上來的運算子是哪一個，因此利用上面提到的 <a href="#%E5%88%A9%E7%94%A8-semantic-value-%E5%B0%87%E4%B8%8B%E6%96%B9%E8%B3%87%E8%A8%8A%E5%90%91%E4%B8%8A%E5%82%B3%E9%81%9E">Semantic value</a> 來傳遞 (注意 <code>%union</code> 中有 <code>op</code> 這個欄位，中間使用到 <code>\$&lt;op&gt;\$</code> 代表指定的回傳型別) 讓 ③ 的 <code>\$2</code> 獲得運算子資訊。所以就會達到先印出 <code>x</code> 的參考及數字 <code>2</code> 後再印出運算子類型。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLW6ZMC2XfsnZg8jHI64e3dKCSezHqXX3QGtvRlmC9ZN2z8isdz0fU7BpkalJRei9VrdiOMPcYX1J_cacpu3iiXN3EZaQPNdEoc72iKKLKHpykzNxfMX7wjvUHBtGh18vRx389qK2SxuOU-028GIcUStCw=w1371-h821-no" alt="action 被執行的步驟" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">action 被執行的步驟</center>     </figcaption>   </figure> </p> <h1 id="程式碼除錯">程式碼除錯</h1> <p>有時候想要確認 shift、reduce 的中間過程可以加入下方兩行程式，不過就需要自行簡化輸入的程式不然會資訊量過多難以觀察。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#define YYDEBUG 1 </span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> yydebug <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; </code></pre></div></div><h2 id="測試範例">測試範例</h2> <pre tabindex="0"><code>decl x = 2 </code></pre>  <details>   <summary><span>輸出內容太多請點擊查看 </span></summary>   <pre tabindex="0"><code>$ ./mycompiler &lt; input/in02.cl &gt; Create symbol table Starting parse Entering state 0 Reading a token: Next token is token DECL () Shifting token DECL () Entering state 1 Reading a token: Next token is token IDENT () Shifting token IDENT () Entering state 8 Reading a token: Next token is token '=' () Shifting token '=' () Entering state 18 Reading a token: Next token is token NUMLIT () Shifting token NUMLIT () Entering state 9 Reducing stack by rule 17 (line 166):    $1 = token NUMLIT () NUMLIT 2 -&gt; $$ = nterm Operand () Stack now 0 1 8 18 Entering state 15 Reducing stack by rule 14 (line 153):    $1 = nterm Operand () -&gt; $$ = nterm MulExpr () Stack now 0 1 8 18 Entering state 14 Reading a token: Next token is token NEWLINE () Reducing stack by rule 10 (line 136):    $1 = nterm MulExpr () -&gt; $$ = nterm AddExpr () Stack now 0 1 8 18 Entering state 13 Next token is token NEWLINE () Reducing stack by rule 8 (line 128):    $1 = nterm AddExpr () -&gt; $$ = nterm Expression () Stack now 0 1 8 18 Entering state 27 Next token is token NEWLINE () Shifting token NEWLINE () Entering state 31 Reducing stack by rule 6 (line 109):    $1 = token DECL ()    $2 = token IDENT ()    $3 = token '=' ()    $4 = nterm Expression ()    $5 = token NEWLINE () &gt; Insert {x} into symbol table; assign it as ref {0} IDENT x, ref: 0 STORE -&gt; $$ = nterm DeclStmt () Stack now 0 Entering state 6 Reducing stack by rule 4 (line 104):    $1 = nterm DeclStmt () -&gt; $$ = nterm Statement () Stack now 0 Entering state 5 Reading a token: Now at end of input. Reducing stack by rule 3 (line 100): -&gt; $$ = nterm StatementList () Stack now 0 5 Entering state 17 Reducing stack by rule 2 (line 99):    $1 = nterm Statement ()    $2 = nterm StatementList () -&gt; $$ = nterm StatementList () Stack now 0 Entering state 4 Reducing stack by rule 1 (line 95):    $1 = nterm StatementList () -&gt; $$ = nterm Program () Stack now 0 Entering state 3 Now at end of input. Shifting token $end () Entering state 16 Stack now 0 3 16 Cleanup: popping token $end () Cleanup: popping nterm Program () &gt; Dump symbol table Total lines: 2 </code></pre> </details> <h1 id="完整程式碼">完整程式碼</h1>   <div class="alert error-msg">     <i class="fa fa-times-circle"></i>     下方程式碼的 symbol table 為求簡單所以使用一維陣列實作，僅適用於本範例，容易造成記憶體錯誤且無法套用至多層級的 scope，所以請勿學習。   </div> <ul> <li><code>mycompiler.y</code>:</li> </ul> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/*	Definition section */</span> <span style="color:#f92672">%</span>{     <span style="color:#75715e">// Extern variables that communicate with lex </span><span style="color:#75715e"></span>    <span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;common.h&#34; </span><span style="color:#75715e"> </span><span style="color:#75715e"></span>    <span style="color:#75715e">// #define YYDEBUG 1 </span><span style="color:#75715e"></span>    <span style="color:#75715e">// int yydebug = 1; </span><span style="color:#75715e"></span>     <span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">int</span> yylineno;     <span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">yylex</span>();     <span style="color:#66d9ef">extern</span> FILE <span style="color:#f92672">*</span>yyin;     <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">yyerror</span> (<span style="color:#66d9ef">char</span> <span style="color:#66d9ef">const</span> <span style="color:#f92672">*</span>s)     {         printf(<span style="color:#e6db74">&#34;error:%d: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, yylineno, s);     }     <span style="color:#75715e">/* Symbol table function */</span>     <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">create_symbol</span>(<span style="color:#75715e">/* ... */</span>);     <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">insert_symbol</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> id_name);     <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">lookup_symbol</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> id_name);     <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">dump_symbol</span>();     <span style="color:#75715e">/* Global variables */</span>     <span style="color:#66d9ef">int</span> example_symbol_cnt <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;     <span style="color:#75715e">#define MAX_SYMBOL_NUM 10 </span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>example_symbol[MAX_SYMBOL_NUM] <span style="color:#f92672">=</span> {};     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">get_op_name</span>(op_t op) {         <span style="color:#66d9ef">switch</span> (op) {             <span style="color:#66d9ef">case</span> OP_ADD:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ADD&#34;</span>;             <span style="color:#66d9ef">case</span> OP_SUB:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;SUB&#34;</span>;             <span style="color:#66d9ef">case</span> OP_MUL:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;MUL&#34;</span>;             <span style="color:#66d9ef">case</span> OP_DIV:                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;DIV&#34;</span>;             <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>                 <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;unknown&#34;</span>;         }     } <span style="color:#f92672">%</span>} <span style="color:#f92672">%</span>error<span style="color:#f92672">-</span>verbose <span style="color:#75715e">/* Use variable or self-defined structure to represent </span><span style="color:#75715e"> * nonterminal and token type </span><span style="color:#75715e"> */</span> <span style="color:#f92672">%</span><span style="color:#66d9ef">union</span> {     <span style="color:#66d9ef">int</span> val;     <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>id_name;     op_t op; } <span style="color:#75715e">/* Token without return */</span> <span style="color:#f92672">%</span>token DECL PRINT NEWLINE <span style="color:#75715e">/* Token with return, which need to sepcify type */</span> <span style="color:#f92672">%</span>token <span style="color:#f92672">&lt;</span>val<span style="color:#f92672">&gt;</span> NUMLIT <span style="color:#f92672">%</span>token <span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span> IDENT <span style="color:#75715e">/* Nonterminal with return, which need to sepcify type */</span> <span style="color:#f92672">%</span>type <span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span> AddOp MulOp <span style="color:#75715e">/* Yacc will start at this nonterminal */</span> <span style="color:#f92672">%</span>start Program <span style="color:#75715e">/* Grammar section */</span> <span style="color:#f92672">%%</span> Program     : StatementList ; StatementList     : Statement StatementList     <span style="color:#f92672">|</span> ; Statement     : DeclStmt     <span style="color:#f92672">|</span> PrintStmt ; DeclStmt     : DECL IDENT <span style="color:#e6db74">&#39;=&#39;</span> Expression NEWLINE {         <span style="color:#66d9ef">int</span> ref <span style="color:#f92672">=</span> insert_symbol(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>);         printf(<span style="color:#e6db74">&#34;IDENT %s, ref: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>, ref);         printf(<span style="color:#e6db74">&#34;STORE</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);         free(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>);     } ; PrintStmt     : PRINT Expression NEWLINE {         printf(<span style="color:#e6db74">&#34;PRINT</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     } ; Expression     : AddExpr ; AddExpr     : AddExpr AddOp MulExpr {         printf(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, get_op_name(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>));     }     <span style="color:#f92672">|</span> MulExpr ; AddOp     : <span style="color:#e6db74">&#39;+&#39;</span>  {         <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#f92672">=</span> OP_ADD;     }     <span style="color:#f92672">|</span> <span style="color:#e6db74">&#39;-&#39;</span> {         <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#f92672">=</span> OP_SUB;     } ; MulExpr     : MulExpr MulOp Operand {         printf(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, get_op_name(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">2</span>));     }     <span style="color:#f92672">|</span> Operand ; MulOp     : <span style="color:#e6db74">&#39;*&#39;</span> {         <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#f92672">=</span> OP_MUL;     }     <span style="color:#f92672">|</span> <span style="color:#e6db74">&#39;/&#39;</span> {         <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>op<span style="color:#f92672">&gt;</span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#f92672">=</span> OP_DIV;     } ; Operand     : NUMLIT {         printf(<span style="color:#e6db74">&#34;NUMLIT %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>val<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">1</span>);     }     <span style="color:#f92672">|</span> IDENT {         <span style="color:#66d9ef">int</span> ref <span style="color:#f92672">=</span> lookup_symbol(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">1</span>);         printf(<span style="color:#e6db74">&#34;IDENT %s, ref: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">1</span>, ref);         printf(<span style="color:#e6db74">&#34;LOAD</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);         free(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#f92672">&lt;</span>id_name<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">1</span>);     }     <span style="color:#f92672">|</span> <span style="color:#e6db74">&#39;(&#39;</span> Expression <span style="color:#e6db74">&#39;)&#39;</span> ; <span style="color:#f92672">%%</span> <span style="color:#75715e">/* C code section */</span> <span style="color:#66d9ef">int</span> main(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[]) {     <span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>) {         yyin <span style="color:#f92672">=</span> fopen(argv[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">&#34;r&#34;</span>);     } <span style="color:#66d9ef">else</span> {         yyin <span style="color:#f92672">=</span> stdin;     }     create_symbol();     yyparse();     dump_symbol();     fclose(yyin);         printf(<span style="color:#e6db74">&#34;Total lines: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, yylineno);     <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; } <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> create_symbol() {     printf(<span style="color:#e6db74">&#34;&gt; Create symbol table</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     <span style="color:#75715e">// do nothing... </span><span style="color:#75715e"></span>} <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> insert_symbol(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> id_name) {     printf(<span style="color:#e6db74">&#34;&gt; Insert {%s} into symbol table; assign it as ref {%d}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,          id_name, example_symbol_cnt);     example_symbol[example_symbol_cnt] <span style="color:#f92672">=</span> strdup(id_name);     example_symbol_cnt<span style="color:#f92672">++</span>;     <span style="color:#66d9ef">return</span> example_symbol_cnt <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; } <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> lookup_symbol(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> id_name) {     printf(<span style="color:#e6db74">&#34;&gt; Lookup in symbol table</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> example_symbol_cnt; i<span style="color:#f92672">++</span>) {         <span style="color:#66d9ef">if</span> (strcmp(id_name, example_symbol[i]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {             <span style="color:#66d9ef">return</span> i;         }     }     printf(<span style="color:#e6db74">&#34;{%s} not found in symbol table</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, id_name);     <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; } <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> dump_symbol() {     printf(<span style="color:#e6db74">&#34;&gt; Dump symbol table</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);     <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> example_symbol_cnt; i<span style="color:#f92672">++</span>) {         free(example_symbol[i]);     } } </code></pre></div></div><h1 id="測試範例-1">測試範例</h1> <ul> <li><code>input/in01.lc</code>:</li> </ul> <pre tabindex="0"><code>decl x = 1 + 4 decl y = 2 decl num = x + y * (3 + 5) print num </code></pre><ul> <li>Result (其他檔案，如 Makefile 請參考 Source code):</li> </ul> <pre tabindex="0"><code>$ make $ ./myparser &lt; input/in01.lc &gt; Create symbol table NUMLIT 1 NUMLIT 4 ADD &gt; Insert {x} into symbol table; assign it as ref {0} IDENT x, ref: 0 STORE NUMLIT 2 &gt; Insert {y} into symbol table; assign it as ref {1} IDENT y, ref: 1 STORE &gt; Lookup in symbol table IDENT x, ref: 0 LOAD &gt; Lookup in symbol table IDENT y, ref: 1 LOAD NUMLIT 3 NUMLIT 5 ADD MUL ADD &gt; Insert {num} into symbol table; assign it as ref {2} IDENT num, ref: 2 STORE &gt; Lookup in symbol table IDENT num, ref: 2 LOAD PRINT &gt; Dump symbol table Total lines: 5 </code></pre><h1 id="references">References</h1> <ul> <li><a href="https://thiagoh.github.io/bison/">Bison 3.0.4 Manual</a></li> </ul> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Stack_machine#Virtual_stack_machines">https://en.wikipedia.org/wiki/Stack_machine#Virtual_stack_machines</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://thiagoh.github.io/bison/#Actions">https://thiagoh.github.io/bison/#Actions</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://thiagoh.github.io/bison/#Action-Types">https://thiagoh.github.io/bison/#Action-Types</a>&#160; </p> </li> <li id="fn:4" role="doc-endnote"> <p><a href="https://thiagoh.github.io/bison/#Action-Features">https://thiagoh.github.io/bison/#Action-Features</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Build a Simple Compiler Ep1</title><link>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/</link><pubDate>Thu, 22 Jul 2021 18:17:52 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/</guid><description><![CDATA[
            <p>詞法分析器 (Scanner)</p>
          
            <p><a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/"><img src="https://images.unsplash.com/photo-1582899973294-9851630b69ec?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1567&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/">Visit website to read the full article</a></p>
            <p>詞法分析器 (Scanner)</p> <ul> <li>Series: <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/">[ep0]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/">[ep1]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/">[ep2]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/">[ep3]</a></li> <li>Source code: <a href="https://github.com/aben20807/learn_compiler">aben20807/learn_compiler</a></li> </ul> <h1 id="詞法分析器-scanner">詞法分析器 (Scanner)</h1> <p>這裡我們不需要像編譯系統的課本或課程中提到的演算法來用 C 語言寫一個詞法分析器，而是利用 flex (lex) 這個詞法分析器產生器，它讓使用者可以用一些高階的定義詞法分析的模式，接著自動產生對應的詞法分析器。</p> <p>使用這類工具的原因如下:</p> <ul> <li>減少人工撰寫造成的錯誤</li> <li>開發快速且方便除錯</li> <li><del>修課學生不是每一個都對編譯器有興趣，但這是必修課</del></li> </ul> <p>然而實際上真實的複雜語言，如 C++、Rust、Go       大多都是手寫來達到更高的設計彈性。</p> <h1 id="flex-lex-三大區塊">flex (lex) 三大區塊</h1> <p>用兩個 <code>%%</code> 來作為區隔:</p> <ul> <li>Definition section: 又分作兩個小區塊 (可對照下方完整程式碼): %{ 定義標頭檔、全域變數 %}、正規表達式標籤、condition (<code>%x</code>)  、選項 (<code>%option</code>)  </li> <li>Rules section: 定義判斷為 token 的規則。定義的順序會影響優先度所以要考慮是否會覆蓋其他規則，例如關鍵字應該要優先於變數名，否則像是 <code>decl</code>, <code>print</code> 會被判定為 ident。這同時也是為何 <code>.</code> (匹配所有字元) 會放在最下面</li> <li>C Code section: 定義 main 函式、其他函式</li> </ul> <pre tabindex="0"><code>&lt;&lt; Definition section &gt;&gt; %% &lt;&lt; Rules section &gt;&gt; %% &lt;&lt; C Code section &gt;&gt; </code></pre><h1 id="正規表達式">正規表達式</h1> <p>這裡主要利用正規表達式 (Regular Expression, regex, regexp, RE) 來判斷一個輸入中有那些 token，例如 <code>apple</code> 不是任何一個保留關鍵字，所以就是一般的變數名稱。由於本系列所採用的是簡化版的語言，變數只有大小寫字母組成，所以這裡就直接定義 <code>ident</code> 個標籤負責對應 <code>{letter}+</code> 其中 <code>letter</code> 對應 a~z 或是 A~Z 其中一個字元。</p> <h1 id="完整程式碼">完整程式碼</h1> <ul> <li><code>mycompiler.l</code>:</li> </ul> <div style="border: 1px solid #888888;"></div><h1 id="測試範例">測試範例</h1> <ul> <li><code>input/in01.lc</code>:</li> </ul> <pre tabindex="0"><code>decl x = 1 + 4 decl y = 2 decl num = x + y * (3 + 5) print num </code></pre><ul> <li>Result (其他檔案，如 Makefile 請參考 Source code):</li> </ul> <pre tabindex="0"><code>$ make $ ls input/  lex.yy.c  Makefile  mycompiler.l  myscanner* $ ./myscanner &lt; input/in01.lc decl             DECL x                IDENT =                ASSIGN 1                NUMLIT +                ADD 4                NUMLIT \n               NEWLINE decl             DECL y                IDENT =                ASSIGN 2                NUMLIT \n               NEWLINE decl             DECL num              IDENT =                ASSIGN x                IDENT +                ADD y                IDENT *                MUL (                LPAR 3                NUMLIT +                ADD 5                NUMLIT )                RPAR \n               NEWLINE print            PRINT num              IDENT \n               NEWLINE Finish scanning. </code></pre><h1 id="references">References</h1> <ul> <li><a href="https://westes.github.io/flex/manual/">Lexical Analysis With Flex, for Flex 2.6.2</a></li> <li><a href="https://www.cs.virginia.edu/~cr4bd/flex-manual/index.html#Top">Lexical Analysis With Flex, for Flex 2.6.3</a></li> <li><a href="https://github.com/westes/flex">westes/flex</a></li> <li><a href="https://stackoverflow.com/questions/39075510/option-noinput-nounput-what-are-they-for">YY_NO_UNPUT, YY_NO_INPUT</a></li> </ul> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/GNU_Bison#Use">https://en.wikipedia.org/wiki/GNU_Bison#Use</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_lexer/lib.rs.html">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_lexer/lib.rs.html</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_parse/lib.rs.html">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_parse/lib.rs.html</a>&#160; </p> </li> <li id="fn:4" role="doc-endnote"> <p><a href="https://www.cs.virginia.edu/~cr4bd/flex-manual/Start-Conditions.html">https://www.cs.virginia.edu/~cr4bd/flex-manual/Start-Conditions.html</a>&#160; </p> </li> <li id="fn:5" role="doc-endnote"> <p><a href="https://www.cs.virginia.edu/~cr4bd/flex-manual/Scanner-Options.html#Scanner-Options">https://www.cs.virginia.edu/~cr4bd/flex-manual/Scanner-Options.html#Scanner-Options</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Build a Simple Compiler Ep0</title><link>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/</link><pubDate>Thu, 22 Jul 2021 17:17:52 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/</guid><description><![CDATA[
            <p>說明及事前準備</p>
          
            <p><a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/"><img src="https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1650&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/">Visit website to read the full article</a></p>
            <p>說明及事前準備</p> <ul> <li>Series: <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/">[ep0]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/">[ep1]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/">[ep2]</a>, <a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/">[ep3]</a></li> <li>Source code: <a href="https://github.com/aben20807/learn_compiler">aben20807/learn_compiler</a></li> </ul> <h1 id="前言">前言</h1> <p>雖然好像很多相關資料了，但我覺得還是欠缺完整性，所以就寫了這個系列來補全。儘管還是有少數人無論如何都選擇直接抄襲同學這條路，但還是希望透過本系列能夠清楚完整的帶領完全沒概念的人走一遍，藉此降低這些行為。</p> <p>雖然我算是蠻常使用本系列所介紹的這套工具了，不過可能還是會有錯誤的地方，還請各位不吝指教。</p> <h1 id="本篇所建構的編譯器">本篇所建構的編譯器</h1> <p>本系列內容為使用 flex/bison (lex/yacc) 建構一個簡易的編譯器，並使其產生的 jasmin 指令可在 JVM 執行。完整執行流程如下。我們會利用 flex 產生 scanner，利用 bison 產生 parser。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/AM-JKLVfavnVca_5BLSfCjR9c4-qX2B3aClIeT0xi-dKP7OA3I6YQ6wpE7Xpesp1-TiV7scUERknJm54uRRowNcFRd1vm7irZP_97aKpwDJMTSH8d5B0bcyF6whs077_llSwlHZyCey4jSwH4XqjpQ8O2vJ5pQ=w551-h281-no" alt="流程，橘色區塊為本系列需要寫程式的部分" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">流程，橘色區塊為本系列需要寫程式的部分</center>     </figcaption>   </figure> </p> <h1 id="環境設定">環境設定</h1> <h2 id="作業系統">作業系統</h2> <ul> <li>OS: Ubuntu 18.04 (我使用 WSL2)</li> </ul> <h2 id="軟體安裝">軟體安裝</h2> <ul> <li>gcc: 7.5.0 (<code>gcc -v</code>)</li> <li>gnu make: 4.1 (<code>make -v</code>)</li> <li>flex: 2.6.4 (<code>flex --version</code>)</li> <li>bison: 3.0.4 (<code>bison --version</code>)</li> <li>java: openjdk 11.0.10 (<code>java --version</code>)</li> <li>安裝指令: <code>$ sudo apt install gcc make flex bison default-jre</code></li> </ul> <h1 id="定義本次教學的語言">定義本次教學的語言</h1> <p>主要特性: 包含賦值、基本四則運算、輸出。</p> <h2 id="型別-type">型別 type</h2> <ul> <li>整數 (num_lit), e.g., <code>1</code>, <code>2</code></li> <li>變數 (ident), e.g., <code>x</code>, <code>y</code>, <code>num</code></li> </ul> <h2 id="運算子-operator">運算子 operator</h2> <ul> <li><code>+</code>: 加</li> <li><code>-</code>: 減</li> <li><code>*</code>: 乘</li> <li><code>/</code>: 除</li> <li><code>=</code>: 宣告時賦值</li> </ul> <h2 id="其他符號">其他符號</h2> <ul> <li><code>(</code> <code>)</code>: 運算有最高優先度</li> <li><code>\n</code> (newline): 換行作為結尾</li> </ul> <h2 id="關鍵字-keyword">關鍵字 keyword</h2> <ul> <li><code>decl</code></li> <li><code>print</code></li> </ul> <h2 id="簡化的文法-grammar">簡化的文法 grammar</h2> <ul> <li>未標示運算子優先順序，但是符合先乘除後加減，括號優先度最高。</li> </ul> <pre tabindex="0"><code>Statement -&gt; DeclStmt           | PrintStmt DeclStmt -&gt; &quot;decl&quot; ident &quot;=&quot; Expression newline PrintStmt -&gt; &quot;print&quot; Expression newline Expression -&gt; Expression BinaryOp Expression            | Operand             Operand -&gt; num_lit         | ident         | &quot;(&quot; Expression &quot;)&quot; BinaryOp -&gt; &quot;+&quot; | &quot;-&quot; | &quot;*&quot; | &quot;/&quot; </code></pre><h2 id="範例輸入">範例輸入</h2> <pre tabindex="0"><code>decl x = 1 + 4 decl y = 2 decl num = x + y * (3 + 5) print num </code></pre><h1 id="qa-僅代表本人意見">Q&amp;A (僅代表本人意見)</h1>   <details>   <summary><span>建議心理素質強健者再行觀看 </span></summary>   <ul> <li><strong>Q</strong> 為何編譯系統<del>目前</del>為必修?</li> <li><strong>A</strong> 這需要回顧一下整個資訊工程的範疇，一般這個科系會有一些硬體課程以及多數的軟體課程 (包含數學、理論)，編譯系統是連接兩大領域的科學，因此在這堂課會用到幾乎所有在大學的所學 (例如，程式設計、資料結構、演算法、作業系統、計算理論)，雖然沒有到使用硬體指令 (否則會太難，想學可以參考 Jserv 的課)，不過可以說是整個大學的總整理。</li> <li><strong>Q</strong> 為何編譯系統這麼難?</li> <li><strong>A</strong> 其實課程部分一點也不難，每年超過100分的大概都有 20 個已經超過修課人數的一成，要不及格只可能是上課都沒在聽、考試沒複習、作業有問題都沒有問幾乎每次都沒交。如果是編譯器領域的話的確是難，但相對的會的人就少。</li> <li><strong>Q</strong> 為何作業沒有部份給分?</li> <li><strong>A</strong> 試想你之後出社會，老闆要你開發產品而你只能寫出屍體，連執行都不行，這樣你覺得老闆要給你多少薪水。你總不能跟他說我寫了哪些功能只是不能跑，所以應該要部份給薪吧。</li> </ul> </details>
        ]]></description></item><item><title>Google Sheet Grouping</title><link>https://aben20807.github.io/posts/20210529-google-sheet-grouping/</link><pubDate>Sat, 29 May 2021 11:16:15 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210529-google-sheet-grouping/</guid><description><![CDATA[
            <p>Proficient programming language:</p> <ul> <li>Google sheet</li> </ul>
          
            <p><a href="https://aben20807.github.io/posts/20210529-google-sheet-grouping/"><img src="https://lh3.googleusercontent.com/pw/ACtC-3eGzeTF-u6a8scFj0NVUs5GCRge149HD7X6oygWYCyLx322QMxejANFBdLzqkTCBtMaX78yDWUHRCzbZBg3NimvKwhXokBfc_FJi4KNL-iPFX1MS6mgLarOQIwLPbKsxItFPkB9PvsDneu1N9XYXzcmVg=w505-h387-no" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20210529-google-sheet-grouping/">Visit website to read the full article</a></p>
            <p>Proficient programming language:</p> <ul> <li>Google sheet</li> </ul> <p>善用工具的心法很簡單：</p> <blockquote> <p>我相信有這個功能</p> </blockquote> <p>不過還是需要拆解一下：需求 -&gt; 功能分解 -&gt; 合併</p> <h1 id="需求">需求</h1> <p>以這次功能為例，我想要針對所有同學進行分組，但是不需要隨機，只要按照順序分 A, B, C 就好。</p> <h1 id="功能分解逐漸合併">功能分解、逐漸合併</h1> <p>三個一個循環很容易想到取餘數 (modulo) 。接著到 Google sheet function list   搜尋看看有沒有：</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3eHskvbWonxNnPntuPoVU-BB5frZRuSWBseEPPHvhg16rNbOLr23yhb2Tuz85f7vYaXiwlkgFMsTjsSitPAAevG904AnSEQLgyMMEghKFwomt81AQKUzU-Cv67Q451GlAUpLWxmeoHNrMmOykGNJMUO3A=w1199-h776-no" alt="搜尋結果" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">搜尋結果</center>     </figcaption>   </figure> </p> <p>我們大概可以知道 <code>MOD(x, y)</code> 得到的是 <code>x/y</code> 的餘數，因此 <code>x</code> 是對應到列數，而 <code>y</code> 是分組的數量。</p> <p>再來比較抽象。我們有了餘數功能，要怎麼對應到每一列 (row)? 所以就找到 <code>ROW()</code> 可以取得目前的列數，這樣我們就得到 <code>x</code> 了。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3fiUAHHbCsaBpyvclBHNlMa57_1-JlrEAxSMRP3BVX071SZnn_ORcsEhZtnJHOuKy4HK67yw_JdbdKocrBhJwjWvqgLf5GxGDsakCLbiTZJdNWIicGirct-YQ-ddVNbS58h_rayFvi4zN9yi041gG4zaQ=w307-h386-no" alt="每個人的列數" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">每個人的列數</center>     </figcaption>   </figure> </p> <p><code>y</code> 用 <code>3</code> 代入</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3fEda2LS9FQLpGcan6rweZctvXTwK1q-OsEA-kjdmbCe6u0L40y0W2deC-sJb0sreCOLIrhbHIjJZnaSofjM0YcA6TgpQd7DauHQy5-FalhW0LMzRniLvSulgd21t9MxtSjjYiN1UdP0KBHHbPw-wdfCw=w308-h387-no" alt="2,0,1 重複出現" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">2,0,1 重複出現</center>     </figcaption>   </figure> </p> <p>如果分組編號就是 0,1,2 的話就可以在這邊停止，不過如果要重新取代號 (A,B,C) 或是分配不同內容給各個組別時就需要繼續下去。</p> <p>再來的思考方向，就是用剛剛的 0,1,2 當作索引值 (index)，查看看如何用索引值取得其他格子的內容。我們選擇使用 <code>INDEX()</code>，其使用方法就是先選擇一個區塊 <code>reference</code> 接著用 <code>row</code>, <code>column</code> 去選擇。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3fSOGvhxqM_OW94b9zA6qbLl1QGMXiLcMS-4wcQgOTPUiaXnA1PIOUqcfRX39GNuWDQDAycJXlsi1vvnI_uHAMqTd4MRD8le7oTlrBVVII1nJ_oyE07eYf-GL8cyEuqhAZ2t28PFZQ6iwBqmtftOAK_wA=w1174-h900-no" alt="選一個功能最不複雜的" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">選一個功能最不複雜的</center>     </figcaption>   </figure> </p> <p>套用進去會長這樣，<code>INDEX(\$E\$1:\$E\$3, MOD(ROW(), 3))</code> (<code>\$</code> 是鎖定用，不會因為下拉導致列或欄改變，因為 <code>E1:E3</code> 是固定放我們的代號)。   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3djn5Tqfhr3O1GH6SALCCahCihSID6m0RbA_4VYXGqNU61yoL5Lk6bRp81gsIVOj8tevLHv0-w-0RihTdeAv6UfDQtqwE4CTepk71mYrFmztiTzwjMSvtxqcXrEo8y2Wu2t4K81R18gRBF1VkY41F3K7Q=w506-h385-no" alt="目前的成果" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">目前的成果</center>     </figcaption>   </figure> </p> <p>會發生上面的錯誤是因為 <code>INDEX</code> 使用的列起始是從 <code>1</code> 開始，所以我們來加 <code>1</code>。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3dsrRA-9kdsJrtANswZ01XvsoSW3UdUn8UyjgTCqihHAq_QH7Dm65y9P0616XASNuCcVu2Np_ZR9Z5ZiobW-by36NZT-U87j3eO_EK1LYqoxrmN_m-vSOUD5OETzm_7CtQ6IoWfkwzDz0arxbha-QTmDQ=w506-h385-no" alt="完成" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">完成</center>     </figcaption>   </figure> </p> <p>如果想要 A 開始的會只要將右邊 E 欄換個順序即可。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3eGzeTF-u6a8scFj0NVUs5GCRge149HD7X6oygWYCyLx322QMxejANFBdLzqkTCBtMaX78yDWUHRCzbZBg3NimvKwhXokBfc_FJi4KNL-iPFX1MS6mgLarOQIwLPbKsxItFPkB9PvsDneu1N9XYXzcmVg=w505-h387-no" alt="換順序" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">換順序</center>     </figcaption>   </figure> </p> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p>(<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>)。&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p>(<a href="https://support.google.com/docs/table/25273?hl=en">https://support.google.com/docs/table/25273?hl=en</a>)&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Hugo on WSL2 (Ubuntu18.04)</title><link>https://aben20807.github.io/posts/20210215-hugo-on-wsl2/</link><pubDate>Mon, 15 Feb 2021 10:56:01 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210215-hugo-on-wsl2/</guid><description><![CDATA[
            <p>漸漸變成老闆的樣子 (?)</p>
          
            <p><a href="https://aben20807.github.io/posts/20210215-hugo-on-wsl2/"><img src="https://lh3.googleusercontent.com/pw/ACtC-3dz0JI6eOlA0KVRH15KQGVdaa5_NwujRTRNGtgyJMhM0RwFOQ95GUou8cjNdH4g7Bjg3N4yjfr085yg-IIUa_mOAxgBEkUwVRNTe_r_ZE3nv1whJfAyP5Xb9LSqQQ2eTUVyOlKAJktv0CXH2UFHUncbQw=w587-h422-no" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20210215-hugo-on-wsl2/">Visit website to read the full article</a></p>
            <p>漸漸變成老闆的樣子 (?)</p> <h1 id="tldr">TL;DR</h1> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cd /tmp $ wget https://github.com/gohugoio/hugo/releases/download/v0.80.0/hugo_extended_0.80.0_Linux-64bit.tar.gz $ tar xvf hugo_extended_0.80.0_Linux-64bit.tar.gz $ sudo mv hugo /usr/local/bin $ hugo version Hugo Static Site Generator v0.80.0-792EF0F4/extended linux/amd64 BuildDate: 2020-12-31T13:46:18Z </code></pre></div></div><h1 id="前言">前言</h1> <p>筆電系統演進:</p> <ul> <li>國小~國中 (Windows)</li> <li>高中 (VirtualBox, Wubi)</li> <li>大一~三 (Cygwin, VirtualBox)</li> <li>大四~研一 (Dual system)</li> <li>研二~??? (Windows)</li> </ul> <p>雖然開發還是在 Linux 上，不過文書的處理會越來越多，所以筆電如果用雙系統會頻繁的切換，相當麻煩。因此目前是用遠端軟體連到 Linux 做開發 (需要的話。</p> <p>最近 Win10 已經可以支援 WSL2 了，雖然要經過一些步驟，不過已經相對穩定，目前用的很多簡單指令都有支援，所以像 VSCode 用的 git 也可以直接用 WSL2 內的 git 了  </p> <p>因此目前的文書作業，包括計畫書 (Word)、論文 (Latex)，我都轉移到 Win10。</p> <p>為了檢驗相容性，也嘗試在 WSL2 中用 hugo 寫個東西。找很久才發現，原來可以直接下載編譯好的執行檔。詳細就請看最前面的指令。</p> <h1 id="結語">結語</h1> <p>結果每次都是過年在寫文章&hellip;</p> <h1 id="references">References</h1> <ul> <li><a href="https://aozaki-kuro.com/tech/hugo-deployment-debugging/#wsl2%E5%86%85%E9%83%A8%E7%BD%B2hugo">Hugo部署与踩坑记</a></li> </ul> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p>(<a href="https://github.com/andy-5/wslgit">https://github.com/andy-5/wslgit</a>)&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>寫一個記帳程式有多難？</title><link>https://aben20807.github.io/posts/20200815-how-hard-to-build-money-manager-app/</link><pubDate>Sat, 15 Aug 2020 17:17:26 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200815-how-hard-to-build-money-manager-app/</guid><description><![CDATA[
            <p>靈機一動，想說可以用表單來記帳，一查果然有人做過 OuO</p>
          
            <p><a href="https://aben20807.github.io/posts/20200815-how-hard-to-build-money-manager-app/"><img src="https://lh3.googleusercontent.com/pw/ACtC-3e3RXtqDVFdubJjmlkAZCHYZ8ru-FtTDTd8vtkxaetMkS1p7LiDKKNdgLZ0IXXq27vYR2-onK45Gghk3-itmUuTId7LzROOm0tcuY9_xstcEfiDZ7-NichYkmS5t7Rk52bOgpAIBvUxBzj0fkCEvxRR=w1272-h643-no" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20200815-how-hard-to-build-money-manager-app/">Visit website to read the full article</a></p>
            <p>靈機一動，想說可以用表單來記帳，一查果然有人做過 OuO</p> <h1 id="前言">前言</h1> <p>又被 Google play 發了60元禮金，想說看一下工具類的 APP 付費情況，發現前幾名有兩個記帳 APP，原本想說要買來用養成一下記帳，可是我對現有的記帳程式沒有啥好感，之前也用過兩三種，後來也都放棄。結果後來想想還是不要拿來買工具，所以又買了一個 Rusty lake 的遊戲，燒腦的解謎遊戲，多多支持 (無業配XD)</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3fMBGVal6Y6qmf0-CSh-AfKoWtWNqvCUI-60lPR7C9ZAgDbE0CNwlqPyAdjm-Q1uLbExDxLR14b6K2AtJJZLBcHftF0fZ3gblRscO7kjQBQ0DP74gCnNbiFOOOdxHri-Zqcay_gKsUCyi_Y7hkR49XQ=w646-h1041-no" alt="Rusty Lake Paradise" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Rusty Lake Paradise</center>     </figcaption>   </figure> </p> <h1 id="使用表單記帳">使用表單記帳</h1> <p>靈機一動，想說可以用表單來記帳，一查果然有人做過 </p> <p>不過我也只是採用了簡單部份，後面那個對帳有點複雜啊。所以我就建了兩個表單：消費記錄、轉帳記錄。</p> <ul> <li>消費記錄：記錄平常花費</li> <li>轉帳記錄：領錢、悠遊卡或是點點卡儲值</li> </ul> <p>用表單記帳好處：</p> <ul> <li>雲端化，即時更新</li> <li>自動時間戳記</li> <li>超客制化，問題選項及流程都自行設計</li> <li>統計圖表功能完整</li> </ul> <p>可能缺點：</p> <ul> <li>一定要有網路才能記帳</li> <li>複雜統計功能要花時間設計</li> <li>某些表單沒有的可能就無法提供，例如，顯示表格，另外我發現手機無法上傳圖片 QuQ</li> </ul> <h2 id="表單設計">表單設計</h2> <p>表單有一個很有用的功能，就是區段，可以針對回答跳轉到不同的問題</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3dtUNadoaEi6qkB0o9GKiDL1uZLqi7ZtRLBbOshWrIMFbIkF5MYjICopOKcSXLBjJldZudGT87f5hrf02RASGct7YaMXLHAphLohzBmlMlNjxhetEQ54pa7bwIqhv150zbY_sxdVIuaM3zGVSDU6XmB=w859-h579-no" alt="根據回答跳轉區段" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">根據回答跳轉區段</center>     </figcaption>   </figure> </p> <p>所以大概就是這樣設計，如此便可以快速方便記錄細節。其實這就是一個狀態機，Compiler DFA 回憶起來~ 針對自己的情況加選項或是問題，超級客制化。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3e_fQr9GGaMQHlG1-JLvQpCmzcuImufjPFuqtFlugwb9QRj9VCHhpGle_-A-zICRSk6ZQ9PqXyftjUV1piJdzm5mz2syYiKMI6LbS5gocIyS4fSv-Z_GdTWehkdEVe13kp35NYO7MdXNYTFKzvdeJya=w892-h422-no" alt="我沒畫完整版的喔" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">我沒畫完整版的喔</center>     </figcaption>   </figure> </p> <h2 id="預先填入表單">預先填入表單</h2> <p>某些選項可能超常用，比方說消費記錄大部份都是現金，可以將它用作選項預設值，可以參考  </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3c51lQNqFVCSqjAn2XVkDt0xZSs9PSqt2S623mTXkh-oTcmLdcNJd5Qh59cDiUALwe4EnGx1oO94vTn9O8AasjwZOfFwG8IkdblaSR4643XjYfozFOT5h1bJpxScbVyPMBXMlYAH0tlZd6irq7jWtyc=w692-h403-no" alt="新版在右上角" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">新版在右上角</center>     </figcaption>   </figure> </p> <h2 id="如何使用表單">如何使用表單</h2> <p>一開始想法很簡單，就是建立記錄用的表單，然後將連結用書籤的型式存在手機桌面，這樣就可以直接點來記帳。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3dBfRoc4yz-m2ciB1uy1WiY5NUFUdHZZ7Us8HWtZPVZviemG2keYD56E0Ujo-00380KveIxeQcQ2l5AqRjHYrVejcxQESoC6lR43QtZGwsSKjyX-m_0rdqzzg8hE0Y9NEUjzPRe7L4t3R4J5TTtrmwQ=w1272-h836-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3frXOytq3We7pyNsglA69vKcVR3mFoV0nQbihbk8mqR5ebdj-gxlvXPhxQ7oNByjdtlwTQ9Szj1TTxC4mWJ0ty7SLGr5LpJIJKMmpWzBGlyHuK-26TGR8A2rgkBn4nUv_ODDaC1FUCxQDjO51t8dUrE=w1272-h903-no" alt="出現在桌面" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">出現在桌面</center>     </figcaption>   </figure> </p> <h1 id="app">APP</h1> <p>用書籤有一個很大的缺點，就是一定要放在桌面，多表單的話很麻煩。再來就是每次點開就需要開啟瀏覽器，而我的瀏覽器頁面常駐超過 99 個分頁 (<code>:D</code>) 所以載入要花費一定的記憶體及時間。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3fljY1Lx9qYXtjq8dfqx-dSbDyjz9IMmU5DAMkDUivBFwupJQSODbQxBZD3NEQqxt0v8dZhQKk1COJQDHHgtNnIawzdwr5WEJZjZvyh2Tgq31R2aY3cLObAA2ELveNItMXgpRmasztoSxK93Le0--3X=w1272-h1239-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <p>於是我就想說找看看有沒有將表單變成 APP 的方法，不過看來沒有簡單的方法，<a href="https://play.google.com/store/apps/details?id=x1Trackmaster.x1Trackmaster&amp;hl=zh_TW">AppSheet</a> 好像可以不過似乎之後要收費。接著我就打算自己用一個簡單的 APP。</p> <p>Android Studio 過於肥大是不得已才會採用。查了一下發現 App Inventer 2 (AI2) 也有支援 WebView 的元件所以我的想法應該可行，基本概念就是用 WebView 來載入我們的表單，用按鈕控制開啟哪個表單這樣。</p> <h2 id="版面設計">版面設計</h2> <p>兩個畫面，左邊主畫面作為一開始進入的畫面；右邊用來開啟網頁也就是表單，放一個 WebViewer 然後大小用最大。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3dV5Gn101vL3GfVWY6yecntkVd0UP_vDgzZGqd0tjoA8k9V87nX7zlF2EbEFGxqcDrn8icutYcE4SV7-tv9eCHWX3qc8Mez--FxVkzNpoQmtH-IbD-Vu0iVv4sIKCEPKIw8KLvQYWBwdJnK8PfNJZoG=w1272-h554-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h2 id="開始寫-code咦是拉-code">開始寫 code，咦，是拉 code</h2> <p>先展示一下完整的模樣</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3e3RXtqDVFdubJjmlkAZCHYZ8ru-FtTDTd8vtkxaetMkS1p7LiDKKNdgLZ0IXXq27vYR2-onK45Gghk3-itmUuTId7LzROOm0tcuY9_xstcEfiDZ7-NichYkmS5t7Rk52bOgpAIBvUxBzj0fkCEvxRR=w1272-h643-no" alt="Screen1" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Screen1</center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3e2vKJQmuKlTVEAJ88cMpwZBqYB05bvn23YiBIITp8wQ4EKct_hx56i0QFq6Fhhx1novqwDOLs0kyxpPMnU0UkKL9-PeN5MnMBSLV9HCkuzJT3g47X_jkz-a_E2_BzZqZvWJrEKl-TR1NbEGyd-QOYg=w1272-h640-no" alt="Screen2" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Screen2</center>     </figcaption>   </figure> </p> <ol> <li>首先是畫面進入及離開，因為在 AI2 中對 TextBox 作修改是無法儲存的，關閉 App 重開後會恢復，所以這裡採用建議的方式：用 TinyDB 當作儲存空間。那紫色的兩個 procedure 將在稍候提到。主要就是用來讓設定可以被儲存。</li> </ol> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3dZJnlJPYoM8IWlwit56aajeQJuqncIQu5uY5sh1pZIxoxaCayShM1Ay7BmT2j6S5MxmrNmMAf7BGEfBvJaglWr6GqP_vE4eu3d8eVXRie1sVBmiwzBVQJ3knwwkcTK-V7lrddQ4lIuC7PrbM9Og8vz=w285-h219-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <ol start="2"> <li>點擊按鈕後傳送對應的連結給 Screen 2 當作瀏覽連結，這裡我有點懶所以命名就大致上不更改@@，值得注意的是，這裡看到傳入 TextBox 的值，可是剛剛畫面上沒看到 TextBox 啊，其實是我隱藏起來了，將 visiable 設定為 false，按下設定才會顯示。</li> </ol> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3cNajTDVEms6BWCGBHIX63Fd96YTILkirW2p1q-3ZP_hStceuVfYwJaYOU5hTqFINqrGtgCQfCPL0ggoefHZNOnq5bQMG4QdZdPCoPtc-3NVfHMrlOabF64OWSOJLnnsoRCA3XgfSDlXf3VXROB5GxR=w592-h299-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <ol start="3"> <li>Screen 2 接收剛剛傳的連結後當作首頁畫面，Screen 2 也就只有這個方塊。</li> </ol> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3e6D9aJTo3gFXSJfGY-iZRUp-u_KXDHUEJFF8QUDn5Jldo8X0lMhkwOa8x4xL3KqFa4kSqFbCDj7PzP-P_-UNhxP5EtyR0DqAEk67CtIQOMSGOa6OMOCo9euneoXM1NScigiOmUBofdCfifTklbz5uT=w521-h200-no" alt="Screen2" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Screen2</center>     </figcaption>   </figure> </p> <ol start="4"> <li>這裡就是我在 2. 中提到的，按設定的按鈕會顯示設定</li> </ol> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3f_jBNSwSu_p9eWDv0JXn71OjRa06_utd5xEswjfv0jJzZ37yEsERkJhZWAF8dZjET5kNbGcIPxv69s5IJ3yi-zi0bhSXjBuRZeXrjV8LpzEZ-j0R-kDJC6gMraE-fKY-1B9SvYuK-ACQN2biQz7gCe=w465-h160-no" alt="Setting section" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Setting section</center>     </figcaption>   </figure> </p> <ol start="5"> <li>在 4. 中設定的部份會需要儲存到 TinyDB 中。</li> </ol> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3ctSw-g3InpKnt1QyfG7yu4i5nKUx_671d5lJf6lmI4rxnGNUPmnw0iZNa7TZHgvS3nbeRoQc3muMyjZhg6K1iyHWZ2jpAjMt7jyZ2hwX5my6GPAUpH3TW48aaNVq1gcDnAfyDWo0fcgZnbwWdLTG1s=w449-h290-no" alt="Set button" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Set button</center>     </figcaption>   </figure> </p> <ol start="6"> <li>最後，把 TextBox 存取 TinyDB 的動作寫成 procedure，這樣比較清楚。</li> </ol> <p><img src="https://lh3.googleusercontent.com/pw/ACtC-3fuQeIoXDp-C0TvgNpIznR4JRc9DS0LNSmCg0kfnQbSz3r_FlL3sxPNhAg4PG_OWO0tixY_v9-p9tlfMDECuiPBbu3HDHNDPLFsoXp_3S2Zduhvrc4Q24jfEasuM55IkriY7mdfDjI5nVVFbK_6ywRR=w668-h1038-no" alt=""></p> <ol start="7"> <li>額外功能。開啟相機掃描 QRcode 並複製到剪貼簿，這裡需要安裝一個外掛套件 <a href="https://puravidaapps.com/clipboard.php">Clipboard Extension</a>，另外記得取消勾選BarcodeScanner1 的 UseExternalScanner 直接使用內建的即可。會多這個功能主要是可以用在電子發票上，在記帳前可以先掃描，之後直接複製到備註那邊即可。</li> </ol> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3c-baXvN_ippYf4tCbROQDqkwHjfknfbXDqdElVdxzrL59g3gnELs3BUf2Ep_xsxMGlpB9Hv7SCx8oWR5wzQ8ERxKR8UTf7qtScZWZwMu9pbp4PmYYVQavRyFq_JKcg6vFP5bARTyCiu73obddk6AJC=w401-h272-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <h1 id="成品">成品</h1> <p>感覺我也不算是做一個記帳 App，反而像是將書籤或是網址合併變成一個 App，所我雖然取這個名子不過我還是找一個沒有跟錢相關的 icon。我也增加設定頁面可以設定的東西，包括按鈕的文字也可以換，所以也就不限於記帳了。</p> <p>Icons made by <a href="https://smashicons.com/">Smashicons</a> from <a href="https://www.flaticon.com/">www.flaticon.com</a></p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3dCHkhaKSt4Pe-t7pRfxzxIkU9A_MWEyLR0svdl1wfinZR2ZWCTHdPAPFcmO0ZvBb8zNxEeMLkDC8hIWSV3dGmKY_CWAYZmojmgoma500tOE_9fMUyDH3nY0faL-9rCjL-91-TE52bD_NTjXlzn55CU=w660-h1319-no" alt=" " style="max-width: 100%;"/>     <figcaption>       <center class="caption-text"> </center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3er9oo-dAdEogzgXc41sHDxnVwKEkUQc0l36X0jxzWBpb92QlXhWG6E7__NLzf9SarSWnkUIMytNOhLRCXg5ur5F9_DcTGqRs6pYsgzE7htPymKKSPlUigLhhJbOe5KgmmHm2vRSf3gAodtYE0m83Dh=w660-h1319-no" alt="主頁面" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">主頁面</center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3ev0_9UxWRs2TNPcc947ntp3ncr_Tkl8E_mYhJWHBTOlMeWi9GEbFH0H_j7iXEQyYsnGhu2-hxX2t12ktLjV0-tB5RKV9M292ZcbKR9-KMBRa-nCNzV5QxBkpHGM4-bc5B3pHNr0EPA1DOuaOB2pzog=w660-h1319-no" alt="設定頁面" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">設定頁面</center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3cg3mhLJEIYy3tIRsOxqJr3PiOjmWaEc6ho6npj1Q69AgaCnIbU073VmOqbA2DULN1r9mfN7CI57ZOW_9ZrDKhtEkyU65zBAy9lu7i7gaNUr8e1f2Vo3QodWIKZDBjKHeCMgC1GNwcuh_yJxr-sR7k6=w660-h1319-no" alt="消費記錄，連額頭網址列都消失了，舒服 OuO" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">消費記錄，連額頭網址列都消失了，舒服 OuO</center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3fEqBTRnMchjOpS4SqzjifLk05CXdQuQQ-9I0Ve_quNnRtTz07Cv6rdSh2s5R4H5B08zy1eEEJsJoyEVkaep0PZ4upa1D5eyteMM1A1-aXwAlLYymFscg2z73dx4UDiAq4kn3EOkbHVwVNi7SHK5VXZ=w660-h1319-no" alt="轉帳記錄" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">轉帳記錄</center>     </figcaption>   </figure> </p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3dMfTlxaQfdxv0wXs3JRymXiUE9ZYfW6e-fUDP2N7ABITWv_f0aULXvR8NrLMLjPRDDH9HqAKd5OvDxGjP7auQG6-lwY60N5a2h1L-m9loZD2VU3-yFNFALtn4Jq0q648kG2oHz3xZB2U5lhew98PKa=w660-h1319-no" alt="報表，就是畫幾張圖用手機開的感覺" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">報表，就是畫幾張圖用手機開的感覺</center>     </figcaption>   </figure> </p> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://leadingmrk.com/google-sheet-form-account-book/">【Google表單記帳術】史上最完整雲端記帳本打造教學！1小時內開始用表單記帳，免費又方便！</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://blog.miniasp.com/post/2014/07/17/Create-Google-Forms-with-Pre-filled-Responses">Google 表單如何設定欄位預設值（可從網址列變更預設值）</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>C++ Get Pretty Type Name</title><link>https://aben20807.github.io/posts/20200710-cpp-get-pretty-type-name/</link><pubDate>Fri, 10 Jul 2020 13:36:58 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200710-cpp-get-pretty-type-name/</guid><description><![CDATA[
            <p>最近狂看 C++ 的東西，明明這麼複雜，可是真香 OuO</p>
          
            <p><a href="https://aben20807.github.io/posts/20200710-cpp-get-pretty-type-name/"><img src="https://lh3.googleusercontent.com/pw/ACtC-3cFVFsP6QcLV2K8_d7pOf3SfR4bWEjy5oM8KqVHXHST8h7ysiSwCAJd4-oZOfWB_v54ekhXZ5OSM36lAtLS0EhN-YoDXIkuRVkDPU6sH41P5jrtNhPYsvgnIeg55ZGXouiUQe-vblaoFGLo40Y315J0=w1708-h1112-no" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20200710-cpp-get-pretty-type-name/">Visit website to read the full article</a></p>
            <p>最近狂看 C++ 的東西，明明這麼複雜，可是真香 OuO</p> <h1 id="tldr">tl;dr</h1> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;typeinfo&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cxxabi.h&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e"></span> <span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>string get_type_name(<span style="color:#66d9ef">const</span> T variable) {     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> name <span style="color:#f92672">=</span> <span style="color:#66d9ef">typeid</span>(variable).name();     <span style="color:#66d9ef">int</span> status <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>;     <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> demangled_name <span style="color:#f92672">=</span> abi<span style="color:#f92672">::</span>__cxa_demangle(name, NULL, NULL, <span style="color:#f92672">&amp;</span>status);     std<span style="color:#f92672">::</span>string ret{name};     <span style="color:#66d9ef">if</span> (status <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {         ret <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>string(demangled_name);         free(demangled_name);     }     <span style="color:#66d9ef">return</span> ret; } </code></pre></div></div><h1 id="typeid-operator">typeid operator</h1> <p>在 <code>typeinfo</code> 中有提供 <code>typeid()</code> 可以取得 type 或是 expression (variable) 的名字  </p> <h2 id="example">Example</h2> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;typeinfo&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e"></span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span> () {     <span style="color:#66d9ef">int</span> a;     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#66d9ef">typeid</span>(<span style="color:#66d9ef">int</span>).name() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>;     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#66d9ef">typeid</span>(a).name() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>; } </code></pre></div></div><p><a href="https://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(fontScale:14,j:1,lang:c%2B%2B,selection:(endColumn:2,endLineNumber:8,positionColumn:1,positionLineNumber:1,selectionStartColumn:2,selectionStartLineNumber:8,startColumn:1,startLineNumber:1),source:'%23include+%3Ciostream%3E%0A%23include+%3Ctypeinfo%3E%0A%0Aint+main+()+%7B%0A++++int+a%3B%0A++++std::cout+%3C%3C+typeid(int).name()+%3C%3C+!'%5Cn!'%3B%0A++++std::cout+%3C%3C+typeid(a).name()+%3C%3C+!'%5Cn!'%3B%0A%7D'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((g:!((h:compiler,i:(compiler:g83,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'0',intel:'0',libraryCode:'1',trim:'1'),fontScale:14,j:1,lang:c%2B%2B,libs:!(),options:'-Ofast',selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'x86-64+gcc+8.3+(Editor+%231,+Compiler+%231)+C%2B%2B',t:'0')),k:50,l:'4',m:78.34710743801652,n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compiler:1,editor:1,fontScale:14,wrap:'1'),l:'5',n:'0',o:'%231+with+x86-64+gcc+8.3',t:'0')),header:(),l:'4',m:21.65289256198347,n:'0',o:'',s:0,t:'0')),k:50,l:'3',n:'0',o:'',t:'0')),l:'2',n:'0',o:'',t:'0')),version:4">[run]</a></p> <p>不過像是 int 只能顯示 i，其他複雜的顯示也不直觀，主要是因為 C++ 會對於型別做修飾 (Name mangling  )，這也是為何 C++ 能夠支援 function overloading，因為編譯過程中型別都會轉成獨一無二的表達方式所以不會造成衝突。</p> <h1 id="demangle">Demangle</h1> <p>在 <code>&lt;cxxabi.h&gt;</code> 中有提供方法可以讓經過 mangle 的型別轉回可讀性較高的字串。以下範例與上述提到的方法進行比較。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;typeinfo&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cxxabi.h&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e"></span> <span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>string get_type_name(<span style="color:#66d9ef">const</span> T variable) {     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> name <span style="color:#f92672">=</span> <span style="color:#66d9ef">typeid</span>(variable).name();     <span style="color:#66d9ef">int</span> status <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>;     <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> demangled_name <span style="color:#f92672">=</span> abi<span style="color:#f92672">::</span>__cxa_demangle(name, NULL, NULL, <span style="color:#f92672">&amp;</span>status);     std<span style="color:#f92672">::</span>string ret{name};     <span style="color:#66d9ef">if</span> (status <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {         ret <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>string(demangled_name);         free(demangled_name);     }     <span style="color:#66d9ef">return</span> ret; } <span style="color:#66d9ef">namespace</span> OuO<span style="color:#f92672">::</span>QuQ {     <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Foo</span> { };     <span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> size<span style="color:#f92672">&gt;</span>     <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Bar</span> { }; } <span style="color:#66d9ef">using</span> Foo <span style="color:#f92672">=</span> OuO<span style="color:#f92672">::</span>QuQ<span style="color:#f92672">::</span>Foo; <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span> () {     <span style="color:#66d9ef">int</span> a;     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#66d9ef">typeid</span>(a).name() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>;     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> get_type_name(a) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>;     Foo b;     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#66d9ef">typeid</span>(b).name() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>;     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> get_type_name(b) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>;     OuO<span style="color:#f92672">::</span>QuQ<span style="color:#f92672">::</span>Bar<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">99</span><span style="color:#f92672">&gt;</span> c;     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#66d9ef">typeid</span>(c).name() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>;     std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> get_type_name(c) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>;     <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; } </code></pre></div></div><p><a href="https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAM1QDsCBlZAQwBtMQBGAFlICsupVs1qhkAUgBMAISnTSAZ0ztkBPHUqZa6AMKpWAVwC2tQVvQAZPLUwA5YwCNMxEAGYA7KQAOqBYXW0eoYmgj5%2BanRWNvZGTi4eisqYqgEMBMzEBEHGppyJKhG0aRkEUXaOzm6eCumZ2SF5NSVlMXFVAJSKqAbEyBwA5FKu1siGWADU4q466jXEmMxGU9jiAAwAgkMjY5iT03PWwMtrm5LDtKMGE1M6BACeXpjWNMcbWxc7ezrIAB4/zA48AA6BCvTZvDYETBGLzCKE3e6PWiLXYAFTBaFoNXGNXQIBAB1E42AmAIAH1EZgycijJgIJjsajxgA3DJ4AHsdqTdyyDbjfnjBkEQUIDIAKkFdGxNN2UwAIuNKXh0BBWcR2Q5OUCZRB2lNeesBeNrMKmgQDAo9gqALTcfUnI3IUXECVC8ZYIwiYDsdDUlFW8YAiggMlk37MMker3sCAy0jjWwAVQsFnjSZT8akADYzRa9a4DUbcfjCcBxvMCOIeTKq3L7XyBXgqOMILnLfL5eNVlyq4WjQKKwHiwSCOrRBAo6IfX7afm%2B/3xlR5nTJ97ML6ZXOHQLa9v%2BRWerRy6T65t3HWIesZQovMw%2BuMAPIGB/4gCKBlf3PnONHBlU4wAMVQVAv25OsCxOPdFWhWFmChL4DCxPBgBsdBjXoHE8AAL0wMEi1/f9pAyUDdwgt5zxOC1DkA4CAyfF8QHfV98SA1BT0gjYTXGT1rBbHseSgrjmFPfC8RQbphRuG5FQeJ4VWYdptRRXUvmksBBgAVh0Wh1JEgVhzQAxJOmaSSXJSkZzpBTVOmcZdK0nTBjI8FDQFVjxgcPT%2BQMiSbJ0GTHmVCAHEUnUexM2z7O03TnNE/FDOMnRTNJClZMs4LwqSyLNOipyDSg%2Bi3w/fEiOIG4AE5yuWQUvJ/MSEr8gK5PpULlMytScsc2qfKMxqzNSx50uQdrsvEByYvyht91JQ8u3Y89%2Bk6VgQH6DT%2BlIUx%2BlWdbUBWpKZDkHFul6WUzk4daCBW7b2k6ABrEANNWIQVu4dbNu20hdv6daFBAJ7Lq2xbSDgWAYEQcSYTwdgyAoelUEh6GQGAAAOVxSCoKGoWIX7gqu9bAWRYg7hW87SDQIxaXoB9aFYYnAdIVd2Dxhm8HmFJmUwX76cwH5kiMgYPpNZRmdYPAHGIDI7j0LASYu9UjFlzoaHoJg2A4Hh%2BEEYRRBQOQ5CEMXfsgTpUC8QouetXF5QkA6ZE4dxxmtB9XB%2BpIUg0CBzHqXJSHMFoKhcPIwn8OhvdCXwQ9of3YkqRo3cKYo6n0HJBCUApUlqUprHKGPA8UTOw8aTPo7aThOgUY6%2Bi4JaVrWjbma%2Bn5kaza0s24YlkGQcZkaBVwW1wQgSEmM74z0BHnGH1wy/GfbZBkC68Zu0h7se57%2Ble0gFazHv3CzVZXFcVYNPcZGNM4SReHenaVp%2Bv7SAB67gbBiAkAkrwjPIShya8KHY99/AiB52VowFgTMNYAHcJZeEVmvOuV9PorSGJwcY4DCAIHGE3FubcO5dx7i7e%2Bi9OgIAWFgFwuo14bwVlPIEZxypZizOVbgkgeDI13kfeu9Mvq33%2BoQ5eD0nrLX6Pg%2BBXCCGAyXoIyQb0G43zEddToHNsYBBANwIAA%3D">[run]</a></p> <p>可以從結果看到後者可讀性較高</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pw/ACtC-3cFVFsP6QcLV2K8_d7pOf3SfR4bWEjy5oM8KqVHXHST8h7ysiSwCAJd4-oZOfWB_v54ekhXZ5OSM36lAtLS0EhN-YoDXIkuRVkDPU6sH41P5jrtNhPYsvgnIeg55ZGXouiUQe-vblaoFGLo40Y315J0=w1708-h1112-no" alt="封面照片 - 執行結果" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">封面照片 - 執行結果</center>     </figcaption>   </figure> </p> <p>我發佈後才被 YouTube 推薦&hellip;，不過我最近也看一堆他的影片。  </p> <h1 id="references">References</h1> <ul> <li><a href="https://stackoverflow.com/a/19123821">C++ Get name of type in template</a></li> <li><a href="https://stackoverflow.com/a/4541470">Unmangling the result of std::type_info::name</a></li> </ul> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://en.cppreference.com/w/cpp/language/typeid">typeid operator</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://en.wikipedia.org/wiki/Name_mangling">Name mangling</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>雜記</title><link>https://aben20807.github.io/posts/20200508-miscellaneous0508/</link><pubDate>Fri, 08 May 2020 23:06:11 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200508-miscellaneous0508/</guid><description><![CDATA[
            <p>考完囉，還有好多事@@</p>
          
            <p><a href="https://aben20807.github.io/posts/20200508-miscellaneous0508/"><img src="https://lh3.googleusercontent.com/pT6JsJO88Ew5z4vDATq6Ge3ZBKcdA0l2v4-fJ6mmZkkWYk23L2BMcP7TxH7nrq2-Oru5enZXfjSOGsXsvKMjFzGg1PbicmH2gOGuPUchRxdFmIKRu1fGyELFwYpWOcIMuI1ys49aeg=w1266-h949-no" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20200508-miscellaneous0508/">Visit website to read the full article</a></p>
            <p>考完囉，還有好多事@@</p> <h1 id="天氣">天氣</h1> <p>我是每天都要洗熱水澡的人，今天竟然不用開電熱水器就有熱水，賺。</p> <p>天氣雖然熱，但是這幾天傍晚天空都很美 OuO</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/pT6JsJO88Ew5z4vDATq6Ge3ZBKcdA0l2v4-fJ6mmZkkWYk23L2BMcP7TxH7nrq2-Oru5enZXfjSOGsXsvKMjFzGg1PbicmH2gOGuPUchRxdFmIKRu1fGyELFwYpWOcIMuI1ys49aeg=w1266-h949-no" alt="封面照片 - 5/6" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">封面照片 - 5/6</center>     </figcaption>   </figure> </p> <h1 id="考後反省">考後反省</h1> <p>有一題 NPDA 確定錯，不過其他也不保證對 QuQ</p> <p>題目跟答案如下：</p> <p>   <figure class="gphoto-media">     <img src="https://gateoverflow.in/?qa=blob&amp;qa_blobid=15483797651626709437" alt="來源" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">來源</center>     </figcaption>   </figure>   </p> <p>我真的沒想到可以 push 任意 1~3 個這種作法，我的回答就說不能同時存 n 跟 3n 的資訊所以不是 Context Free 因此找不到 NPDA，寫這種答案都會很懷疑自己，因為推翻題目的解法之前考古都沒有過。有人可能只 push 3 個，這樣無法保證大於 n，可是這種應該會被部份給分吧。寫過題目的人可能才會意識到寫我這種的可能要給更多部份分 (自己講XDD)，可是我這種想的比較周全啊，結果卻是全錯 QuQ</p> <h1 id="鋼琴推薦-ludovico-einaudi---nuvole-bianche">鋼琴推薦 Ludovico Einaudi - Nuvole Bianche</h1> <p>我忘記之前有沒有分享過。這是我小時候 (大一 or 大二) 在 C++ 助教的 FB 發現他有分享，真的很耐聽，我可以重複這首邊做事一整天。歌名是義大利文，翻譯是 white clouds，不過若是翻成中文就變成白雲，雖然這個梗可能有年紀了，不過我這輩的應該都還是有聽過這個藝人，之後可能就可以直接用中文說歌名而不會有其他聯想了。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/nGdLDnNyT3t-GAiJLcxPfNVIuoEl_EelGs9VBAgRQ6s0K37bK5cYnNc3UA5uY6fv98fC5VbQ96jzo5jtNJJDG-WenPQc-EaJdegb9xDOxDG2A8QvX-stQDuPKj5oGm6e-MQGrYc9jBU=w1292-h229-no" alt="Ludovico Einaudi - Nuvole Bianche" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">Ludovico Einaudi - Nuvole Bianche</center>     </figcaption>   </figure> </p>   <h1 id="圖床">圖床</h1> <p>昨天突然發現，我可以把圖片用學校 google 帳號備份啊，這樣我可以直接傳原圖而且無限空間，之後的圖床也會改用 google photo 了，解釋起來麻煩，總之各種面向來說都比較方便 OuO</p> <p>話說好像太多影片檔所以到現在還沒備份完，我都用長鏡頭拍老鼠，考驗演技 (x</p> <h1 id="雜">雜</h1> <p>最近晚上實驗試都剩下我一個，突然覺得有點孤單XDD</p> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://gateoverflow.in/174614/identify-the-language?show=174677#c174677">https://gateoverflow.in/174614/identify-the-language?show=174677#c174677</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>雜記</title><link>https://aben20807.github.io/posts/20200505-miscellaneous0505/</link><pubDate>Tue, 05 May 2020 21:33:50 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200505-miscellaneous0505/</guid><description><![CDATA[
            <p>要考試了好不想寫考古 (x</p>
          
            <p><a href="https://aben20807.github.io/posts/20200505-miscellaneous0505/"><img src="https://images.unsplash.com/photo-1588671571787-aad772fd7e1e?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1934&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20200505-miscellaneous0505/">Visit website to read the full article</a></p>
            <p>要考試了好不想寫考古 (x</p> <h1 id="天氣">天氣</h1> <p>五月突然變得超熱，這樣六、七、八月要怎麼過？QuQ</p> <h1 id="人生好難xd">人生好難XD</h1> <p>人真的是頗複雜的動物，思想難以輕易被解讀，內心會自己額外腦補一段，但是又怕是自己過度解讀造成的誤解。</p> <p>會變成木頭不是沒有道理，因為感覺大家好像都想說什麼卻又沒說出來，我不太想製造不必要的麻煩，所以盡量不要去過度解讀，就算有也只放在心裡當做腦補區塊就是。但是好像又需要把握什麼。老實講這是我在住宿公寓看到一個長的算漂亮的女生卻把整包回收丟到一般垃圾之後突然產生的感想，若是不把握之後遇到都是這種的怎麼辦? 有這個聯想是有些奇怪XDD</p> <p>高中班導曾經在上課提到挑情人的數學問題 <a href="https://en.m.wikipedia.org/wiki/Secretary_problem">Secretary problem</a>，就像是當你放棄了目前的，那有一定機率再也遇不到更好的。</p> <p>真是煩</p> <blockquote> <p>人生好難XD</p> </blockquote> <p>終於漸漸知道前室友為什麼每天掛在嘴邊了，原來是每天都在取捨的部份 OuO</p> <p>   <figure class="gphoto-media">     <img src="https://images.unsplash.com/photo-1588671571787-aad772fd7e1e?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1934&amp;q=80" alt="封面照片 - 5/3 全家爬員林藤山步道隨手拍" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">封面照片 - 5/3 全家爬員林藤山步道隨手拍</center>     </figcaption>   </figure> </p> <p>這代表我現在是有這個煩惱？果然是因為事情都擠在一起不想做，喜歡胡思亂想的部份啊。</p> <h1 id="資格考的意義">資格考的意義？</h1> <p>或許有這個疑慮代表我還是屁孩。</p> <p>到底為什麼博士班需要考資格考，而且是筆試基礎科目。若是為了在就讀期間確認有一定能力或許是最好的解答，但我不太能認可，沒有能力還能讀嗎？這些考科都算是系上的必修科目，而且老實說，課堂的考試可能都還比資格考難。</p> <p>必修的考試會出的繁瑣 (至少 compiler 是這樣)，主要是讓學生能夠靜下心在考試當下思考所學，雖然多但是會發現慢慢寫還是寫得完，除非是沒讀書。</p> <p>但是資格考好像不是這樣，而是流於寫考古題來通過考試的形式，這讓我非常好奇資格考的意義。不過也沒管道可以反應，也只能繼續考下去。</p> <p>我算是蠻會考試的，但都讀到這裡了還要考，對我來說只是複習一下，但不是說臺灣教育就是敗在考試制度嗎？真的都沒有人懷疑？好吧，我還只是個屁孩 OuO</p> <p>希望這次考試順利通過 (被揍</p> <h1 id="手機成癮">手機成癮</h1> <p>有點嚴重，前幾天睡前都在重新整理 YouTube 看有什麼沒看過的影片。覺得這樣不行，所以最近晚上會更早把手機開飛航，早上時也會起床一段時間再關飛航，聯絡不到先不要緊張，我還活著的機率頗大 OuO</p> <h1 id="舊部落格">舊部落格</h1> <p>話說我的<a href="https://aben20807.blogspot.com/">舊部落格</a>竟然已經破20萬瀏覽，每天還是會有超過100人造訪，可能是因為我持續透過 IFTTT 更新，所以 SEO 還沒放棄我的網站，相較之下，這個網站觀看人數慘不忍睹XD</p> <p>前幾天，去維護了一下那個網站，至少有把 LikeCoin 的按鈕修好，該貢獻一下了吧 (x</p>
        ]]></description></item><item><title>Shutil</title><link>https://aben20807.github.io/posts/20200420-shutil/</link><pubDate>Mon, 20 Apr 2020 16:20:49 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200420-shutil/</guid><description><![CDATA[
           
          
            <p><a href="https://aben20807.github.io/posts/20200420-shutil/"><img src="https://aben20807.github.io//img/default-header-img.jpg" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20200420-shutil/">Visit website to read the full article</a></p>
            <p>在 <a href="https://github.com/aben20807/local-judge">local-judge</a> 中遇到一個關於檔案權限 (Filemode) 的問題，因為檔案權限不同導致 git 比對的結果會顯示兩個輸入不同：</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">old mode <span style="color:#ae81ff">100644</span> new mode <span style="color:#ae81ff">100755</span> </code></pre></div></div><p>原本我是用 subprocess 在比對之前執行 <code>chmod</code>，效果跟我想的是一樣的。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">chmod <span style="color:#f92672">--</span>reference<span style="color:#f92672">=</span>answer_filepath output_filepath </code></pre></div></div><p>但是在解決另外一個複製的問題時，意外找到 <a href="https://docs.python.org/3/library/shutil.html#module-shutil">shutil</a>，這個工具提供一些檔案複製的函式，其中就有複製檔案權限的，而且竟然是 build-in module，因此我後來改用這個了。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">copymode(answer_filepath, output_filepath) </code></pre></div></div><p>感覺雖然自己已經算是很會找現有的工具了，但是還是很多東西沒看過呢 OuO</p>
        ]]></description></item><item><title>雜記</title><link>https://aben20807.github.io/posts/20200413-miscellaneous/</link><pubDate>Mon, 13 Apr 2020 21:06:45 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200413-miscellaneous/</guid><description><![CDATA[
            <p>明明事情很多，卻無所事事游手好閒。</p>
          
            <p><a href="https://aben20807.github.io/posts/20200413-miscellaneous/"><img src="https://lh3.googleusercontent.com/zG-bOAF04jTSbeO54kPpSXKcX5gxErxulpnFLLVKT9JLKBGiyOom_EVtKqKmaqElN83YhAdb3AZsmpSY-L2qj-MnSwqDFflzl7iYbho5Gm-PsXgma31Lrt2JNv50TgAmxOCu8Y9peoI=w2400" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20200413-miscellaneous/">Visit website to read the full article</a></p>
            <p>明明事情很多，卻無所事事游手好閒。</p> <h1 id="天氣">天氣</h1> <p>最近天氣很常太陽很大，但卻感覺不到熱，只有陽光刺眼，可能是因為在同時冷風狂吹。這種天氣老實說很像之前去的美西那樣，但我又深怕是因為時過多年，大腦已經擅自將記憶修改成這樣的天氣會讓我想到那裡。</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/zG-bOAF04jTSbeO54kPpSXKcX5gxErxulpnFLLVKT9JLKBGiyOom_EVtKqKmaqElN83YhAdb3AZsmpSY-L2qj-MnSwqDFflzl7iYbho5Gm-PsXgma31Lrt2JNv50TgAmxOCu8Y9peoI=w2400" alt="封面圖片 4/13 9:07 AM" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">封面圖片 4/13 9:07 AM</center>     </figcaption>   </figure> </p> <p>近期看到 FB 上許多認識的人去國外讀研究所，說認識其實是不算熟的人，僅僅是我們互相知道有對方這樣。感覺當初我沒有考慮是因為我太膽小了，害怕失敗，現在讀博之後這些問題又再一次出現，或許連留在成大也是上述那些問題，想自己未來要幹麻真難。</p> <p>也許因為教別人是我逃不開的舒適圈，習慣不了被人拯救的自己，相對的也限制我成長的速度。不過世界上的強者太多，就拿 Google Code Jam 2020 Round 1A 來說，在兩個半小時中我好不容易才擠出兩題的最小測資的暴力解，結束後以為我再也不會碰這個了 (x)，結果因為近期無力做事，所以去找了一下別人的講解，我只有聽邏輯的部份沒有看他的程式碼，他邏輯解釋蠻清晰的，所以我就照著這個邏輯寫，結果兩題就都拿到全對了。附上<a href="https://www.youtube.com/watch?v=OlpC2d1Odrs">講解影片連結</a></p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/Ft2HHye-9TCm-aHoORISDTXKbT8zaO1enDNm2jwl201gfX62yQafxhT1239-uQ7u_n7bpNujZ6u7LFJtrTLd-5hx0CF1Rw_XS4BfKhLqjHivSVMWJB7MjmNdWEjEZqDfLfhT1yr3Kec=w2400" alt="實力差距" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">實力差距</center>     </figcaption>   </figure> </p> <p>讓我想起這幾天實驗室學長再跟新生面試時提到</p> <blockquote> <p>重要的是想法，用什麼工具來實現都是其次</p> </blockquote> <h1 id="手遊-非業配">手遊 (非業配)</h1> <p>老實說，可能是因為最近沈迷新手遊，不過這款真的是我目前玩到我覺得最可以的手機遊戲，跟現在大部分都已經免洗化一兩年就砍掉的那種不一樣。它就是「明日方舟 Arknights」，老實說去年吧就看到另外一個學長在玩，那時候覺得塔防遊戲就都那樣，結果現在玩起來真的有驚豔到，界面流暢度一流 (可能是因為我之前都玩雷亞的每個都卡到爆炸)，玩法真的充滿變化，完全突破我的想像。</p> <p>最令我印象深刻的是它的自動打怪模式可以中途接手，所以如果玩到一半發現有更快的解法可以臨時接手改變陣行。</p> <p>可惜的是沒有掛機。但是，這遊戲讓我重新思考掛機的必要性，老實說掛機已經不算是遊玩的一部分，或許這是因為現在大家時間越來越零碎的產物，但是它犧牲了遊戲的體驗，玩家變成玩的是掛機模擬後的結果，中間的過程變得不再重要。是這遊戲讓我意識到過程的重要性。(雖然我是因為刪了不能掛機的 Evil Hunter Tycoon 才找到這款&hellip;)</p> <p>   <figure class="gphoto-media">     <img src="https://lh3.googleusercontent.com/8Hr9P9sQx12ty-3wFnjoatYcOlEngUYxyikB0FZOEaCinXu1okPH-8PiGvob4PP5_PouZ-elcnFTTuUUjpp8rKiDVZt11ZPsxMLugX5SuD68t2-uKchZpfRvdXAhTrmGl7qavQsiPBk=w2400" alt="兩隻能天使 OuO" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">兩隻能天使 OuO</center>     </figcaption>   </figure> </p> <h1 id="結語">結語</h1> <p>總之這幾天算是都在回課程的 email，然後主要進度都沒啥進展，paper 頗難寫，太多次都是手邊在忙時有想法，可是動筆時又卡住，可能跟兩個東西有關，第一，英文太爛，第二，太久沒寫東西，基於這些理由想到乾脆之後不定期發一下雜記 (雖然原本就是不定期 OuO)</p>
        ]]></description></item><item><title>20200202</title><link>https://aben20807.github.io/posts/20200202-20200202/</link><pubDate>Sun, 02 Feb 2020 11:14:20 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200202-20200202/</guid><description><![CDATA[
            <p>Palindrome!</p>
          
            <p><a href="https://aben20807.github.io/posts/20200202-20200202/"><img src="https://drive.google.com/uc?export=view&amp;id=12Y9AlAEvGKF87LKqiDW_5waH4inUmwQN" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20200202-20200202/">Visit website to read the full article</a></p>
            <p>Palindrome!</p> <p>想當年，高中程式設計上機考最後一題就是迴文，當時能帶大抄，剛好有迴文所以就直接貼上了， 記得打了一堆自己不太懂的程式碼。當時我左邊的同學霸氣不帶大抄，雖然他最後一題沒寫出來，不過卻令我相當佩服呢。</p> <p>啊，完蛋，是字串反轉還是迴文判斷啊@@，算了，小時候的事了(x</p> <p>因應時節(?)，所以寫了一個簡單的迴文檢測程式。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e"></span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[]) {     <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>s <span style="color:#f92672">=</span> strdup(argv[<span style="color:#ae81ff">1</span>]);     <span style="color:#66d9ef">int</span> len <span style="color:#f92672">=</span> strlen(s);     <span style="color:#66d9ef">int</span> mid <span style="color:#f92672">=</span> len <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>;     <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> mid; i<span style="color:#f92672">++</span>) {         <span style="color:#66d9ef">if</span> (s[i] <span style="color:#f92672">!=</span> s[len <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> i]) {             printf(<span style="color:#e6db74">&#34;Not Palindrome QuQ</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);             <span style="color:#66d9ef">goto</span> exit;         }     }     printf(<span style="color:#e6db74">&#34;Palindrome! OuO</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>); exit:     free(s);     <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; } </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ gcc -o palindrome palindrome.c $ ./palindrome <span style="color:#ae81ff">20200202</span> Palindrome! OuO $ ./palindrome <span style="color:#ae81ff">20200203</span> Not Palindrome QuQ </code></pre></div></div><p>下次迴文，要等到 20211202。再下一次，20300302。</p>
        ]]></description></item><item><title>Hugo v0.60</title><link>https://aben20807.github.io/posts/20191201-hugo-0-60/</link><pubDate>Sun, 01 Dec 2019 17:26:34 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20191201-hugo-0-60/</guid><description><![CDATA[
            <p>記錄一下 hugo 的改變 QuQ</p>
          
            <p><a href="https://aben20807.github.io/posts/20191201-hugo-0-60/"><img src="https://drive.google.com/uc?export=view&amp;id=1jp6mt3-fx1CAz5SIe5UPlUTuQTdAku9l" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20191201-hugo-0-60/">Visit website to read the full article</a></p>
            <p>記錄一下 hugo 的改變 QuQ</p> <h1 id="前言">前言</h1> <p>因為實在改的有點多東西，直接在 FB 發(抱)文(怨)又有點沒架構，所以乾脆來個小整理。另外這也不是全部，主要是我有遇到的 QuQ</p> <p>這裡主要是從 0.59 到 0.60   的一些記錄。</p> <h1 id="不同之處">不同之處</h1> <h2 id="parser">Parser</h2> <p>最大不同就是 markdown parser 從原本的 <a href="https://github.com/russross/blackfriday">Blackfriday</a> 換成使用 <a href="https://github.com/yuin/goldmark/">Goldmark</a> 為預設了。所以有一堆是用 regex 改的內容全都要再改規則＠＠，例如 <code>&lt;img xxx /&gt;</code> 這類的 self-closing tags   把最後的 <code>/</code> 去掉了變成 <code>&lt;img xxx&gt;</code>，所以剛剛是看不到圖片的。我已經改成讓 <code>/</code> 可有可無了&hellip;</p> <h2 id="footnote">Footnote</h2> <p>Footnote 的部份被大改了，產生的 html 跟原本的不太一樣，然後 0.60.1 好像有一些修改   ，所以可能還要再等等 QuQ，目前 snap 最新還在 0.60.0 所以還不能返回 (<code>footnoteAnchorPrefix</code>, <code>footnoteReturnLinkContents</code> 也還沒看到實作 )。之後還要加入 smooth scroll 讓捲動有動畫而不是直接跳 (這邊我也是用 regex)。</p> <h2 id="預設不可以在-markdown-中使用-html">預設不可以在 markdown 中使用 html</h2> <p>如果有加一些非 markdown 語法的 html 的話預設會變成 <code>&lt;!-- raw HTML omitted --&gt;</code> (例如從 google 雲端嵌入 pdf 檔案之類的)，如果想要修改這個預設   的話可以在 config.tmol 裡面加入</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">markup</span>] [<span style="color:#a6e22e">markup</span>.<span style="color:#a6e22e">goldmark</span>] [<span style="color:#a6e22e">markup</span>.<span style="color:#a6e22e">goldmark</span>.<span style="color:#a6e22e">renderer</span>] <span style="color:#a6e22e">unsafe</span> = <span style="color:#66d9ef">true</span> </code></pre></div></div><h1 id="後記">後記</h1> <p>J 個改變的速度其實有點小惱人，每次都想棄用 snap，但換個想法，這是走在世界的尖端啊 (x</p> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://github.com/gohugoio/hugo/releases/tag/v0.60.0">hugo v0.60.0 release</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://discuss.codecademy.com/t/no-ending-for-self-closing-link-element/201099">No ending &lsquo;/&rsquo; for self-closing link element?</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://github.com/gohugoio/hugo/issues/6551">Support footnote return links #6551</a>&#160; </p> </li> <li id="fn:4" role="doc-endnote"> <p><a href="https://github.com/yuin/goldmark/blob/54fc7c3/extension/footnote.go#L236-L247">yuin/goldmark:236-247</a>&#160; </p> </li> <li id="fn:5" role="doc-endnote"> <p><a href="https://gohugo.io/getting-started/configuration-markup/">Configure Markup</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Programming Sense (2)</title><link>https://aben20807.github.io/posts/20191118-programming-sense-2/</link><pubDate>Mon, 18 Nov 2019 11:36:33 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20191118-programming-sense-2/</guid><description><![CDATA[
            <p>結果因為太多項了導致右邊的目錄超出邊界，所以還是要拆成兩篇。QuQ</p>
          
            <p><a href="https://aben20807.github.io/posts/20191118-programming-sense-2/"><img src="https://images.unsplash.com/photo-1539392253103-78d190be0116?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=2689&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20191118-programming-sense-2/">Visit website to read the full article</a></p>
            <p>結果因為太多項了導致右邊的目錄超出邊界，所以還是要拆成兩篇。QuQ</p> <p><a href="https://aben20807.github.io/posts/20191116-programming-sense/">{{ 上一篇傳送門：Programming Sense (1) }}</a></p> <h1 id="抽像化-abstractionhttpsenwikipediaorgwikiabstraction_computer_science">抽像化 (<a href="https://en.wikipedia.org/wiki/Abstraction_(computer_science)">Abstraction</a>)</h1> <p>盡量的抽象化自己的程式，最簡單的方式就是把相關的程式碼包成一塊，而不是散在主函式中，包起來的動作通常稱作封裝 (<a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)">Encapsulation</a>)，也有實作成 ADT (<a href="https://en.wikipedia.org/wiki/Abstract_data_type">Abstract data type</a>) 一說。</p> <p>主要目的就是讓程式碼可重複使用，並讓簡化主函式的流程。抽象化過程要想著如何讓別人 (包括未來的自己) 使用自己的程式碼。可以透過將函式切成一個函式只做一件事讓可重複利用率提高。</p> <p>例如實作一個 Queue 時，可以將存放的結構 (陣列)、操作指標 (front, rear) 放在同一個 <code>struct</code> 中，甚至將 enqueue 和 dequeue 做成函式指標 (function pointer) 一起放入 <code>struct</code> 中。注意，以下程式碼尚未測試過&hellip;</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// 結構定義 </span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> Queue {   <span style="color:#66d9ef">char</span> que[<span style="color:#ae81ff">26</span>];   <span style="color:#66d9ef">int</span> front;   <span style="color:#66d9ef">int</span> rear;   <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>enque)(<span style="color:#66d9ef">struct</span> Queue <span style="color:#f92672">*</span>, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> a);   <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>deque)(<span style="color:#66d9ef">struct</span> Queue <span style="color:#f92672">*</span>); }; <span style="color:#75715e">// 初始化 </span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> Queue <span style="color:#f92672">*</span><span style="color:#a6e22e">init_queue</span>() {   <span style="color:#66d9ef">struct</span> Queue <span style="color:#f92672">*</span>ret <span style="color:#f92672">=</span> calloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> Queue), <span style="color:#ae81ff">1</span>);   ret<span style="color:#f92672">-&gt;</span>front <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;   ret<span style="color:#f92672">-&gt;</span>rear <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;   ret<span style="color:#f92672">-&gt;</span>enque <span style="color:#f92672">=</span> enque; <span style="color:#75715e">// 須另外定義 enque 函式 </span><span style="color:#75715e"></span>  ret<span style="color:#f92672">-&gt;</span>deque <span style="color:#f92672">=</span> deque; <span style="color:#75715e">// 須另外定義 deque 函式 </span><span style="color:#75715e"></span>  <span style="color:#66d9ef">return</span> ret; } <span style="color:#75715e">// 使用 </span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {   <span style="color:#66d9ef">struct</span> Queue <span style="color:#f92672">*</span>q <span style="color:#f92672">=</span> init_queue();   q<span style="color:#f92672">-&gt;</span>enque(q, <span style="color:#e6db74">&#39;A&#39;</span>);   q<span style="color:#f92672">-&gt;</span>deque(q);   <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; } </code></pre></div></div><h1 id="寫程式的過程">寫程式的過程</h1> <h2 id="思考">思考</h2> <p>不先思考就直接寫程式的話是很危險的，通常最後很容易落得需要打掉重練的情況，預先思考可以避免掉一些盲點。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1uYiTbRQ-bmFDkJE-MC_z-HyemZzzz6kA" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <h3 id="待解決的問題">待解決的問題</h3> <p>首先得理解題目或問題的要求，如果有提供範例輸入輸出的話請一定要按照給定的格式，不能多也不能少。不過這在現實中比較少見，很多情況是要去設計防呆的。</p> <p>直覺的解法一定有，但是通常會有大量的迴圈拖慢程式執行，儘管現在的硬體好到讓我們感覺不出差異，但是還是需要正視這個問題，因為當需求一擴大，效能瓶頸就會是一個大問題。</p> <p>以下題目來自 108-1 成大資工 資料結構作業三 (這裡放上題目，不過我不打算解它，雖然這樣會比較完整，可是我真的沒空 QuQ)</p>   <h3 id="是否能簡化">是否能簡化</h3> <p>以範例問題來說，題目會給定 N 個團體，每個群體的人數不定。最直觀的方法是使用二維陣列存放這 N 個團體各自的成員，要檢查 A 是否屬於某個群體時使用雙層迴圈去搜尋這個二維陣列，都找不到則代表不屬於任何團體。</p> <p>然而這樣每次搜尋都要耗費不少資源，甚至需要不少程式碼。更好的作法可以對題目的細節做解讀，題目提到成員只會有 A~Z 所以我們可以直接產生一個長度為 26 的整數陣列 <code>people_group_ids</code> (更好的方式是使用 dict 不過 C 沒有內建) 來存放這 26 的人的團體編號，為了方便初始化，可以讓 0 代表沒有團體接著往上累加，讀取到範例輸入讀取到 3 A B C 時，在陣列的 0 1 2 位置上填入 1，等到要查詢 A 的團體編號時就可以使用 <code>people_group_ids[0]</code> 來查詢了，原本 $O(nm)$ 的複雜度直接降為 $O(1)$，程式碼上也較為清楚。另外關於 A 對應 0 要怎麼寫，這就需要對字元有一些了解，可以觀察一下 <a href="https://en.wikipedia.org/wiki/ASCII">ASCII 表格</a>，<code>person = 'B';</code> 的話我們只需要使用 <code>person - 'A'</code>; 就可以得到 <code>1</code> 了，把這個操作放到函式中增加可讀性的話更棒如下。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">get_group_id</span>(     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> people_group_ids,     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> person) {   <span style="color:#66d9ef">return</span> people_group_ids[person <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;A&#39;</span>]; } <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">set_group_id</span>(     <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> people_group_ids,     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> person,     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> group_id) {   people_group_ids[person <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;A&#39;</span>] <span style="color:#f92672">=</span> group_id; } </code></pre></div></div><p>插隊的話只需要從 queue 的頭找 <code>group_id</code> 相同的人即可。</p> <h3 id="事前設計">事前設計</h3> <p>這裡表達的不是一定要畫出 UML 或是先做好完整架構圖，而是有一點架構就可以，有簡易的流程圖當然更棒，但是我自己通常會在腦中進行，遇到比較大型的才會拿一張紙畫一下流程，這裡推薦 <a href="https://www.draw.io/">draw.io</a> 這個完美的應用程式，可以應付各種圖。</p> <h2 id="小步前進持續驗證">小步前進，持續驗證</h2> <blockquote> <p>寫大程式要像西敏寺那樣的大教堂一樣，先從一個功能完整的小教堂開始，然後把小部分拆掉蓋個更大更豪華的；如果一次就想蓋個超大的教堂，最後可能弄成一團廢墟，連禮拜的功能都沒有。  &mdash; Yoda 生活筆記 (Lee You Tang)  </p> </blockquote> <p>等萬事俱備只欠打扣時我們就可以開始寫程式囉，最有效率的流程就是小步前進逐步驗證，不要一次就把程式打完，這樣執行發現跟結果不一樣時，問題就會非常難找，是輸入錯誤還是中間的邏輯錯誤或是輸出錯誤，若沒有逐步驗證的話，哪個階段出問題真的很難定位。</p> <p>我的做法會先將輸入部分完成，並且印出結果確認是否跟想像中的結果一模一樣，這裡必須要注意是否有奇怪的換行，或是輸出的順序不對等等問題，因為 C 的輸入會有許多隱藏的陷阱，也許是把空格也當成一個成員之類的。操作的指令也是把讀到的直接印出來確認。驗證完畢才繼續往下一步走。 細心檢查每一個魔鬼細節才能達到最終目的。</p> <p>強烈建議每一次的驗證完後搭配 git commit 把階段性成果記錄下來。</p> <p>enque 跟 deque 一樣分開驗證，這時候我們需要加上一些輔助的程式碼幫助我們印出 queue 的內容，來保證每次的操作都是正確的。例如：<code>print_queue()</code>。</p> <h1 id="除錯-debug">除錯 (Debug)</h1> <h2 id="編譯訊息">編譯訊息</h2> <p>編譯器產生的訊息相當重要，而且不是只有 Error 重要，Warning 也是一大關鍵，所以千萬不要忽略這些警告，反而要將這些警告視為錯誤，這裡推薦在編譯的時候加上 <code>-Wall -Werror</code> 這樣那些警告就會導致編譯錯誤了。</p> <h2 id="設計測資">設計測資</h2> <p>題目給的測資一定很少，但是實際會遇到的情況相當多，所以一定要多設計幾組測試資料，可以利用上一篇提到的重新導向 (Redirection) 的方式才不用每次都要重新手打，照理說可以再加上 Makefile 來幫忙，可以參考我的另外一篇  。</p> <h2 id="註解大法">註解大法</h2> <p>用註解部份程式碼來找出錯誤是最簡單的方式，但這我通常是用來幫別人抓錯的時候會用，因為我不確定其是否使用逐步驗證的方式，因此只有結果錯誤，但是中間的過程無法直接看出是哪邊有問題，利用註解的方式隔離未驗證的程式碼來逐步比對。</p> <h2 id="printf-好夥伴"><code>printf</code> 好夥伴</h2> <p><code>printf()</code> 是一個相當神奇且好用的函式，其底層非常複雜歡迎有興趣的人可以參考  。我的習慣是在實作不同資料結構時都會做一個對應的函式來印出其內容以方便驗證。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">print_queue</span>(<span style="color:#66d9ef">struct</span> Queue <span style="color:#66d9ef">const</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> q) {   <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">26</span>; i<span style="color:#f92672">++</span>) {     printf(<span style="color:#e6db74">&#34;%c &#34;</span>, q<span style="color:#f92672">-&gt;</span>que[i]);   }   printf(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>); } </code></pre></div></div><h2 id="gdb">GDB</h2> <p>GDB (<a href="https://www.gnu.org/software/gdb/">The GNU Project Debugger</a>) 是 segmentation fault 發生時的好夥伴，它可以幫助你找出程式是在哪裡發生錯誤，這樣就可以去找出對應的解決方法。關於原生的 GDB 有點樸素這點我之前有寫過一篇介紹 <a href="https://github.com/cyrus-and/gdb-dashboard">GDB dashboard</a> 可以參考  。</p> <h1 id="後記">後記</h1> <p>突然發現自己好像也不是這麼悠閒，不過還是把這些趕出來了，可能會有錯 (範例打錯或錯字) 再請大家幫忙抓漏 了，感恩 QuQ。很多部份也都沒有附上範例，這可能之後有需要的話可以補上。歡迎討論也歡迎在我有空的時候找我幫忙 review 程式碼，這對我來說也是一種成長的來源吧。身邊如果有人願意幫你 review 的話請盡量把握，也在此感謝曾經幫我看過程式碼的貴人們。</p> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://yodalee.blogspot.com/2019/11/rust-visitor.html">把一顆樹寫出來是會有多難</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://aben20807.github.io/posts/20190216-makefile-for-testing/">Makefile for Testing</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://www.maizure.org/projects/printf/index.html?fbclid=IwAR2fPTM7CxfIWD7pC_crmp-UFDPG2RZ7BH-62e-TCjPmxhzwLyT_D7oEYak">Tearing apart printf()</a>&#160; </p> </li> <li id="fn:4" role="doc-endnote"> <p><a href="https://aben20807.blogspot.com/2018/06/1070618-gdb-gdb-dashboard.html">107.06.18 好看的 gdb, gdb-dashboard</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Programming Sense (1)</title><link>https://aben20807.github.io/posts/20191116-programming-sense/</link><pubDate>Sat, 16 Nov 2019 08:53:13 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20191116-programming-sense/</guid><description><![CDATA[
            <p>主要是我自己編寫邊學慢慢累積的，說真的也找不太到相關的資源，要搜尋也不知道下什麼關鍵字，問別人其實也很難在一時半刻裡解釋清楚，所以就拿來發一篇吧 OuO</p>
          
            <p><a href="https://aben20807.github.io/posts/20191116-programming-sense/"><img src="https://images.unsplash.com/photo-1539392156992-268f1e62f111?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=2689&amp;q=80" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20191116-programming-sense/">Visit website to read the full article</a></p>
            <p>主要是我自己編寫邊學慢慢累積的，說真的也找不太到相關的資源，要搜尋也不知道下什麼關鍵字，問別人其實也很難在一時半刻裡解釋清楚，所以就拿來發一篇吧 OuO</p> <h1 id="前言">前言</h1> <p>期中加資格考的爆炸禮拜終於結束，其實比我想得還要容易，雖然我都很沒把握，因為我幾乎不狂寫考古題，而是以觀念取勝，有沒有取到就不確定了。</p> <p>寫程式很簡單，拿來解決問題就有些難度，最難的是用優雅易懂且嚴謹的程式碼來解決問題，寫得好絕對遠遠好過寫得快。</p> <p>關於這個主題，其實很早就打算寫了，只是一直擱置連架構都沒出來，直到最近有幫同學看一下程式碼，所以覺得這個觀念還是頗為重要，所以整理一下發個文，主要也希望可以幫助比較沒經驗的人，但也不限於此，我相信也會有畢業於資訊工程相關科系而沒有這些觀念。</p> <p>當然在整個程式界我也不是老手，幾乎沒在開源貢獻，更沒參與過業界，所以很多的概念是我在大學時期慢慢累積起來的，主要來源就是一些開源的專案還有自身的經驗，不能說涵蓋得很全面，也不是說我這套最棒了大家看了之後一定要照這些規則，這篇從來就不是規則，而是我在寫了幾年程式後整理出來讓自己開發更為流暢的一些想法，希望大家能夠來互相討論給與意見。</p> <p>架構會以不同的主題當作探討，雖然全部都是在講 programming sense，內容因為相當廣泛，切成不同文章又會讓某些部分零碎化，所以請善用標題跟右方的目錄來幫助閱讀。順序以 &ldquo;工具&rdquo;，&ldquo;coding style&rdquo;，&ldquo;習慣養成&rdquo;，&ldquo;抽像化&rdquo;，&ldquo;寫程式的過程&rdquo;，&ldquo;除錯&rdquo;。並主要以 C 語言當作講解範例。</p> <p>雖然雜但是請記得一個中心思想：</p> <blockquote> <p>用程式碼來溝通 (Communication Through Code)</p> </blockquote> <h1 id="工具">工具</h1> <p>「工欲善其事，必先利其器」《論語·衛靈公》 善用工具真的頗為重要，使用得當可以大量減少重複性的動作，如果是寫一般的小程式的話我會建議可以玩看看 <a href="https://en.wikipedia.org/wiki/Vim_(text_editor)">VIM</a> 設定可以參考<a href="https://github.com/aben20807/aben20807.vim">我的設定</a>或直接問我，可以大量減少手部的負擔。大型一點的我會推薦 <a href="https://code.visualstudio.com/">VSCode</a>，因為內容會偏多所以我就用一個副標題來說明了。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1kYWGLrrnkeQaVo2OwbMZQddDu6iIn-do" alt="vi&hellip; " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">vi&hellip; </center>   </figcaption> </figure>   </p> <h2 id="vscode">VSCode</h2> <p>VSCode 其實不太像一般的 IDE，它更像一個單純的文字編輯器，只是有相當多好用的外掛功能，基本的包含了對各種語言的程式碼的關鍵字 highlight、檔案架構樹、搜尋取代功能、編碼轉換、coding style 自動重新排版。以下附上一些我目前服役中的外掛功能，使用方法就請各位自己前往查看了：</p> <ul> <li><code>alefragnani.bookmarks</code> <a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks">🔗</a>： 可以在想要標記的程式碼上加入書籤，這個在瀏覽大型專案需要跳來跳去 trace 程式碼下可以幫很大的忙，至少不用再記是第幾行了。</li> <li><code>coenraads.bracket-pair-colorizer</code> <a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">🔗</a>：連結對應的括號，這在括號一堆的語言 (C, C++, Java, Lisp) 相當有幫助，可以一眼就看出在哪個有效範圍 (scope)。</li> <li><code>streetsidesoftware.code-spell-checker</code> <a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker">🔗</a>：幫忙檢查英文拼字。</li> <li><code>tabnine.tabnine-vscode</code> <a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode">🔗</a>：程式碼補全建議。</li> <li><code>gruntfuggly.todo-tree</code> <a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree">🔗</a>：收集註解中有 <code>TODO</code> 標籤的地方。</li> <li><code>donjayamanne.githistory</code> <a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory">🔗</a>：Git 系列。</li> <li><code>eamodio.gitlens</code> <a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">🔗</a>：Git 系列。</li> <li><code>zhuangtongfa.material-theme</code> <a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">🔗</a>：耐看主題。</li> <li><code>vscode-icons-team.vscode-icons</code> <a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">🔗</a>：美美的檔案圖示。</li> </ul> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1YrpZ2ktFpMxR3Y7MZM0zBrt4DtRFNmga" alt="名稱拿去搜尋即可" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">名稱拿去搜尋即可</center>   </figcaption> </figure> </p> <h2 id="shell">Shell</h2> <p>很多指令都是可以幫助懶惰的人，目前我還沒有遇過我想要但是沒有的指令。</p> <h3 id="重新導向-redirection">重新導向 (Redirection)</h3> <p>寫程式時會常使用重新導向 (Redirection) 的方式來減少標準輸入 (stdin) 的次數，用法也相當直觀，只需要先將測試輸入先打在一份文檔 (例如：input.txt) 中，再使用以下指令執行程式即可。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ./queue &lt; input.txt </code></pre></div></div><p>若要把標準輸出 (stdout) 存到另一份文件時呢，當然也是使用重新導向。這適合在輸出很多時或是需要搜尋結果時使用。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ./queue &lt; input.txt &gt; output.txt </code></pre></div></div><h1 id="coding-style">Coding Style</h1> <p>這是一個看似微小卻非常重要的細節，尤其是需要別人幫忙 review 甚至是合作時都需要事先講好共用的 coding style，一來格式統一閱讀時不需要轉換，二來可以避免因為工具自動調整造成不必要的程式改動紀錄。</p> <p>看別人的程式碼時最怕遇到沒有縮排的&hellip;</p> <p>這裡涵蓋的範圍包括了縮排、空格、括號、命名。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1srj3r8VaQ4_csG69Lr3vQD_ENvjEXmJH" alt="pythonize &hellip; 別亂學 XDD" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">pythonize &hellip; 別亂學 XDD</center>   </figcaption> </figure>   </p> <h2 id="google-coding-style">Google Coding Style</h2> <p>若要偷懶，強烈建議就直接用最多人使用的就好，很多工具都有辦法幫忙重新排版程式碼，這裡展示如何用 VSCode 來設定 Google 使用的 coding style，規定的格式細節可參考 <a href="https://google.github.io/styleguide/cppguide.html">Google C++ Style Guide</a>。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1lCoOvNF61c1WaNoZ2MhO9QioANQS3HUS" alt="開啟設定" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">開啟設定</center>   </figcaption> </figure> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1RCaxBhfaLrVM84FoD3ekeu4AmtBhnxLJ" alt="搜尋 format style，將欄位改成 Google" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">搜尋 format style，將欄位改成 Google</center>   </figcaption> </figure> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1rALSINyYBW1JuCiWsj1IVSLhiI_-_rXd" alt="使用格式化可以用右鍵或是直接按對應的快捷鍵" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">使用格式化可以用右鍵或是直接按對應的快捷鍵</center>   </figcaption> </figure> </p> <h1 id="習慣養成">習慣養成</h1> <blockquote> <p>傻瓜都可以寫出機器能讀懂的代碼，但只有專業程序員才能寫出人能讀懂的代碼。  &mdash; 李先靜 《系統程序員成長計劃》 </p> </blockquote> <h2 id="coding-style-again">Coding Style Again</h2> <p>用工具是很方便沒錯，不過盡量還是養成習慣而不依賴工具，這裡介紹幾個比較常見的格式：</p> <h3 id="空行-blank">空行 (Blank)</h3> <p>把所有操作寫在同一個函式裡面通常不容易辦到，因此不免會有某些區塊在做相關的事，合理使用空行能夠讓讀者很容易就看出程式碼的這些區塊的用途。</p> <h3 id="縮排-indent">縮排 (Indent)</h3> <p>我以前偏好 4 個空格，但是最近有往兩個空格移動的趨勢，另外 Google 也是以 2 個空格為主。然而 Linux kernel 是使用 tab，這裡其實只要跟合作的夥伴們講好統一使用一種即可，就不提有統計指出用 space 賺的錢比用 tab 的人多了  。</p> <h3 id="if-statement">If Statement</h3> <h4 id="加上空格們">加上空格們</h4> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">if</span>(condition) {   <span style="color:#75715e">// Bad </span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (condition){   <span style="color:#75715e">// Bad </span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(condition){    <span style="color:#75715e">// Doubly bad </span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (condition) {  <span style="color:#75715e">// Good </span></code></pre></div></div><h4 id="加上大括號們">加上大括號們</h4> <p>這裡我會比較嚴格規定自己，就算是只有一行也要加，這樣比較方便擴充，例如臨時要加上 <code>printf</code> 時就不用再加。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">if</span> (condition) {   foo; } <span style="color:#66d9ef">else</span> {   bar; } </code></pre></div></div><h3 id="loop-statement">Loop Statement</h3> <h4 id="加上空格們-1">加上空格們</h4> <p>注意 <code>;</code> 前不要後要。  這裡用 <code>i++</code> 或 <code>++i</code> 其實基本上沒有效能差異  ，編譯器會幫你最佳化，我更喜歡 <code>i++</code> 因為要改成 <code>i+=2</code> 之類的比較方便，另外也是有 <code>i-=-1</code>   這種邪教&hellip;</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> some_number; i<span style="color:#f92672">++</span>) {   printf(<span style="color:#e6db74">&#34;OuO</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>); } </code></pre></div></div><h3 id="pointer-變數宣告">Pointer 變數宣告</h3> <p><code>int*x;</code>、<code>int *x;</code>、<code>int* x</code>、<code>int * x</code> 都是可編譯的寫法，在 C 中 <code>int *x;</code> 更為常用。C++ 中反而是 <code>int* x;</code>  。</p> <h3 id="命名-naming-convention">命名 (Naming Convention)</h3> <h4 id="檔案名稱變數-variable函式-function">檔案名稱、變數 (Variable)、函式 (Function)</h4> <p>使用 <a href="https://en.wikipedia.org/wiki/Snake_case">snake_case</a> 並取有上下文關係的名字，例如 <code>flag</code>、<code>count</code> 就沒有上下文，會不知道這個變數要用來存放什麼東西。  e.g., <code>http_server_logs.h</code>、<code>table_name</code></p> <p>Google 的函式也可用 UpperCamelCase，但我個人比較習慣 snake_case，另外函式須以動詞開頭以表明動作。  e.g., <code>add_table_entry</code></p> <h4 id="struct-class">Struct, Class</h4> <p>使用 <a href="https://en.wikipedia.org/wiki/Camel_case">UpperCamelCase</a>  e.g., <code>UrlTableProperties</code>, <code>TableInfo</code></p> <h4 id="常數-constant">常數 (Constant)</h4> <p>使用全大寫並以 <code>_</code> 連接。  e.g., <code>MAX_ROW_SIZE</code></p> <h2 id="初始化-initialize">初始化 (Initialize)</h2> <p>寫 C 語言時要注意變數的初始化，以免結果跟自己所想的不一樣，這是因為在規格書中的定義中提到，只有全域變數或是靜態 (static) 變數會被初始化，其他未初始化的則不會有明確的初始值。 C99 §6.7.8.10  。在陣列的初始化若要全部定義為 <code>\0</code>，我們可以直接在宣告中使用 <code>{}</code> 即可，因為規格書中有規定若初始化的個數不足則會比照靜態變數 C99 §6.7.8.21  :</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// 每個變數宣告時搭配初始化 </span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#75715e">// 陣列初始化以下都可以 </span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> que[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;\0&#39;</span>}; <span style="color:#66d9ef">char</span> que[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>}; <span style="color:#66d9ef">char</span> que[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">=</span> {}; </code></pre></div></div><h2 id="註解-comment">註解 (Comment)</h2> <p>請盡量使用英文來註解，因為英文比較不像中文那樣一詞多義，可以較明確的敘述，若執意要用中文就需要注意編碼，目前主流應該是使用 UTF8。內容部份可以多記錄一點上下文而不是僅僅該行程式碼做了什麼事，通常註解會拿來說明整個函式，會需要一行一行註解的情況比較少並會用高可讀性的程式馬來替代。我之前有找到一篇非常詳盡的指南   可以參考看看 (雖然我也沒有仔細讀完就是了＠＠</p> <p>寫法上注意空格即可。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// OuO </span><span style="color:#75715e"></span><span style="color:#75715e">/* OuO */</span> </code></pre></div></div><h2 id="副作用-side-effect">副作用 (Side Effect)</h2> <p>副作用 (<a href="https://en.wikibooks.org/wiki/C_Programming/Side_effects_and_sequence_points">Side Effect</a>) 聽起來好像很不妙，簡單來說就是會在函式內部修改到參數的情況。其實這在一般程式語言中頗為常見，沒有這項功能的話程式會變得相當難寫，例如 Functional language 寫起來就頗耗費腦力。</p> <h3 id="在函式宣告時點出副作用">在函式宣告時點出副作用</h3> <p>但是在開發過程需要適時隔離變化，C 語言提供了 <code>const</code> 修飾字來標示該參數在函式中不會被修改。以下範例中的 <code>rear</code> 和 <code>orig</code>  不會被修改到內容，所以可以利用 <code>const</code> 來提醒函式呼叫者該參數不會被改動，反之 <code>front</code> 就有機會被改動。詳細的排列組合可以參考  。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">deque</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>orig, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>front, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>rear) {   <span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>front <span style="color:#f92672">==</span> <span style="color:#f92672">*</span>rear) {     printf(<span style="color:#e6db74">&#34;Empty&#34;</span>);   } <span style="color:#66d9ef">else</span> {     printf(<span style="color:#e6db74">&#34;%c</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, orig[<span style="color:#f92672">*</span>front]);     <span style="color:#f92672">*</span>front <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>front <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;   } } </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// rear, orig 皆是指向一個唯讀參數 (read-only parameter) </span><span style="color:#75715e">// 的唯讀指標 (read-only location) </span><span style="color:#75715e">// 若嘗試在函式中修改 `rear` 或 `*rear` 就會得到編譯錯誤 </span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">deque</span>(     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> orig,     <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>front,     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> rear) { </code></pre></div></div><h3 id="需要修改的才傳入其指標-pointer">需要修改的才傳入其指標 (Pointer)</h3> <p>這裡要先宣導一個觀念就是 C 語言只有 Pass By Value，也就是只會複製傳入變數的數值，傳入指標也是一樣，我們只是傳入了指標這個數值，而透過這個指標的取值 (dereference) 可以改動對應的記憶體位置 C99 §6.5.2.2.4  。而因為 C 的函式回傳值只限一個，所以大部分會使用修改參數的方式來回傳數值，而真正的回傳值就用來表示函式是否正確執行，否則就回傳對應的錯誤碼。</p> <p>上面那樣改起來好像太奇葩，更好的解決方式是要先思考，把將要在函式內部更動變數在傳入其指標，其餘的只須把數值傳進去即可。當然若是傳入陣列就還是需要指標就像 <code>orig</code>。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// 因為最後一個參數不會變動而且只需要其數值 </span><span style="color:#75715e">// 所以直接以常數傳入，當然函式內部就不需要取值了 </span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">deque</span>(     <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">const</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> orig,     <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>front,     <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> rear_value) {   <span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>front <span style="color:#f92672">==</span> rear_value) {     printf(<span style="color:#e6db74">&#34;Empty&#34;</span>);   } <span style="color:#66d9ef">else</span> {     printf(<span style="color:#e6db74">&#34;%c</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, orig[<span style="color:#f92672">*</span>front]);     <span style="color:#f92672">*</span>front <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>front <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;   } } </code></pre></div></div><h2 id="多檔案">多檔案</h2> <h3 id="避免重複-include">避免重複 include</h3> <p>專案擴張下，必然會用到多檔案，這時候就會拆成很多的 <code>.h</code>, <code>.c</code> 檔，<code>.h</code> 用來作為界面的溝通，這時候一定要使用 macro (<a href="https://en.wikipedia.org/wiki/Include_guard">Include guard</a>) 防止重複 include。以下為檔名為 <code>file.h</code> 的內容範例：<code>FILE_H</code>, <code>_FILE_H</code>, <code>__FILE_H__</code> 都有人用，但一般以第一種為主即可。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#ifndef FILE_H </span><span style="color:#75715e">#define FILE_H </span><span style="color:#75715e"></span> <span style="color:#75715e">/* ... Declarations etc here ... */</span> <span style="color:#75715e">#endif </span><span style="color:#75715e">/* FILE_H */</span><span style="color:#75715e"> </span></code></pre></div></div><h3 id="用-static-修飾內部函數">用 <code>static</code> 修飾內部函數</h3> <p>如果在多檔案下函數並不是要開放給其他檔案呼叫時，請加上 <code>static</code> 來保證只有當前檔案內部可以看到那個函數。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">my_local_function</span>() {   printf(<span style="color:#e6db74">&#34;OuO</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>); } </code></pre></div></div><h2 id="避免使用危險的函式們">避免使用危險的函式們</h2> <p>C 語言給予使用者相當大的彈性但用起來需要知道自己在做什麼，否則會有許多安全性漏洞，有一些函式很容易造成誤用，連資深工程師也常用錯，因此蠻多專案直接把不安全的函式禁用，例如 Git  ，Intel 的 safestringlib 也有一個完整列表  。以下給出一些較常見的。</p> <ul> <li><code>gets()</code>   C11 已經不支援，請改用 <code>fgets()</code></li> <li><code>strcpy()</code> 沒有長度偵測。</li> <li><code>strncpy()</code> 有長度但是不會在結尾補上 <code>\0</code>  。</li> <li><code>ato*()</code> 改用 <code>strto*()</code> 利於錯誤處理 C99 §7.20.1  。</li> </ul> <h2 id="其他習慣">其他習慣</h2> <ul> <li>盡量不使用全域變數</li> </ul> <p><a href="https://aben20807.github.io/posts/20191118-programming-sense-2/">{{ 下一篇傳送門：Programming Sense (2) }}</a></p> <section class="footnotes" role="doc-endnotes"> <hr> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://twitter.com/tpope/status/1172743697315835904">Tim Pope: when people ask me to recommend a text editor</a>&#160; </p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://www.reddit.com/r/ProgrammerHumor/comments/2wrxyt/a_python_programmer_attempting_java/">A Python programmer attempting Java</a>&#160; </p> </li> <li id="fn:3" role="doc-endnote"> <p><a href="https://blog.csdn.net/absurd/article/details/3181222">系統程序員成長計劃-走近專業程序員(下)</a>&#160; </p> </li> <li id="fn:4" role="doc-endnote"> <p><a href="https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/">Developers Who Use Spaces Make More Money Than Those Who Use Tabs</a>&#160; </p> </li> <li id="fn:5" role="doc-endnote"> <p><a href="https://stackoverflow.com/a/24887/6734174">Is there a performance difference between i++ and ++i in C?</a>&#160; </p> </li> <li id="fn:6" role="doc-endnote"> <p><a href="https://twitter.com/DasSurma/status/1192736235447619584"><code>i-=-1</code> is hipster, expressive and symmetric</a>&#160; </p> </li> <li id="fn:7" role="doc-endnote"> <p><a href="http://www.stroustrup.com/bs_faq2.html#whitespace">Is <code>int* p;</code> right or is <code>int *p;</code> right?</a>&#160; </p> </li> <li id="fn:8" role="doc-endnote"> <p><a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf">C99 規格書 ISO/IEC 9899:TC3</a>&#160; </p> </li> <li id="fn:9" role="doc-endnote"> <p><a href="http://antirez.com/news/124">Writing system software: code comments.</a>&#160; </p> </li> <li id="fn:10" role="doc-endnote"> <p><a href="https://stackoverflow.com/a/1143272">What is the difference between const int*, const int * const, and int const *?</a>&#160; </p> </li> <li id="fn:11" role="doc-endnote"> <p><a href="https://github.com/git/git/blob/master/banned.h">git/banned.h</a>&#160; </p> </li> <li id="fn:12" role="doc-endnote"> <p><a href="https://github.com/intel/safestringlib/wiki/SDL-List-of-Banned-Functions">SDL List of Banned Functions</a>&#160; </p> </li> <li id="fn:13" role="doc-endnote"> <p><a href="https://cwe.mitre.org/data/definitions/242.html">CWE-242: Use of Inherently Dangerous Function</a>&#160; </p> </li> <li id="fn:14" role="doc-endnote"> <p><a href="https://devblogs.microsoft.com/oldnewthing/?p=36773">How can code that tries to prevent a buffer overflow end up causing one?</a>&#160; </p> </li> </ol> </section>
        ]]></description></item><item><title>Numpy Array Truncate</title><link>https://aben20807.github.io/posts/20191022-numpy-array-truncate/</link><pubDate>Tue, 22 Oct 2019 20:27:13 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20191022-numpy-array-truncate/</guid><description><![CDATA[
            <p>踩個雷 OuO</p>
          
            <p><a href="https://aben20807.github.io/posts/20191022-numpy-array-truncate/"><img src="https://aben20807.github.io//img/default-header-img.jpg" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20191022-numpy-array-truncate/">Visit website to read the full article</a></p>
            <p>踩個雷 OuO</p> <p>numpy 的 <code>trunc</code> [1] 好像沒有針對小數點以下幾位做設定，一次只能全砍變成整數，可是又不能用 <code>around</code> [2] 解決。</p> <p>網路上有找到解法 [3]：很直覺，就是先乘大，truncate 後再除</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">trunc</span>(values, decs<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>):     <span style="color:#66d9ef">return</span> np<span style="color:#f92672">.</span>trunc(values<span style="color:#f92672">*</span><span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>decs)<span style="color:#f92672">/</span>(<span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>decs) </code></pre></div></div><p>不過這有個問題，可以從以下程式觀察：</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">trunc</span>(a, decimals<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>):     <span style="color:#66d9ef">return</span> np<span style="color:#f92672">.</span>trunc(a<span style="color:#f92672">*</span><span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>decimals)<span style="color:#f92672">/</span>(<span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>decimals) arr <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>float32(np<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">1.123456789</span>, <span style="color:#ae81ff">2.234567890</span>, <span style="color:#ae81ff">3.45678901</span>])) print(arr) print(arr<span style="color:#f92672">.</span>dtype) arr_tr6 <span style="color:#f92672">=</span> trunc(arr, <span style="color:#ae81ff">6</span>) print(arr_tr6) print(arr_tr6<span style="color:#f92672">.</span>dtype) arr_tr20 <span style="color:#f92672">=</span> trunc(arr, <span style="color:#ae81ff">20</span>) print(arr_tr20) print(arr_tr20<span style="color:#f92672">.</span>dtype) </code></pre></div></div><p>輸出如下：</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">[1.1234568 2.2345679 3.456789 ] float32 [1.123456 2.234567 3.456789] float64 [1.1234568357467651 2.234567880630493 3.456789016723633] object </code></pre></div></div><p>不對啊，型別怎麼不一樣了 OAO</p> <p>所以如果不想要型別被改動的話可能要在最後轉成原來的型別</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">trunc</span>(a, decimals<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>):     <span style="color:#66d9ef">return</span> (np<span style="color:#f92672">.</span>trunc(a<span style="color:#f92672">*</span><span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>decimals)<span style="color:#f92672">/</span>(<span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>decimals))<span style="color:#f92672">.</span>astype(a<span style="color:#f92672">.</span>dtype) arr <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>float32(np<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">1.123456789</span>, <span style="color:#ae81ff">2.234567890</span>, <span style="color:#ae81ff">3.45678901</span>])) print(arr) print(arr<span style="color:#f92672">.</span>dtype) arr_tr6 <span style="color:#f92672">=</span> trunc(arr, <span style="color:#ae81ff">6</span>) print(arr_tr6) print(arr_tr6<span style="color:#f92672">.</span>dtype) arr_tr20 <span style="color:#f92672">=</span> trunc(arr, <span style="color:#ae81ff">20</span>) print(arr_tr20) print(arr_tr20<span style="color:#f92672">.</span>dtype) </code></pre></div></div><p>輸出：(但是就有型別限制的最大儲存長度了)</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">[1.1234568 2.2345679 3.456789 ] float32 [1.123456 2.234567 3.456789] float32 [1.1234568 2.2345679 3.456789 ] float32 </code></pre></div></div><p>完美 OuO</p> <h2 id="references">References</h2> <ul> <li>[1] <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.trunc.html">numpy.trunc</a></li> <li>[2] <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html">numpy.around</a></li> <li>[3] <a href="https://stackoverflow.com/a/46020635/6734174">Truncating decimal digits numpy array of floats</a></li> </ul>
        ]]></description></item><item><title>資料整理</title><link>https://aben20807.github.io/posts/20191019-data-statistic/</link><pubDate>Sat, 19 Oct 2019 11:20:13 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20191019-data-statistic/</guid><description><![CDATA[
            <p>剛好用到一些蠻有用的工具，記錄一下</p>
          
            <p><a href="https://aben20807.github.io/posts/20191019-data-statistic/"><img src="https://drive.google.com/uc?export=view&amp;id=1NnbVE8x3tW3BDpNNNdohXiyM4jyVIgPs" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20191019-data-statistic/">Visit website to read the full article</a></p>
            <p>剛好用到一些蠻有用的工具，記錄一下</p> <p>資料：一個檔案 13 個數字共有 10,000 個檔案。  目的：視覺化平均後的 13 欄資料  主要分作以下步驟：</p> <ol> <li>合併 10,000 筆資料到一個檔案方便複製</li> <li>用 Google Spreadsheet 來平均並製作圖表</li> </ol> <h2 id="1-合併">1. 合併</h2> <p>檔案架構大致如下</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">├── mae_0000.txt ├── mae_0001.txt ├── mae_0002.txt ├── mae_0003.txt ├── mae_0004.txt ├── mae_0005.txt ├── mae_0006.txt ├── mae_0007.txt ├── mae_0008.txt ├── mae_0009.txt ├── mae_0010.txt ├── mae_0011.txt ├── mae_0012.txt . . . └── mae_9999.txt </code></pre></div></div><p>所以首先我們需要合併，這裡介紹一個頗好用的指令 <code>paste</code>。 <code>paste</code> 可以將資料水平合併，例如：(左邊行號，右邊內容)</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat a.txt b.txt c.txt  ───────┬──────────────────────────────────────────        │ File: a.txt ───────┼──────────────────────────────────────────    <span style="color:#ae81ff">1</span>   │ <span style="color:#ae81ff">1</span>    <span style="color:#ae81ff">2</span>   │ <span style="color:#ae81ff">2</span>    <span style="color:#ae81ff">3</span>   │ <span style="color:#ae81ff">3</span>    <span style="color:#ae81ff">4</span>   │ <span style="color:#ae81ff">4</span> ───────┴────────────────────────────────────────── ───────┬──────────────────────────────────────────        │ File: b.txt ───────┼──────────────────────────────────────────    <span style="color:#ae81ff">1</span>   │ <span style="color:#ae81ff">5</span>    <span style="color:#ae81ff">2</span>   │ <span style="color:#ae81ff">6</span>    <span style="color:#ae81ff">3</span>   │ <span style="color:#ae81ff">7</span>    <span style="color:#ae81ff">4</span>   │ <span style="color:#ae81ff">8</span> ───────┴────────────────────────────────────────── ───────┬──────────────────────────────────────────        │ File: c.txt ───────┼──────────────────────────────────────────    <span style="color:#ae81ff">1</span>   │ <span style="color:#ae81ff">9</span>    <span style="color:#ae81ff">2</span>   │ <span style="color:#ae81ff">10</span>    <span style="color:#ae81ff">3</span>   │ <span style="color:#ae81ff">11</span>    <span style="color:#ae81ff">4</span>   │ <span style="color:#ae81ff">12</span> ───────┴────────────────────────────────────────── </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ paste *.txt &gt; all.txt $ cat all.txt  ───────┬──────────────────────────────────────────        │ File: all.txt ───────┼──────────────────────────────────────────    <span style="color:#ae81ff">1</span>   │ <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">5</span>   <span style="color:#ae81ff">9</span>    <span style="color:#ae81ff">2</span>   │ <span style="color:#ae81ff">2</span>   <span style="color:#ae81ff">6</span>   <span style="color:#ae81ff">10</span>    <span style="color:#ae81ff">3</span>   │ <span style="color:#ae81ff">3</span>   <span style="color:#ae81ff">7</span>   <span style="color:#ae81ff">11</span>    <span style="color:#ae81ff">4</span>   │ <span style="color:#ae81ff">4</span>   <span style="color:#ae81ff">8</span>   <span style="color:#ae81ff">12</span> ───────┴────────────────────────────────────────── </code></pre></div></div><p>所以我們一樣可以用 <code>paste *.txt &gt; all.txt</code> 來把 10,000 資料都整理到同一個檔案，</p> <p>此時如果出現 <code>Too many open files</code> 的錯誤，可以使用以下指令來增加同時可開啟的檔案數</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ulimit -Hn <span style="color:#ae81ff">10240</span> <span style="color:#75715e"># The hard limit</span> $ ulimit -Sn <span style="color:#ae81ff">10240</span> <span style="color:#75715e"># The soft limit</span> </code></pre></div></div><p>成功變成一個檔案後發現它的 column 太多了 Spreadsheet 無法直接貼上，所以接下來要轉置一下。</p> <p>這裡我們使用 awk 來幫忙，新增一個 <code>transpose.sh</code> 的檔案，內容如下：</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/usr/bin/env bash </span><span style="color:#75715e"></span>awk <span style="color:#e6db74">&#39; </span><span style="color:#e6db74">{ </span><span style="color:#e6db74">    for (i=1; i&lt;=NF; i++)  { </span><span style="color:#e6db74">        a[NR,i] = $i </span><span style="color:#e6db74">    } </span><span style="color:#e6db74">} </span><span style="color:#e6db74">NF&gt;p { p = NF } </span><span style="color:#e6db74">END { </span><span style="color:#e6db74">    for(j=1; j&lt;=p; j++) { </span><span style="color:#e6db74">        str=a[1,j] </span><span style="color:#e6db74">        for(i=2; i&lt;=NR; i++){ </span><span style="color:#e6db74">            str=str&#34; &#34;a[i,j]; </span><span style="color:#e6db74">        } </span><span style="color:#e6db74">        print str </span><span style="color:#e6db74">    } </span><span style="color:#e6db74">}&#39;</span> $1 </code></pre></div></div><p>變更一下執行權限，就可以執行了</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ chmod +x transpose.sh  $ ./transpose.sh all.txt &gt; all_tr.txt </code></pre></div></div><p>這樣資料就會從原本的往右長變成往下長</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1dZ7u6raak9lUQiPR5DKxUTRjQJWPTPFZ" alt="轉置前" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">轉置前</center>   </figcaption> </figure> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1_vu6Is-UDZqvWJodUJjdVlmbGokwct5O" alt="轉置後" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">轉置後</center>   </figcaption> </figure> </p> <h2 id="使用-google-spreadsheep">使用 Google Spreadsheep</h2> <p>這裡可能比較沒啥，就是貼上去，這裡我覺得不要用 vim 開啟，找個方便複製的 (例如：VSCode)</p> <p>用 Ctrl-v 貼上 Spreadsheet 時可能會花一點時間</p> <p>不過發現它把所有的 column 合在一起了</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1jluF0VN_pDaifwAjVaJVsklIb5j3w7nN" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>我們選取第一個 column 然後點上方的 &ldquo;資料&rdquo; &gt; &ldquo;將文字分隔成不同欄&rdquo;</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1daksDj4iW6FCgvoTi9pxrQks7RYxBd4c" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>它會自動將第一個 column 分出來，這時後會冒出一個小視窗 (有點不明顯，有時候要滾動一下才會出現)，把下拉式選單點開選擇 &ldquo;空格&rdquo; 這樣它就會把所有 column 分開了。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=13wfpf9aTKIqahEW-WUjAWkTAH-zwLlAf" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1sUbYYqab7gdhWDDSFX0eJUxujb7_zfPn" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1NnbVE8x3tW3BDpNNNdohXiyM4jyVIgPs" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>平均跟圖表部份就按照一般試算表的使用方式，就不記錄了。</p> <h2 id="參考">參考</h2> <ul> <li><a href="https://stackoverflow.com/a/1729980/6734174">An efficient way to transpose a file in Bash</a></li> <li><a href="https://unix.stackexchange.com/a/205646">Combining large amount of files</a></li> </ul>
        ]]></description></item><item><title>天氣之子 Weathering With You</title><link>https://aben20807.github.io/posts/20190919-weathering-with-you/</link><pubDate>Thu, 19 Sep 2019 23:35:06 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190919-weathering-with-you/</guid><description><![CDATA[
            <p>看完直接來寫一波 OuO  趁還沒看其他人的影評先來說一下看完當下的一些感想  !!!! 強烈暴雷注意 !!!!</p>
          
            <p><a href="https://aben20807.github.io/posts/20190919-weathering-with-you/"><img src="https://drive.google.com/uc?export=view&amp;id=1e-W33G5mxkcyW8UggrgalOOMiN0rCVHG" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190919-weathering-with-you/">Visit website to read the full article</a></p>
            <p>看完直接來寫一波 OuO  趁還沒看其他人的影評先來說一下看完當下的一些感想  !!!! 強烈暴雷注意 !!!!</p> <blockquote> <p>果然誠哥回不去了  果然有貓  果然有瀧跟三葉  果然沒有縮時鏡頭  果然音樂都頗讚</p> </blockquote> <p>這些當然不是我在看電影前就預測，而是邊看邊喔～果然</p> <p>話說這個聲優陣容有點厲害</p> <p>所以我這幾天有點膽顫心驚，深怕一不小心就被暴雷了，我甚至連已經在 YouTube 出現的音樂都沒聽過，看到相關新聞快速掠過。</p> <p>雖然我總是口頭說著喜歡下雨，但是再好幾次的雨天也都會覺得很麻煩，這次能夠用天氣當作動畫題材我真心佩服。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1e-W33G5mxkcyW8UggrgalOOMiN0rCVHG" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>首先第一個果然，從 2002年《星之聲》, 2004年《雲之彼端，約定的地方》, 2007年 《秒速5公分》, 2011年《追逐繁星的孩子》, 2013年《言葉之庭》全部都有一種會使人心痛的寂寞感，但想當然爾大家喜歡的是像迪士尼那樣友好結局的作品，2016年《你的名字》就出現了，直接讓新海誠導演成為討論的焦點，而成功關鍵就是有好的結局，就如同細田守2009年《夏日大作戰》一樣是大家喜愛的電影。但是誠哥舊時的那種寂寞感已經不復存在，較不失理的講法就是稱那些新的影片為商業導向即為商業片。</p> <p>對我來說，我是不會說一定只看之前的影片，但是我是很喜歡那種寂寞感的，雖然有點傷身體 XDD，有興趣可以先從《追逐繁星的孩子》、《言葉之庭》入門，經典是《秒速5公分》。但有時我也覺得商業片不錯，至少看了心情會好。</p> <p>第二個果然，我覺得導演頗愛貓，可以去看一個可愛的短片：<a href="https://www.youtube.com/watch?v=wafGAcUim5A">猫の集会</a>。</p> <p>第三個果然，其實在《你的名字》就有出現類似的彩蛋，裡面有《言葉之庭》的孝雄和雪野。</p> <p>第四個果然，我看完之後想果然沒有縮時攝影，但是明明天氣這種用縮時會很好看啊。不過注意《天氣之子》裡面都是在講短暫的天氣變化，這也難怪沒地方塞縮時了。</p> <p>第五個果然，在電影院的環繞音效下音樂都頗棒，煙火那邊的 BGM 會起雞皮疙瘩，兩個人在天空的那首最為氣派也最需要比較好的環繞來聽。然後因為我歌跟歌名還沒對起來，待我聽個幾日再更新吧 OuO</p> <p>主角們最後為了自己而許願，這並不是妥協於世界已經在崩壞的藉口，而是有所選擇下的結果。</p> <p>老實說我一度以為會想辦法解決這個雨一直下不停的狀況，結果最後是就直接在這裡停止，我想這也是頗好，帶了一點點不是這麼完美的結局結束。</p> <hr> <h2 id="20190921-補充">2019.09.21 補充</h2> <p>怎麼講呢，認真要挑反而沒有一首代表性的 (跟《你的名字》有點像)，不過我會想放グランドエスケープ(Grand Escape) - RADWIMPS (feat.三浦透子)，因為是電影短版所以那種到高潮處嘎然而止的感覺跟電影有點像，重低音的背景我有點愛但不太適合狂聽就是了。</p>   <p>不過，大丈夫 (We&rsquo;ll be alright) - RADWIMPS 這首的歌詞最棒最符合這部主角的心境了 OuO</p>   <p>另外，我上面的淺薄心得都是在看任何影評之前靠著自己寫的，有一個短評我覺得跟我想表達的有點像可是講得非常好 (我太爛啦XD)：【影評/解析】《天氣之子》-為了你，我可以放棄世界 | 超粒方</p>  
        ]]></description></item><item><title>我的學習方式</title><link>https://aben20807.github.io/posts/20190911-how-i-learn-in-university/</link><pubDate>Wed, 11 Sep 2019 22:18:43 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190911-how-i-learn-in-university/</guid><description><![CDATA[
            <p>大學畢業後突然有感，感覺需要記錄一下。</p>
          
            <p><a href="https://aben20807.github.io/posts/20190911-how-i-learn-in-university/"><img src="https://drive.google.com/uc?export=view&amp;id=11dfe_7DVpwD2njTDBgIu23p1B4c_M7-d" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190911-how-i-learn-in-university/">Visit website to read the full article</a></p>
            <p>大學畢業後突然有感，感覺需要記錄一下。</p> <h1 id="前言">前言</h1> <p>其實這只是一段紀錄，不是要說你們一定要學著這樣做，當然如果你覺得不錯可以試試看，不過如果發現太晚看到了，沒關係，生命自會找到出路，人生裡沒有什麼是繞遠路的。總之把這篇當作是<a href="https://zh.wikipedia.org/wiki/%E5%80%96%E5%AD%98%E8%80%85%E5%81%8F%E5%B7%AE">倖存者偏差</a>的文章我也不會說什麼。</p> <p>另外，雖然主要是大學，不過我覺得這個學習方式是在國中的時候被養成的，高中時有機會得以更加磨練，大學時用的得心應手。</p> <h1 id="國高中的啟蒙">國高中的啟蒙</h1> <p>剛好都是生物課 (結果我現在的領域截然不同)。國中生物課是老師通常用投影片跟講義上課，然後會有東西需要填空，當時是因為老師頗有趣而且會需要畫一堆生物相關的圖片所以我算是蠻認真上課。高中的生物老師一樣有趣，不過教學方式是純板書，而且字相當的「藝術」(當下沒記到的話之後一定會看不懂的那種)，但是因為整理的相當好，所以我都會在他講課的當下把聽到的東西抄成手稿，板書只是用來輔助我沒抄到的部份，這裡訓練到了寫字的速度及反應，然後之後再找時間轉換成比較精美的筆記，突然發現我在高中生物花了很多時間@@。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11ckRrYyumxt0qTjxS9Dz98gpH6JYNdpx" alt="高中生物手稿" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">高中生物手稿</center>   </figcaption> </figure> </p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11rgEhk6nd47jcfyTdt8KQsk7xRLh_3Ll" alt="高中生物筆記" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">高中生物筆記</center>   </figcaption> </figure> </p> <h1 id="正文">正文</h1> <p>好像有蠻多人，不管是自己的心態亦或是將學習意願缺乏怪在教課的教授身上，這群人總是認為自己學習更有效率，甚至課都不用去上，考前讀個幾天或僅需一整夜即可應付大大小小的測驗。其實不然，若只把讀書拿來應付考試實在過於短視。</p> <p>我想說，最懶惰最輕鬆的方式絕對是「認真上課加抄筆記」，我的作法是即時將教授上課所講得知識轉換成自己能快速理解的語言並寫在活頁紙上，我覺得寫字還是很難被取代，因為自由度相當大，臨時要畫圖什麼的可以不需要任何切換。除了考試外，有其他額外的技能能夠訓練，例如教授上課的教學技巧，並非只有教得好的值得學習，那些聽得很吃力的可以學到怎樣的方式是不適合的間接可以拿來調整自己。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11LbbgbouvwIlnpDm8EPL7mPabBjnPVin" alt="作業系統 process scheduling" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">作業系統 process scheduling</center>   </figcaption> </figure> </p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11HKH0-EwLVEK74ggSIQdhYyzH3nGf5gA" alt="作業系統 fork" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">作業系統 fork</center>   </figcaption> </figure> </p> <p>活頁紙也是方便之後做補充或調整。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11H5tRYqoTCEClbPqH1ZmXB5T-ig8S4v5" alt="計算理論 NFA" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">計算理論 NFA</center>   </figcaption> </figure> </p> <p>有時也會用便利貼做補充或整理。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11j_ElOGVmLW678tEFavcdFBZt287Ft2l" alt="計算機概論" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">計算機概論</center>   </figcaption> </figure> </p> <p>甚至是跨頁的指向。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11ttY-5mgL8rAxY9Zj6gvDMqWaGQkuMfv" alt="工程數學 第二位移定理" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">工程數學 第二位移定理</center>   </figcaption> </figure> </p> <p>解題心法，工數教授會口述，所以我抄起來 (紅字) 以免忘記</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11fn8OvmD3bc5NTRRmGzORoSw4QaAReg2" alt="工程數學" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">工程數學</center>   </figcaption> </figure> </p> <p>必考題重點標記。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11tzUGk0lsDuDGs7KbOUBPZqL6aUn6z3F" alt="資料結構 Binary Tree" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">資料結構 Binary Tree</center>   </figcaption> </figure> </p> <p>因為抄筆記已經成為一種習慣了，所以你可以看到不管什麼課我都可以抄。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11D90v_2P7X6bBZNNTwx9Clkxy6k9_Pac" alt="法政哲學 康德自由意志" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">法政哲學 康德自由意志</center>   </figcaption> </figure> </p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11_a3xYpk5UX3HtZP_tJi4LOtI2NoQo0E" alt="憲政民主體制" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">憲政民主體制</center>   </figcaption> </figure> </p> <p>總之我認為邊上課邊寫出讓自己易於理解筆記的過程，與直譯器 (<a href="https://en.wikipedia.org/wiki/Interpreter_(computing)">Interpreter</a>) 有 87% 相似度，根本就是人體直譯器。 然後算是最近才知道這非常接近<a href="https://medium.com/y-pointer/%E7%9F%A5%E8%AD%98-967cca95a939">費曼學習法</a>，只是我還有加上即時產出。</p> <p>另外因為是即時改寫，所以也算是有訓練到重寫的技能，這在未來寫論文上可能會比較需要。</p> <p>使用這個方法我認為算是比較容易能夠維持好成績的，不會像臨時抱佛腳那樣浮動比較大，至於好成績有什麼用我就另外列在下面了，別在說「大學成績沒啥用，有過就好」這種話，但是當然也是有缺點的。</p> <h1 id="認真上課的缺點">認真上課的缺點</h1> <ul> <li>需要有人 (教授) 幫忙整理資料變成自己的輸入</li> <li>缺少主動去學習的能力</li> <li>如果需要大量思考的內容會比較吃力，例如：演算法</li> <li>會有更多時間做自己的事，不夠自律的話會浪費時間</li> </ul> <h1 id="補充成績好可能有的好處">補充：成績好可能有的好處</h1> <p>(相關規定自己查嘿 OuO)</p> <ul> <li>獎學金 &ndash; (雖然我沒拿過我們學校的)</li> <li>提早畢業 &ndash; (有成績門檻，雖然我也沒用到)</li> <li>不用補習考研，靠推甄 &ndash; (直接省一大筆錢加一堆時間)</li> <li>出國 GPA &ndash; (據說國外成績看頗重)</li> <li><del>同學都把你當學霸</del></li> </ul> <h1 id="結論">結論</h1> <p>整體來說，認真上課的 CP 值真的頗高。</p> <h1 id="後記">後記</h1> <p>畢業之後回想，這個學習方式是很輕鬆，但是缺點就是自己讀書的時間太少，而這卻是大學跟研究所之間的差異，也就是說讀研究所時，會傾向學生已經具備從書本學習已建構好的知識，研究所則是不會又統一的教材，必須自行找到相關的期刊論文、研究、實驗、找出新方法。因此現在的我就會有之前書讀得太少的感覺。</p> <p>然而這些知識現在大部分都已經散落在網路上的，怎麼下關鍵字找答案以及如何分辨真偽反而是更重要的課題。不過下關鍵字的能力我是覺得我算很不錯，因為很多問題只能自己上網找答案之類的。</p>
        ]]></description></item><item><title>Valgrind 的 Memcheck</title><link>https://aben20807.github.io/posts/20190817-valgrind-memcheck/</link><pubDate>Sat, 17 Aug 2019 11:17:09 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190817-valgrind-memcheck/</guid><description><![CDATA[
            <p>簡單玩玩 @@</p>
          
            <p><a href="https://aben20807.github.io/posts/20190817-valgrind-memcheck/"><img src="https://drive.google.com/uc?export=view&amp;id=10pF-pr6yd5wJxlMfyaUHOrz-5v6iB1Ud" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190817-valgrind-memcheck/">Visit website to read the full article</a></p>
            <p>簡單玩玩 @@</p> <h1 id="前言">前言</h1> <p>之前大學時期 (講得好像很久之前 OuO) 的某幾個作業我有拿來測試自己的程式碼是否有 memory leak 的情況，會發生這種情況主要原因是沒有對每一個 alloc 做 free。</p> <h1 id="環境">環境</h1> <ul> <li>T490s</li> <li>Ubuntu 18.04</li> </ul> <h1 id="valgrind-的-memcheck">Valgrind 的 Memcheck</h1> <p>要一篇講完 Valgrind 基本上有點難，而且東西頗雜，我也是邊摸邊記錄，因為 Valgrind 有很多工具可以用，本篇主要講解預設的工具 <strong>memcheck</strong>，當然也只是部份的部份而已 QuQ。顧名思義是用來檢測記憶體使用情況，主要用在 C 及 C++。它是以插入額外程式碼 (<a href="https://en.wikipedia.org/wiki/Profiling_(computer_programming)#Instrumentation">Instrumentation</a>) 的方式來記錄記憶體的使用，根據 wiki，memcheck 幾乎對所有指令的周圍都插入額外的檢測程式碼用來追蹤記憶體區塊的有效性 (validity)。原因是因為一開始未被分配的區塊都會是無效 (invalid) 或是未定義 (undefined)，當這些區快被初始化後，memcheck 仍繼續追蹤 V bits (<a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.value">Valid-value bits</a>) 及 A bits (<a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.vaddress">Valid-address bits</a>)。此外，還實做了記憶體分配器 (<a href="https://en.wikipedia.org/wiki/C_dynamic_memory_allocation">memory allocator</a>)，也就是定義了 <code>malloc</code> 與 <code>free</code> 之類的函式來記錄呼叫次數。</p> <p>總結來說，主要用來做以下項目檢測：</p> <ul> <li>使用位初始化的記憶體空間</li> <li>讀或寫一塊已經 <code>free</code> 過得區塊</li> <li>讀或寫超過一塊 <code>malloc</code> 取得合法的大小</li> <li>記憶體洩漏 (<a href="https://en.wikipedia.org/wiki/Memory_leak">Memory leaks</a>)</li> </ul> <p>不過插入外程式碼是有代價的，就是效能會變低許多。</p> <h2 id="安裝">安裝</h2> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo apt install valgrind </code></pre></div></div><h2 id="使用">使用</h2> <h3 id="測試記憶體洩漏-memory-leak-detection">測試記憶體洩漏 (Memory leak detection)</h3> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e"></span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {     <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>a <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>) malloc(<span style="color:#ae81ff">1024</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">int</span>));     printf(<span style="color:#e6db74">&#34;%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, a);     <span style="color:#75715e">// free(a); </span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; } </code></pre></div></div><h3 id="編譯">編譯</h3> <p><code>-g</code> 代表加入除錯資訊，可以讓 valgrind 指出在程式的那一行。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ gcc -o test test.c -g </code></pre></div></div><h3 id="利用-valgrind-抓-memory-leak">利用 valgrind 抓 memory leak</h3> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ valgrind --leak-check<span style="color:#f92672">=</span>full --show-leak-kinds<span style="color:#f92672">=</span>all ./test </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">==18006== Memcheck, a memory error detector ==18006== Copyright (C) 2002-2017, and GNU GPL&#39;d, by Julian Seward et al. ==18006== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info ==18006== Command: ./test ==18006==  0x522d040 ==18006==  ==18006== HEAP SUMMARY: ==18006==     in use at exit: 4,096 bytes in 1 blocks ==18006==   total heap usage: 2 allocs, 1 frees, 5,120 bytes allocated ==18006==  ==18006== 4,096 bytes in 1 blocks are definitely lost in loss record 1 of 1 ==18006==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so) ==18006==    by 0x10869B: main (test.c:5) ==18006==  ==18006== LEAK SUMMARY: ==18006==    definitely lost: 4,096 bytes in 1 blocks ==18006==    indirectly lost: 0 bytes in 0 blocks ==18006==      possibly lost: 0 bytes in 0 blocks ==18006==    still reachable: 0 bytes in 0 blocks ==18006==         suppressed: 0 bytes in 0 blocks ==18006==  ==18006== For counts of detected and suppressed errors, rerun with: -v ==18006== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0) </code></pre></div></div><h2 id="分析">分析</h2> <p>程式中我們 malloc 的一塊 1024 個整數大小 (4 bytes) 的記憶體空間，程式結束前沒有呼叫 free 因此產生的 memory leak 的現象。可以看到 valgrind 指出我們在程式第 5 行 <code>int *a = (int *) malloc(1024 * sizeof(int));</code> 分配了 4096 bytes 的記憶體。</p> <p>此外這裡有一個有趣的現象，就是總共分配的大小是 5120 bytes，這是因為 <code>printf</code> 的關係，這個函式會固定使用 1024 bytes 的記憶體空間。所以 5120 = 4096 + 1024。</p> <h1 id="有顏色版本colour-valgrind">有顏色版本：colour-valgrind</h1> <h2 id="安裝-1">安裝</h2> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ pip3 install colour-valgrind <span style="color:#75715e"># 需要 python</span> </code></pre></div></div><h2 id="如果喜歡的話可以直接加在-bashrc">如果喜歡的話可以直接加在 <code>~/.bashrc</code></h2> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">alias valgrind<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;colour-valgrind&#39;</span> </code></pre></div></div><h2 id="使用-1">使用</h2> <p>基本上就直接跟 valgrind 一樣</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ colour-valgrind --leak-check<span style="color:#f92672">=</span>full --show-leak-kinds<span style="color:#f92672">=</span>all ./test </code></pre></div></div><p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=10pF-pr6yd5wJxlMfyaUHOrz-5v6iB1Ud" alt="結果" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">結果</center>   </figcaption> </figure> </p> <h1 id="參考資料">參考資料</h1> <ul> <li><a href="http://valgrind.org/docs/manual/mc-manual.html">Valgrind User Manual - 4. Memcheck: a memory error detector</a></li> <li><a href="https://en.wikipedia.org/wiki/Valgrind">https://en.wikipedia.org/wiki/Valgrind</a></li> </ul>
        ]]></description></item><item><title>Regex101</title><link>https://aben20807.github.io/posts/20190815-regexp/</link><pubDate>Thu, 15 Aug 2019 22:16:38 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190815-regexp/</guid><description><![CDATA[
            <p>我現在才知道這個是不是偏爛啊</p>
          
            <p><a href="https://aben20807.github.io/posts/20190815-regexp/"><img src="https://drive.google.com/uc?export=view&amp;id=1vdxAJpMf506uqrdfXp6IPve3CYn-RXCP" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190815-regexp/">Visit website to read the full article</a></p>
            <p>我現在才知道這個是不是偏爛啊</p> <h1 id="前言">前言</h1> <p>因為要調整網站的一些東西，所以需要寫一些正規表達式 (regular expression)，不過一直試都失敗，上網找資料才發現一個好網站。傳送門：<a href="https://regex101.com/">https://regex101.com/</a></p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1-H5FG7NzGBMSEqNv6iJ0z2QfY3hQoXW5" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>一開始看到連結還以為是什麼內容農場，結果不是XDD</p> <h1 id="使用">使用</h1> <p>左方有語言選項，因為不同語言的正規表達式可能會有些許的差異，所以就選擇正在使用的語言，因為 Hugo 是 Golang 寫的所以網站的表達式要選用 Go 語言。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1Oz0fVpydicxt3X97ywQ-Z45YHePTf6-l" alt="選擇 Golang" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">選擇 Golang</center>   </figcaption> </figure> </p> <p>基本功能就是填入表達式，接著可以輸入測試字串看是否吻合，如果中間有 group 的話也會標示不同顏色，這點我覺得超棒。 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=11ScFQm6k0GbA3TPJbA7AysE8btF7dsdL" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>圖上範例就是我想要用來修改文章的標題 (heading)，加上錨定符號用。</p> <p>簡單範例：</p> <pre tabindex="0"><code>(&lt;(h[1-9]) id=\&quot;([^\&quot;]+)\&quot;(.+))(&lt;/h[1-9]+&gt;) </code></pre><p>然後我是用這個來做取代來換成我想要的樣式，例如：</p> <pre tabindex="0"><code>replaceRE &quot;(&lt;(h[1-9]) id=\&quot;([^\&quot;]+)\&quot;(.+))(&lt;/h[1-9]+&gt;)&quot; `&lt;${2} id=&quot;${3}&quot; class=&quot;article-heading&quot;${4}&lt;a class=&quot;headline-hash smoothScroll hover-show scrollspy&quot; style=&quot;font-size: 0.75em; color: black; padding-left: 0.25em&quot; href=&quot;#${3}&quot;&gt;&lt;span class=&quot;iconify&quot; data-icon=&quot;octicon-link&quot; data-inline=&quot;false&quot;&gt;&lt;/span&gt;&lt;/a&gt; ${5}` </code></pre><p>原本的標題就會變成 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1yubxNXgTK8uZV07Bo52PzBUHN2Tjf8rY" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p>
        ]]></description></item><item><title>別把人家的好心視為理所當然</title><link>https://aben20807.github.io/posts/20190804-tiny-action/</link><pubDate>Sun, 04 Aug 2019 11:08:11 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190804-tiny-action/</guid><description><![CDATA[
            <p>其實原本 6 月中就要寫了，結果因為沒拍到照片所以就先延後 (明明是自己懶惰</p>
          
            <p><a href="https://aben20807.github.io/posts/20190804-tiny-action/"><img src="https://drive.google.com/uc?export=view&amp;id=1KfJO4p5cEL0SzRgLYDIMVLPtPOA3wVlf" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190804-tiny-action/">Visit website to read the full article</a></p>
            <p>其實原本 6 月中就要寫了，結果因為沒拍到照片所以就先延後 (明明是自己懶惰</p> <p>6 月中還蠻嚴重的就是香港反送中的事件開始，到現在 8 月了仍然有罷工及遊行，不過本篇不會討論這個事件。 雖說不討論但其實有些相關。記得當時許多人跟風換了頭貼濾鏡，但我認為有一些人只會盲從表現自己好像有在關注社會議題反而忽略身邊的事。 若真的去探討哪些人，其實並不限於換頭貼的人，也不是換頭貼就會這樣，換頭貼只是剛好是附近發生的大事。所以並不是想要嘴這些換頭貼的人喔。</p> <p>讓我想發文的遠因是大家都會把雨傘晾在走廊，導火線是前室友針對此事的<a href="https://www.moedict.tw/%E5%BC%B7%E8%BE%AF">強 (ㄑ一ㄤˇ) 辯</a>，先來講講發生了什麼事吧。</p> <p>下雨天，大部分的人都會撐雨傘，拿回宿舍後就會打開然後放在走廊上，若是短暫的放置是還可以，不過幾乎所有人都是會放到過夜的，等到了隔天，打掃阿姨因為要推工作車，但因為有放雨傘所以過不去，因此就需要一個一個收雨傘才能前進。</p> <p>我的前室友提出以下幾點：</p> <ul> <li>雨傘打開放在外面比較快乾</li> <li>打掃阿姨有領薪水，而且沒看過她抱怨</li> </ul> <p>我對這些有些疑問。乾比較快需要放整晚嗎？另外，走廊是公共空間，照理說是不可以放置私人物品。還有正常打掃工作是不會包含收雨傘的，她幫忙收是因為這樣才能工作，沒有抱怨是因為人很好。因此帶入今天的主題，「別把人家的好心視為理所當然」。</p> <p>(當然，這位室友事後說他是硬要辯</p> <p>突然發現要講的沒有很多，只是希望大家多去思考，平時其實會有許多類似的情況，多去將心比心，而不是以為換個頭貼就有多關心這個社會，請從身邊最微小的事開始去實際力行，這個社會才能一點一滴的變好。</p> <p>當然你可能好奇我怎麼晾雨傘，我是直接收傘的狀況下放到房間地上，不用綁起來，利用房間冷氣會讓房間乾燥的特性，放一個晚上基本上就乾了。給你們參考 OuO</p>
        ]]></description></item><item><title>Build MNIST with TVM</title><link>https://aben20807.github.io/posts/20190616-build-mnist-with-tvm/</link><pubDate>Sun, 16 Jun 2019 17:40:59 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190616-build-mnist-with-tvm/</guid><description><![CDATA[
            <p>真的是隔很久&hellip;.藉口就不多說了 OuO</p> <p>這篇主要在造輪子，主要原因就是幾乎找不到這類輪子了，而剛好自己需要，又卡了很久才完成，不如記錄一下 OuO</p>
          
            <p><a href="https://aben20807.github.io/posts/20190616-build-mnist-with-tvm/"><img src="https://drive.google.com/uc?export=view&amp;id=1qSdoAYPCxNk5tlI0ELivCieDWCQO9IOV" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190616-build-mnist-with-tvm/">Visit website to read the full article</a></p>
            <p>真的是隔很久&hellip;.藉口就不多說了 OuO</p> <p>這篇主要在造輪子，主要原因就是幾乎找不到這類輪子了，而剛好自己需要，又卡了很久才完成，不如記錄一下 OuO</p> <h1 id="前言">前言</h1> <p>最近在做 TVM 相關的事，它支援頗多前端，基於方便我就隨便挑一個 Keras 了 (先說我不會 AI @@  然後因為現在頗多都在做 ImageNet 或更之後的應用，MNIST 的資料反而偏少，尤其是幾乎找不到訓練好的模型，說幾乎是因為還真的被我找到，傳送門：<a href="https://github.com/EN10/KerasMNIST">EN10/KerasMNIST</a>，如果只是要用 Keras 來操作 MNIST 的話可以用這個連結，我已經確認過是可以直接執行XDD</p> <hr> <p>2019.06.17 更新：扯，原來官網就有&hellip;.https://keras.io/examples/mnist_cnn/  然後我發現我整篇都把 MNIST 打成 MINST&hellip;.</p> <hr> <p>話說原本以為模型被存成檔案的話只有權重，結果是有兩種，也可以跟整個模型存在一起，詳情就去 Keras 官網 <a href="https://keras.io/getting-started/faq/#how-can-i-save-a-keras-model">How can I save a Keras model?</a> 看看吧。</p> <p>所以上面那個做 MNIST 的是把整個模型存起來，這主要不是我要的＠＠，不過還是先用看看。</p> <p>P.S. 一些相依性檔案例如 Keras, Tensorflow, TVM 的安裝就不一一記錄囉 OuO</p> <h1 id="環境">環境</h1> <ul> <li>ubuntu 18.04</li> <li>TVM 0.6.dev (6a4d71ff40915611bd42b62994992b879e6be610)</li> </ul> <h1 id="一堆程式碼上菜囉">一堆程式碼上菜囉</h1> <h2 id="原始-cnnpredictpy">原始 <code>cnnPredict.py</code></h2> <p>注意要下載或複製那個程式碼，<code>cnn.h5</code> 跟 <code>test3.png</code> 一樣要放對位置。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> scipy.misc <span style="color:#f92672">import</span> imread, imresize <span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np x <span style="color:#f92672">=</span> imread(<span style="color:#e6db74">&#39;test3.png&#39;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;L&#39;</span>) <span style="color:#75715e"># Compute a bit-wise inversion so black becomes white and vice versa</span> x <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>invert(x) <span style="color:#75715e"># Make it the right size</span> x <span style="color:#f92672">=</span> imresize(x,(<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>)) <span style="color:#75715e"># Convert to a 4D tensor to feed into our model</span> x <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>reshape(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">1</span>) x <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;float32&#39;</span>) x <span style="color:#f92672">/=</span> <span style="color:#ae81ff">255</span> <span style="color:#75715e"># Perform the prediction</span> <span style="color:#f92672">from</span> keras.models <span style="color:#f92672">import</span> load_model model <span style="color:#f92672">=</span> load_model(<span style="color:#e6db74">&#39;cnn.h5&#39;</span>) out <span style="color:#f92672">=</span> model<span style="color:#f92672">.</span>predict(x) print(np<span style="color:#f92672">.</span>argmax(out)) </code></pre></div></div><p>很好，可以執行～</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ python3 cnnPredict.py <span style="color:#ae81ff">3</span> </code></pre></div></div><h2 id="加入-tvm-囉">加入 TVM 囉</h2> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> nnvm <span style="color:#f92672">import</span> tvm <span style="color:#f92672">import</span> tvm.relay <span style="color:#66d9ef">as</span> relay <span style="color:#f92672">from</span> scipy.misc <span style="color:#f92672">import</span> imread, imresize <span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np <span style="color:#f92672">import</span> keras <span style="color:#f92672">from</span> keras.models <span style="color:#f92672">import</span> load_model x <span style="color:#f92672">=</span> imread(<span style="color:#e6db74">&#39;test3.png&#39;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;L&#39;</span>) <span style="color:#75715e"># Compute a bit-wise inversion so black becomes white and vice versa</span> x <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>invert(x) <span style="color:#75715e"># Make it the right size</span> x <span style="color:#f92672">=</span> imresize(x,(<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>)) <span style="color:#75715e"># Convert to a 4D tensor to feed into our model</span> x <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>reshape(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">1</span>) x <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;float32&#39;</span>) x <span style="color:#f92672">/=</span> <span style="color:#ae81ff">255</span> <span style="color:#75715e"># Load model from pre-trained file</span> model <span style="color:#f92672">=</span> load_model(<span style="color:#e6db74">&#39;cnn.h5&#39;</span>) <span style="color:#75715e"># Compile with tvm</span> shape_dict <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;input_1&#39;</span>: (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">28</span>)} func, params <span style="color:#f92672">=</span> relay<span style="color:#f92672">.</span>frontend<span style="color:#f92672">.</span>from_keras(model, shape_dict) target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;llvm&#34;</span> ctx <span style="color:#f92672">=</span> tvm<span style="color:#f92672">.</span>cpu(<span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">with</span> relay<span style="color:#f92672">.</span>build_config(opt_level<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>):     executor <span style="color:#f92672">=</span> relay<span style="color:#f92672">.</span>build_module<span style="color:#f92672">.</span>create_executor(<span style="color:#e6db74">&#39;graph&#39;</span>, func, ctx, target) <span style="color:#75715e"># Perform the prediction</span> dtype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;float32&#39;</span> tvm_out <span style="color:#f92672">=</span> executor<span style="color:#f92672">.</span>evaluate(func)(tvm<span style="color:#f92672">.</span>nd<span style="color:#f92672">.</span>array(x<span style="color:#f92672">.</span>astype(dtype)), <span style="color:#f92672">**</span>params) print(np<span style="color:#f92672">.</span>argmax(tvm_out<span style="color:#f92672">.</span>asnumpy()[<span style="color:#ae81ff">0</span>])) </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ python3 cnnPredict_tvm.py In <span style="color:#e6db74">`</span>main<span style="color:#e6db74">`</span>:  v0.0.1 fn <span style="color:#f92672">(</span>%conv2d_1_input, %v_param_1: Tensor<span style="color:#f92672">[(</span>32, 1, 3, 3<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_2: Tensor<span style="color:#f92672">[(</span>32,<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_3: Tensor<span style="color:#f92672">[(</span>64, 32, 3, 3<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_4: Tensor<span style="color:#f92672">[(</span>64,<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_5: Tensor<span style="color:#f92672">[(</span>128, 9216<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_6: Tensor<span style="color:#f92672">[(</span>128,<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_7: Tensor<span style="color:#f92672">[(</span>10, 128<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_8: Tensor<span style="color:#f92672">[(</span>10,<span style="color:#f92672">)</span>, float32<span style="color:#f92672">])</span> <span style="color:#f92672">{</span>   %0 <span style="color:#f92672">=</span> nn.conv2d<span style="color:#f92672">(</span>%conv2d_1_input, %v_param_1, channels<span style="color:#f92672">=</span>32, kernel_size<span style="color:#f92672">=[</span>3, 3<span style="color:#f92672">])</span>   %1 <span style="color:#f92672">=</span> nn.bias_add<span style="color:#f92672">(</span>%0, %v_param_2<span style="color:#f92672">)</span>   %2 <span style="color:#f92672">=</span> nn.relu<span style="color:#f92672">(</span>%1<span style="color:#f92672">)</span>   %3 <span style="color:#f92672">=</span> nn.conv2d<span style="color:#f92672">(</span>%2, %v_param_3, channels<span style="color:#f92672">=</span>64, kernel_size<span style="color:#f92672">=[</span>3, 3<span style="color:#f92672">])</span>   %4 <span style="color:#f92672">=</span> nn.bias_add<span style="color:#f92672">(</span>%3, %v_param_4<span style="color:#f92672">)</span>   %5 <span style="color:#f92672">=</span> nn.relu<span style="color:#f92672">(</span>%4<span style="color:#f92672">)</span>   %6 <span style="color:#f92672">=</span> nn.max_pool2d<span style="color:#f92672">(</span>%5, pool_size<span style="color:#f92672">=[</span>2, 2<span style="color:#f92672">]</span>, strides<span style="color:#f92672">=[</span>2, 2<span style="color:#f92672">])</span>an internal invariant was violated <span style="color:#66d9ef">while</span> typechecking your program <span style="color:#f92672">[</span>22:05:21<span style="color:#f92672">]</span> tvm/src/relay/op/nn/pooling.cc:73: Check failed: data !<span style="color:#f92672">=</span> nullptr:  ;    %7 <span style="color:#f92672">=</span> transpose<span style="color:#f92672">(</span>%6, axes<span style="color:#f92672">=[</span>0, 2, 3, 1<span style="color:#f92672">])</span>   %8 <span style="color:#f92672">=</span> nn.batch_flatten<span style="color:#f92672">(</span>%7<span style="color:#f92672">)</span>   %9 <span style="color:#f92672">=</span> nn.dense<span style="color:#f92672">(</span>%8, %v_param_5, units<span style="color:#f92672">=</span>128<span style="color:#f92672">)</span>   %10 <span style="color:#f92672">=</span> nn.bias_add<span style="color:#f92672">(</span>%9, %v_param_6<span style="color:#f92672">)</span>   %11 <span style="color:#f92672">=</span> nn.relu<span style="color:#f92672">(</span>%10<span style="color:#f92672">)</span>   %12 <span style="color:#f92672">=</span> nn.dense<span style="color:#f92672">(</span>%11, %v_param_7, units<span style="color:#f92672">=</span>10<span style="color:#f92672">)</span>   %13 <span style="color:#f92672">=</span> nn.bias_add<span style="color:#f92672">(</span>%12, %v_param_8<span style="color:#f92672">)</span>   nn.softmax<span style="color:#f92672">(</span>%13, axis<span style="color:#f92672">=</span>1<span style="color:#f92672">)</span> <span style="color:#f92672">}</span> </code></pre></div></div><p>扯，竟然不行＠＠，而且完全不知道錯哪，找了一些資料說是 shape 錯了，我試了各種排列組合也都不行&hellip;.</p> <h2 id="只存-mnist-的權重">只存 MNIST 的權重</h2> <p>只好使用上面提到 Keras 官網 <a href="https://keras.io/getting-started/faq/#how-can-i-save-a-keras-model">How can I save a Keras model?</a> 的方式只存權重出來，這裡我們只需要改最後一行，<code>save</code> 改成 <code>save_weights</code></p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> keras <span style="color:#f92672">from</span> keras.datasets <span style="color:#f92672">import</span> mnist <span style="color:#f92672">from</span> keras.models <span style="color:#f92672">import</span> Sequential <span style="color:#f92672">from</span> keras.layers <span style="color:#f92672">import</span> Dense, Dropout, Flatten <span style="color:#f92672">from</span> keras.layers <span style="color:#f92672">import</span> Conv2D, MaxPooling2D <span style="color:#f92672">from</span> keras <span style="color:#f92672">import</span> backend <span style="color:#66d9ef">as</span> K batch_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">128</span> num_classes <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span> epochs <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span> <span style="color:#75715e"># input image dimensions</span> img_rows, img_cols <span style="color:#f92672">=</span> <span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">28</span> <span style="color:#75715e"># the data, shuffled and split between train and test sets</span> (x_train, y_train), (x_test, y_test) <span style="color:#f92672">=</span> mnist<span style="color:#f92672">.</span>load_data() x_train <span style="color:#f92672">=</span> x_train<span style="color:#f92672">.</span>reshape(x_train<span style="color:#f92672">.</span>shape[<span style="color:#ae81ff">0</span>], img_rows, img_cols, <span style="color:#ae81ff">1</span>) x_test <span style="color:#f92672">=</span> x_test<span style="color:#f92672">.</span>reshape(x_test<span style="color:#f92672">.</span>shape[<span style="color:#ae81ff">0</span>], img_rows, img_cols, <span style="color:#ae81ff">1</span>) input_shape <span style="color:#f92672">=</span> (img_rows, img_cols, <span style="color:#ae81ff">1</span>) x_train <span style="color:#f92672">=</span> x_train<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;float32&#39;</span>) x_test <span style="color:#f92672">=</span> x_test<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;float32&#39;</span>) x_train <span style="color:#f92672">/=</span> <span style="color:#ae81ff">255</span> x_test <span style="color:#f92672">/=</span> <span style="color:#ae81ff">255</span> print(<span style="color:#e6db74">&#39;x_train shape:&#39;</span>, x_train<span style="color:#f92672">.</span>shape) print(x_train<span style="color:#f92672">.</span>shape[<span style="color:#ae81ff">0</span>], <span style="color:#e6db74">&#39;train samples&#39;</span>) print(x_test<span style="color:#f92672">.</span>shape[<span style="color:#ae81ff">0</span>], <span style="color:#e6db74">&#39;test samples&#39;</span>) <span style="color:#75715e"># convert class vectors to binary class matrices</span> y_train <span style="color:#f92672">=</span> keras<span style="color:#f92672">.</span>utils<span style="color:#f92672">.</span>to_categorical(y_train, num_classes) y_test <span style="color:#f92672">=</span> keras<span style="color:#f92672">.</span>utils<span style="color:#f92672">.</span>to_categorical(y_test, num_classes) model <span style="color:#f92672">=</span> Sequential() model<span style="color:#f92672">.</span>add(Conv2D(<span style="color:#ae81ff">32</span>, kernel_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>),                  activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>,                  input_shape<span style="color:#f92672">=</span>input_shape)) model<span style="color:#f92672">.</span>add(Conv2D(<span style="color:#ae81ff">64</span>, (<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>), activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>)) model<span style="color:#f92672">.</span>add(MaxPooling2D(pool_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>))) model<span style="color:#f92672">.</span>add(Dropout(<span style="color:#ae81ff">0.25</span>)) model<span style="color:#f92672">.</span>add(Flatten()) model<span style="color:#f92672">.</span>add(Dense(<span style="color:#ae81ff">128</span>, activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>)) model<span style="color:#f92672">.</span>add(Dropout(<span style="color:#ae81ff">0.5</span>)) model<span style="color:#f92672">.</span>add(Dense(num_classes, activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;softmax&#39;</span>)) model<span style="color:#f92672">.</span>compile(loss<span style="color:#f92672">=</span>keras<span style="color:#f92672">.</span>losses<span style="color:#f92672">.</span>categorical_crossentropy,               optimizer<span style="color:#f92672">=</span>keras<span style="color:#f92672">.</span>optimizers<span style="color:#f92672">.</span>Adadelta(),               metrics<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;accuracy&#39;</span>]) model<span style="color:#f92672">.</span>fit(x_train, y_train,           batch_size<span style="color:#f92672">=</span>batch_size,           epochs<span style="color:#f92672">=</span>epochs,           verbose<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>,           validation_data<span style="color:#f92672">=</span>(x_test, y_test)) score <span style="color:#f92672">=</span> model<span style="color:#f92672">.</span>evaluate(x_test, y_test, verbose<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>) print(<span style="color:#e6db74">&#39;Test loss:&#39;</span>, score[<span style="color:#ae81ff">0</span>]) print(<span style="color:#e6db74">&#39;Test accuracy:&#39;</span>, score[<span style="color:#ae81ff">1</span>]) model<span style="color:#f92672">.</span>save_weights(<span style="color:#e6db74">&#39;mnist_weights.h5&#39;</span>) </code></pre></div></div><p>跑了頗久，不過跟其應該比 ImageNet 快很多了。結果如下圖。 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1qSdoAYPCxNk5tlI0ELivCieDWCQO9IOV" alt="train a MNIST model with Keras" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">train a MNIST model with Keras</center>   </figcaption> </figure> </p> <h2 id="自己用-keras-建構一個-mnist-再餵給-tvm">自己用 Keras 建構一個 MNIST 再餵給 TVM</h2> <p>把上面產生的權重餵給自己建構的模型</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> nnvm <span style="color:#f92672">import</span> tvm <span style="color:#f92672">import</span> tvm.relay <span style="color:#66d9ef">as</span> relay <span style="color:#f92672">from</span> scipy.misc <span style="color:#f92672">import</span> imread, imresize <span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np <span style="color:#f92672">import</span> keras <span style="color:#f92672">from</span> keras.models <span style="color:#f92672">import</span> load_model <span style="color:#f92672">from</span> keras.datasets <span style="color:#f92672">import</span> mnist <span style="color:#f92672">from</span> keras.models <span style="color:#f92672">import</span> Sequential <span style="color:#f92672">from</span> keras.layers <span style="color:#f92672">import</span> Dense, Dropout, Flatten, InputLayer <span style="color:#f92672">from</span> keras.layers <span style="color:#f92672">import</span> Conv2D, MaxPooling2D num_classes <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span> x <span style="color:#f92672">=</span> imread(<span style="color:#e6db74">&#39;test3.png&#39;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;L&#39;</span>) <span style="color:#75715e"># Compute a bit-wise inversion so black becomes white and vice versa</span> x <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>invert(x) <span style="color:#75715e"># Make it the right size</span> x <span style="color:#f92672">=</span> imresize(x,(<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>)) <span style="color:#75715e"># Convert to a 4D tensor to feed into our model</span> x <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>reshape(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">1</span>) x <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;float32&#39;</span>) x <span style="color:#f92672">/=</span> <span style="color:#ae81ff">255</span> <span style="color:#75715e"># Construct a MNIST model</span> model <span style="color:#f92672">=</span> Sequential() model<span style="color:#f92672">.</span>add(Conv2D(<span style="color:#ae81ff">32</span>, kernel_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>), activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>, input_shape<span style="color:#f92672">=</span>(<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">1</span>))) model<span style="color:#f92672">.</span>add(Conv2D(<span style="color:#ae81ff">64</span>, kernel_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>), activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>)) model<span style="color:#f92672">.</span>add(MaxPooling2D(pool_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>))) model<span style="color:#f92672">.</span>add(Dropout(<span style="color:#ae81ff">0.25</span>)) model<span style="color:#f92672">.</span>add(Flatten()) model<span style="color:#f92672">.</span>add(Dense(<span style="color:#ae81ff">128</span>, activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>)) model<span style="color:#f92672">.</span>add(Dropout(<span style="color:#ae81ff">0.5</span>)) model<span style="color:#f92672">.</span>add(Dense(num_classes, activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;softmax&#39;</span>)) <span style="color:#75715e"># Load the weights that we get from last program</span> model<span style="color:#f92672">.</span>load_weights(<span style="color:#e6db74">&#39;mnist_weights.h5&#39;</span>) shape_dict <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;input_1&#39;</span>: (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">28</span>)} func, params <span style="color:#f92672">=</span> relay<span style="color:#f92672">.</span>frontend<span style="color:#f92672">.</span>from_keras(model, shape_dict) target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;llvm&#34;</span> ctx <span style="color:#f92672">=</span> tvm<span style="color:#f92672">.</span>cpu(<span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">with</span> relay<span style="color:#f92672">.</span>build_config(opt_level<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>):     executor <span style="color:#f92672">=</span> relay<span style="color:#f92672">.</span>build_module<span style="color:#f92672">.</span>create_executor(<span style="color:#e6db74">&#39;graph&#39;</span>, func, ctx, target) <span style="color:#75715e"># Perform the prediction</span> dtype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;float32&#39;</span> tvm_out <span style="color:#f92672">=</span> executor<span style="color:#f92672">.</span>evaluate(func)(tvm<span style="color:#f92672">.</span>nd<span style="color:#f92672">.</span>array(x<span style="color:#f92672">.</span>astype(dtype)), <span style="color:#f92672">**</span>params) print(np<span style="color:#f92672">.</span>argmax(tvm_out<span style="color:#f92672">.</span>asnumpy()[<span style="color:#ae81ff">0</span>])) </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ python3 cnnPredict_tvm.py In <span style="color:#e6db74">`</span>main<span style="color:#e6db74">`</span>:  v0.0.1 fn <span style="color:#f92672">(</span>%conv2d_1_input, %v_param_1: Tensor<span style="color:#f92672">[(</span>32, 1, 3, 3<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_2: Tensor<span style="color:#f92672">[(</span>32,<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_3: Tensor<span style="color:#f92672">[(</span>64, 32, 3, 3<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_4: Tensor<span style="color:#f92672">[(</span>64,<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_5: Tensor<span style="color:#f92672">[(</span>128, 9216<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_6: Tensor<span style="color:#f92672">[(</span>128,<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_7: Tensor<span style="color:#f92672">[(</span>10, 128<span style="color:#f92672">)</span>, float32<span style="color:#f92672">]</span>, %v_param_8: Tensor<span style="color:#f92672">[(</span>10,<span style="color:#f92672">)</span>, float32<span style="color:#f92672">])</span> <span style="color:#f92672">{</span>   %0 <span style="color:#f92672">=</span> nn.conv2d<span style="color:#f92672">(</span>%conv2d_1_input, %v_param_1, channels<span style="color:#f92672">=</span>32, kernel_size<span style="color:#f92672">=[</span>3, 3<span style="color:#f92672">])</span>   %1 <span style="color:#f92672">=</span> nn.bias_add<span style="color:#f92672">(</span>%0, %v_param_2<span style="color:#f92672">)</span>   %2 <span style="color:#f92672">=</span> nn.relu<span style="color:#f92672">(</span>%1<span style="color:#f92672">)</span>   %3 <span style="color:#f92672">=</span> nn.conv2d<span style="color:#f92672">(</span>%2, %v_param_3, channels<span style="color:#f92672">=</span>64, kernel_size<span style="color:#f92672">=[</span>3, 3<span style="color:#f92672">])</span>   %4 <span style="color:#f92672">=</span> nn.bias_add<span style="color:#f92672">(</span>%3, %v_param_4<span style="color:#f92672">)</span>   %5 <span style="color:#f92672">=</span> nn.relu<span style="color:#f92672">(</span>%4<span style="color:#f92672">)</span>   %6 <span style="color:#f92672">=</span> nn.max_pool2d<span style="color:#f92672">(</span>%5, pool_size<span style="color:#f92672">=[</span>2, 2<span style="color:#f92672">]</span>, strides<span style="color:#f92672">=[</span>2, 2<span style="color:#f92672">])</span>an internal invariant was violated <span style="color:#66d9ef">while</span> typechecking your program <span style="color:#f92672">[</span>22:21:27<span style="color:#f92672">]</span> tvm/src/relay/op/nn/pooling.cc:73: Check failed: data !<span style="color:#f92672">=</span> nullptr:  ;    %7 <span style="color:#f92672">=</span> transpose<span style="color:#f92672">(</span>%6, axes<span style="color:#f92672">=[</span>0, 2, 3, 1<span style="color:#f92672">])</span>   %8 <span style="color:#f92672">=</span> nn.batch_flatten<span style="color:#f92672">(</span>%7<span style="color:#f92672">)</span>   %9 <span style="color:#f92672">=</span> nn.dense<span style="color:#f92672">(</span>%8, %v_param_5, units<span style="color:#f92672">=</span>128<span style="color:#f92672">)</span>   %10 <span style="color:#f92672">=</span> nn.bias_add<span style="color:#f92672">(</span>%9, %v_param_6<span style="color:#f92672">)</span>   %11 <span style="color:#f92672">=</span> nn.relu<span style="color:#f92672">(</span>%10<span style="color:#f92672">)</span>   %12 <span style="color:#f92672">=</span> nn.dense<span style="color:#f92672">(</span>%11, %v_param_7, units<span style="color:#f92672">=</span>10<span style="color:#f92672">)</span>   %13 <span style="color:#f92672">=</span> nn.bias_add<span style="color:#f92672">(</span>%12, %v_param_8<span style="color:#f92672">)</span>   nn.softmax<span style="color:#f92672">(</span>%13, axis<span style="color:#f92672">=</span>1<span style="color:#f92672">)</span> <span style="color:#f92672">}</span> </code></pre></div></div><p>扯，結果竟然一模一樣。</p> <h2 id="檢驗剛剛建立的模型是否正確">檢驗剛剛建立的模型是否正確</h2> <p>總之先試試看是不是跟直接讀 <code>cnn.h5</code> 一樣。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> nnvm <span style="color:#f92672">import</span> tvm <span style="color:#f92672">import</span> tvm.relay <span style="color:#66d9ef">as</span> relay <span style="color:#f92672">from</span> scipy.misc <span style="color:#f92672">import</span> imread, imresize <span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np <span style="color:#f92672">import</span> keras <span style="color:#f92672">from</span> keras.models <span style="color:#f92672">import</span> load_model <span style="color:#f92672">from</span> keras.datasets <span style="color:#f92672">import</span> mnist <span style="color:#f92672">from</span> keras.models <span style="color:#f92672">import</span> Sequential <span style="color:#f92672">from</span> keras.layers <span style="color:#f92672">import</span> Dense, Dropout, Flatten, InputLayer <span style="color:#f92672">from</span> keras.layers <span style="color:#f92672">import</span> Conv2D, MaxPooling2D num_classes <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span> x <span style="color:#f92672">=</span> imread(<span style="color:#e6db74">&#39;test3.png&#39;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;L&#39;</span>) <span style="color:#75715e"># Compute a bit-wise inversion so black becomes white and vice versa</span> x <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>invert(x) <span style="color:#75715e"># Make it the right size</span> x <span style="color:#f92672">=</span> imresize(x,(<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>)) <span style="color:#75715e"># Convert to a 4D tensor to feed into our model</span> x <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>reshape(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">1</span>) x <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;float32&#39;</span>) x <span style="color:#f92672">/=</span> <span style="color:#ae81ff">255</span> <span style="color:#75715e"># Construct a MNIST model</span> model <span style="color:#f92672">=</span> Sequential() model<span style="color:#f92672">.</span>add(Conv2D(<span style="color:#ae81ff">32</span>, kernel_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>), activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>, input_shape<span style="color:#f92672">=</span>(<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">1</span>))) model<span style="color:#f92672">.</span>add(Conv2D(<span style="color:#ae81ff">64</span>, kernel_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>), activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>)) model<span style="color:#f92672">.</span>add(MaxPooling2D(pool_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>))) model<span style="color:#f92672">.</span>add(Dropout(<span style="color:#ae81ff">0.25</span>)) model<span style="color:#f92672">.</span>add(Flatten()) model<span style="color:#f92672">.</span>add(Dense(<span style="color:#ae81ff">128</span>, activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>)) model<span style="color:#f92672">.</span>add(Dropout(<span style="color:#ae81ff">0.5</span>)) model<span style="color:#f92672">.</span>add(Dense(num_classes, activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;softmax&#39;</span>)) <span style="color:#75715e"># Load the weights that we get from last program</span> model<span style="color:#f92672">.</span>load_weights(<span style="color:#e6db74">&#39;mnist_weights.h5&#39;</span>) <span style="color:#75715e"># Perform the prediction</span> out <span style="color:#f92672">=</span> model<span style="color:#f92672">.</span>predict(x) print(np<span style="color:#f92672">.</span>argmax(out)) </code></pre></div></div><p>很好，是一樣&hellip;.</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ python3 cnnPredict.py <span style="color:#ae81ff">3</span> </code></pre></div></div><h2 id="突破加個輸入層">突破，加個輸入層？</h2> <p>在找解決方式的過程中突然看到<a href="https://stackoverflow.com/a/49600827/6734174">這裡</a>提到有 <code>InputLayer</code>，不如加看看。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> nnvm <span style="color:#f92672">import</span> tvm <span style="color:#f92672">import</span> tvm.relay <span style="color:#66d9ef">as</span> relay <span style="color:#f92672">from</span> scipy.misc <span style="color:#f92672">import</span> imread, imresize <span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np <span style="color:#f92672">import</span> keras <span style="color:#f92672">from</span> keras.models <span style="color:#f92672">import</span> load_model <span style="color:#f92672">from</span> keras.datasets <span style="color:#f92672">import</span> mnist <span style="color:#f92672">from</span> keras.models <span style="color:#f92672">import</span> Sequential <span style="color:#f92672">from</span> keras.layers <span style="color:#f92672">import</span> Dense, Dropout, Flatten, InputLayer <span style="color:#f92672">from</span> keras.layers <span style="color:#f92672">import</span> Conv2D, MaxPooling2D num_classes <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span> input_shape <span style="color:#f92672">=</span> (<span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">1</span>) x <span style="color:#f92672">=</span> imread(<span style="color:#e6db74">&#39;test3.png&#39;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;L&#39;</span>) <span style="color:#75715e"># Compute a bit-wise inversion so black becomes white and vice versa</span> x <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>invert(x) <span style="color:#75715e"># Make it the right size</span> x <span style="color:#f92672">=</span> imresize(x,(<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>)) <span style="color:#75715e"># Convert to a 4D tensor to feed into our model</span> x <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>reshape(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">28</span>,<span style="color:#ae81ff">1</span>) x <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;float32&#39;</span>) x <span style="color:#f92672">/=</span> <span style="color:#ae81ff">255</span> <span style="color:#75715e"># model = load_model(&#39;cnn.h5&#39;)</span> <span style="color:#75715e"># Construct a MNIST model</span> model <span style="color:#f92672">=</span> Sequential() model<span style="color:#f92672">.</span>add(InputLayer(input_shape<span style="color:#f92672">=</span>input_shape)) model<span style="color:#f92672">.</span>add(Conv2D(<span style="color:#ae81ff">32</span>, kernel_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>), activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>, input_shape<span style="color:#f92672">=</span>input_shape)) model<span style="color:#f92672">.</span>add(Conv2D(<span style="color:#ae81ff">64</span>, kernel_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>), activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>)) model<span style="color:#f92672">.</span>add(MaxPooling2D(pool_size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>))) model<span style="color:#f92672">.</span>add(Dropout(<span style="color:#ae81ff">0.25</span>)) model<span style="color:#f92672">.</span>add(Flatten()) model<span style="color:#f92672">.</span>add(Dense(<span style="color:#ae81ff">128</span>, activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;relu&#39;</span>)) model<span style="color:#f92672">.</span>add(Dropout(<span style="color:#ae81ff">0.5</span>)) model<span style="color:#f92672">.</span>add(Dense(num_classes, activation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;softmax&#39;</span>)) <span style="color:#75715e"># Load the weights that we get from last program</span> model<span style="color:#f92672">.</span>load_weights(<span style="color:#e6db74">&#39;mnist_weights.h5&#39;</span>) shape_dict <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;input_1&#39;</span>: (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">28</span>)} func, params <span style="color:#f92672">=</span> relay<span style="color:#f92672">.</span>frontend<span style="color:#f92672">.</span>from_keras(model, shape_dict) target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;llvm&#34;</span> ctx <span style="color:#f92672">=</span> tvm<span style="color:#f92672">.</span>cpu(<span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">with</span> relay<span style="color:#f92672">.</span>build_config(opt_level<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>):     executor <span style="color:#f92672">=</span> relay<span style="color:#f92672">.</span>build_module<span style="color:#f92672">.</span>create_executor(<span style="color:#e6db74">&#39;graph&#39;</span>, func, ctx, target) <span style="color:#75715e"># Pperform the prediction</span> dtype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;float32&#39;</span> tvm_out <span style="color:#f92672">=</span> executor<span style="color:#f92672">.</span>evaluate(func)(tvm<span style="color:#f92672">.</span>nd<span style="color:#f92672">.</span>array(x<span style="color:#f92672">.</span>astype(dtype)), <span style="color:#f92672">**</span>params) print(np<span style="color:#f92672">.</span>argmax(tvm_out<span style="color:#f92672">.</span>asnumpy()[<span style="color:#ae81ff">0</span>])) </code></pre></div></div><div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ python3 test_mnist.py <span style="color:#ae81ff">3</span> </code></pre></div></div><p>扯，竟然過了 QuQ</p> <h1 id="其他">其他</h1> <h2 id="lutzroedernetronhttpsgithubcomlutzroedernetron"><a href="https://github.com/lutzroeder/netron"><code>lutzroeder/netron</code></a></h2> <p>發現了一個視覺化工具可以看模型。 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=18rjO-BiQTXRsSDAtisBkyEEhkO2sIBoP" alt="NETRON" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">NETRON</center>   </figcaption> </figure> </p> <h2 id="想看中間的-shape-的話">想看中間的 shape 的話</h2> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">for</span> layer <span style="color:#f92672">in</span> model<span style="color:#f92672">.</span>layers:     print(layer<span style="color:#f92672">.</span>input_shape)     print(layer<span style="color:#f92672">.</span>input)     print(layer<span style="color:#f92672">.</span>output_shape)     print(layer<span style="color:#f92672">.</span>output)     print(<span style="color:#e6db74">&#34;---&#34;</span>) </code></pre></div></div>
        ]]></description></item><item><title>Github Flow (2)</title><link>https://aben20807.github.io/posts/20190421-github-flow-2/</link><pubDate>Sun, 21 Apr 2019 19:13:02 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190421-github-flow-2/</guid><description><![CDATA[
            <p>針對昨天的再多釐清一些。順便補充一些東西。</p>
          
            <p><a href="https://aben20807.github.io/posts/20190421-github-flow-2/"><img src="https://drive.google.com/uc?export=view&amp;id=1oerWXAO9-X5k8wb1ixdAmnaqgCFFAizP" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190421-github-flow-2/">Visit website to read the full article</a></p>
            <p>針對昨天的再多釐清一些。順便補充一些東西。</p> <h1 id="關於流程">關於流程</h1> <p>昨天的流程主要是有需要 fork 的，通常是針對那些你無法對原始專案直接操作的狀況。</p> <p>如果對同一個專案使用 GitHub flow 也是可以的，也就是說在同一個專案中開啟 branch 在對自己開啟 PR，或許這就是我一開始有點困惑的原因，結果是都適用。</p> <h1 id="pr-被-merge-後呢">PR 被 merge 後呢</h1> <h2 id="更新-merge-commit">更新 merge commit</h2> <p>接下來要做的就是更新一下自己的 master (origin 跟 local)。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git fetch upstream $ git checkout master $ git merge upstream/master $ git push origin master </code></pre></div></div><h2 id="刪除-branch">刪除 branch</h2> <p>GitHub 上在被 merge 的 PR 的界面會出現可以刪除 branch 的按鈕。 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1MM_kFgO6PWBnPRPp9Ry3BgX4Lf6j2U3i" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>刪除完成後會出現提示，貌似還可以復原呢。這個步驟後你帳號遠端上的那個 branch 就不見了。 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1Q39-VcdZ36CqtvOh0NCu1Ix35JxwuzaQ" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>再來是更新到本地端。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 列出本地端的分支 (加上遠端記錄)</span> $ git branch -a </code></pre></div></div><p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1QifWjcp6goVP329L8aBoeV98yVze_XAc" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>刪除遠端記錄</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 模擬遠端可刪除分支</span> $ git remote prune origin --dry-run <span style="color:#75715e"># 執行刪除</span> $ git remote prune origin </code></pre></div></div><p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1w1LtPh3fYn6s2EO21yof6Xh8T60Gw-Zc" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1MdDsIHfyFUX9hAmorRbWYmg8tv0HYtO0" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>刪除本地分支後就大功告成</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git branch -d new_feature </code></pre></div></div><h1 id="參考">參考</h1> <ul> <li><a href="http://www.fizerkhan.com/blog/posts/Clean-up-your-local-branches-after-merge-and-delete-in-GitHub.html">Clean up your local branches after merge and delete in GitHub</a></li> </ul>
        ]]></description></item><item><title>Github Flow</title><link>https://aben20807.github.io/posts/20190420-github-flow/</link><pubDate>Sat, 20 Apr 2019 21:04:32 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190420-github-flow/</guid><description><![CDATA[
            <p>最近算是真的在用多人合作的 git 了，以前大多只有自己在 add, commit, push。不過到多人的合作下就講求流程，這裡以 GitHub flow 為主要的流程做討論以及順便記錄一些會用到的指令。</p>
          
            <p><a href="https://aben20807.github.io/posts/20190420-github-flow/"><img src="https://drive.google.com/uc?export=view&amp;id=1oerWXAO9-X5k8wb1ixdAmnaqgCFFAizP" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190420-github-flow/">Visit website to read the full article</a></p>
            <p>最近算是真的在用多人合作的 git 了，以前大多只有自己在 add, commit, push。不過到多人的合作下就講求流程，這裡以 GitHub flow 為主要的流程做討論以及順便記錄一些會用到的指令。</p> <h1 id="前言">前言</h1> <p>其實是看了 <a href="https://guides.github.com/introduction/flow/">Understanding the GitHub flow</a> 之後還不是相當懂，跟同學(大神)討論了一下算是有釐清一些我的懷疑吧。</p> <p>p.s. 這裡有翻譯版：<a href="https://medium.com/@trylovetom/%E8%AE%93%E6%88%91%E5%80%91%E4%BE%86%E4%BA%86%E8%A7%A3-github-flow-%E5%90%A7-4144caf1f1bf">讓我們來了解 GitHub Flow 吧！</a></p> <p>&lt;注意&gt; 因為目前專案還不算大型，所以目前遇到的狀況算是比較簡易的。 &lt;注意&gt; 由於我也是初心者，如果我有誤解的話請跟我說，感激不盡。</p> <h1 id="github-flow">GitHub flow</h1> <p>這個流程，主要是去掉 Git flow 有兩條主線的麻煩。不過誰比較好，還是得看用途，更有 GitLab flow 是合併兩個來用的＠＠</p> <blockquote> <p>GitHub flow 只專注在 master 身上，從 master 上開啟 feature branch，在該 branch 上開發(會有一些 commit)，最後在透過 PR(pull request) 合併到 master。</p> </blockquote> <p>上面這句看似簡單，其實相當複雜，我盡量詳盡解釋。</p> <p>更清楚的解釋應該為：</p> <blockquote> <p>從主要專案(upstream) fork 一份到自己的帳號(origin)，修改 origin，從 origin/master 新增分支，開發完後將分支 push 到 origin/新分支 上後直接用新分支對 upstream/master 開啟 PR。</p> </blockquote> <h1 id="fork-and-pr">Fork and PR</h1> <p>首先，PR 可以達到討論及 code review 的效果，為了達到 PR 我們必須把主專案 fork 一份到自己的帳號。而 PR 的方式主要就是透過 GitHub 網頁提供的界面進行操作。</p> <p>不過，我試了一下，發現同一個 repo 還是可以透過 branch 發 PR 的，這我就有點不確定為何一定要 fork，或許 fork 是不一定，不過更改自己的 repo 會比較心安一點，尤其若是常使用&hellip;. <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1poKsFmBeJ650xMa6OtgxMUGNE8NYo8fy" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <h1 id="branch">Branch</h1> <p>Branch 在 git 中花費相當少，因為它就只是一個標籤，所以應該盡量使用它。GitHub flow 中保證 master 上的每一個版本都是可佈署的，因此在此流程中不建議直接在 master 上加 commit 而是在 master 上開一個 branch 出來。</p> <p>&lt;注意&gt; 一定要從 master 開 branch 但是又有一個特例：就是當別人還沒 merge 我的 PR 可是我接下來的開發又需要有這個 PR 的內容的時候。網路上我找到有人問這個問題 <a href="https://softwareengineering.stackexchange.com/questions/310427/in-github-flow-is-it-ok-to-base-feature-branch-on-another-feature-branch">傳送門</a>，好像就只能在 branch 分出另一個 branch 來先暫時用。</p> <h1 id="流程">流程</h1> <h2 id="初始化">初始化</h2> <ol> <li>Fork 主要專案到自己的 GitHub 帳號</li> <li>Clone 自己 GitHub 中的專案 (fork 過來的)</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git clone &lt;自己專案的 url&gt; </code></pre></div></div><ol start="3"> <li>設定 upstream 來源</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git remote add upstream &lt;主要專案的 url&gt; </code></pre></div></div><h2 id="開發中">開發中</h2> <ol> <li>前往 master 分支 (一開始就在 master 可以不用)</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout master </code></pre></div></div><ol start="2"> <li>新增並前往 feature 分支</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout -b new_feature </code></pre></div></div><ol start="3"> <li>開始開發功能</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git add XXX $ git commit </code></pre></div></div><ol start="4"> <li>push 到自己帳號的專案 (3. 4. 可以混用，push 完後一樣可以 commit 再 push)</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git push origin new_feature </code></pre></div></div><ol start="5"> <li>準備發起 PR，先把專案更新到最新，也就是把 upstream 的東西更新到自己本地端</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout master $ git fetch upstream $ git merge upstream/master </code></pre></div></div><ol start="6"> <li>回到 feature 分支把 master 中從 upstream 來的新 commit 更新回 feature branch</li> </ol> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout new_feature $ git rebase master $ git push origin new_feature </code></pre></div></div><ol start="7"> <li>發 PR 開啟 GitHub 界面，按下 Create pull request 的綠色按鈕，注意方向，輸入標題、解說文字、新增 reviewer 後按下 Create。這樣就大公告成了。</li> </ol> <h1 id="參考資料">參考資料</h1> <ul> <li><a href="https://medium.com/@yengttt/%E9%96%8B%E7%99%BC%E7%94%A8%E5%88%B0%E7%9A%84git%E6%B5%81%E7%A8%8B-c9082b914974">這次專案用到的Git流程</a>：本篇主要流程來自這裡，更詳盡請點擊參考。</li> <li><a href="https://poychang.github.io/guide-to-use-github-flow/">如何使用 GitHub Flow 來參與開源專案</a></li> </ul>
        ]]></description></item><item><title>不同路徑之 Git Patch</title><link>https://aben20807.github.io/posts/20190403-git-patch-different-directory/</link><pubDate>Wed, 03 Apr 2019 16:50:28 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190403-git-patch-different-directory/</guid><description><![CDATA[
            <p>最近也算常用 git，不過有些特殊的功能都沒用過，這次也不算是學學看，而是真的要用到了，總之就是還個技術債順便記錄。不過會用到這個情境的應該算是少數。</p>
          
            <p><a href="https://aben20807.github.io/posts/20190403-git-patch-different-directory/"><img src="https://drive.google.com/uc?export=view&amp;id=1oerWXAO9-X5k8wb1ixdAmnaqgCFFAizP" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190403-git-patch-different-directory/">Visit website to read the full article</a></p>
            <p>最近也算常用 git，不過有些特殊的功能都沒用過，這次也不算是學學看，而是真的要用到了，總之就是還個技術債順便記錄。不過會用到這個情境的應該算是少數。</p> <h1 id="tldr">tl;dr</h1> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git format-patch --relative &lt;SHA&gt; ./ -o /tmp/patches $ git am /tmp/patches/*.patch </code></pre></div></div><h1 id="前言">前言</h1> <p>git 有一個好用的工具可以針對 repo 上面的 commit 產生補丁檔 (patch)。詳細用法可以去查看官方說明文件 <a href="https://git-scm.com/docs/git-format-patch">git format-patch</a>。</p> <p>這裡主要記錄一個使用情境：要把專案A 下的子專案a 的修改記錄做成 patch 給專案B 使用，注意，專案a 與專案B 是同一個專案。</p> <p>會有這樣需求主要是因為 B 是開源專案，然後我們拿來修改後變成 A 的子專案。當然最好的方式是用 fork，然後利用 submodule 管理，不過因為只有一個 repo 可以使用，所以就採用這個作法。</p> <p>限制：內部檔案名稱要相同</p> <h1 id="範例檔案架構">範例檔案架構</h1> <p>接下來利用簡單的範例來模擬。</p> <p><code>repo A</code>:</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">A ├── a │   └── file_1.txt └── sth_in_A.txt * a257187 - <span style="color:#f92672">(</span>HEAD -&gt; master<span style="color:#f92672">)</span> Add sth in A * a1f4b9e - init </code></pre></div></div><p><code>repo B</code>:</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">B └── file_1.txt * 63998ea - <span style="color:#f92672">(</span>HEAD -&gt; master<span style="color:#f92672">)</span> init </code></pre></div></div><p>接著進行一些修改 (記得用 git 去追蹤修改記錄)</p> <p>我們測試一些不同的行為，可以從下方 commit message 看出，同時修改(<code>eb948ee</code>)也可以喔</p> <p>大概像是這樣</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">A ├── a │   ├── file_1.txt │   └── file_2.txt └── sth_in_A.txt * 0f5c75e - <span style="color:#f92672">(</span>HEAD -&gt; master<span style="color:#f92672">)</span> Add file_2 in a * eb948ee - Modify file_1 and sth_in_A.txt * 26bde10 - Modify sth_in_A.txt * b551578 - Modify file_1 * a257187 - Add sth in A * a1f4b9e - init </code></pre></div></div><h1 id="產生-patch">產生 patch</h1> <p>開始產生 patch 囉，首先 <code>cd</code> 到子資料夾，接著打入下方指令，<code>a1f4b9e</code> 是起始 commit，如果這個子專案是從中間才開始追蹤的話也可以從中間的 commit 開始。可以看到它只會針對 a 中有修改的部份才產生 patch 檔。<code>-o</code> 是指定輸出的路徑，完全可以依照自己喜好修改。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cd A/a/ $ git format-patch --relative a1f4b9e ./ -o /tmp/patches /tmp/patches/0001-Modify-file_1.patch /tmp/patches/0002-Modify-file_1-and-sth_in_A.txt.patch /tmp/patches/0003-Add-file_2-in-a.patch </code></pre></div></div><h1 id="套用-patch">套用 patch</h1> <p>套用 patch 到專案B</p> <pre tabindex="0"><code class="language-bach" data-lang="bach">$ cd B/ $ git am /tmp/patches/*.patch Applying: Modify file_1 Applying: Modify file_1 and sth_in_A.txt Applying: Add file_2 in a </code></pre><p>最後可以看到它把所有的 commit 都一一重現</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">B ├── file_1.txt └── file_2.txt * e28e672 - <span style="color:#f92672">(</span>HEAD -&gt; master<span style="color:#f92672">)</span> Add file_2 in a * 24d4693 - Modify file_1 and sth_in_A.txt * 96d0b8c - Modify file_1 * 63998ea - init </code></pre></div></div>
        ]]></description></item><item><title>Makefile Help Message</title><link>https://aben20807.github.io/posts/20190402-makefile-help-message/</link><pubDate>Tue, 02 Apr 2019 09:06:15 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190402-makefile-help-message/</guid><description><![CDATA[
            <p>最近蠻常用 Makefile 的，想說寫一個 help 選項，這樣就不用要使用時都要打開 Makefile 看怎麼用，意外查到可以使用小技巧來印出 help。達到註解及文件的效果。</p>
          
            <p><a href="https://aben20807.github.io/posts/20190402-makefile-help-message/"><img src="https://drive.google.com/uc?export=view&amp;id=1jMqjSm6HUMHY3QBm0x51leBBmvBW5EEu" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190402-makefile-help-message/">Visit website to read the full article</a></p>
            <p>最近蠻常用 Makefile 的，想說寫一個 help 選項，這樣就不用要使用時都要打開 Makefile 看怎麼用，意外查到可以使用小技巧來印出 help。達到註解及文件的效果。</p> <p>原本可能在寫完所有 rule 後要再加一個 <code>help</code> 來寫準備印出來給使用者的內容。如下：</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#a6e22e">action1</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Do action 1. </span><span style="color:#75715e"></span>	@printf <span style="color:#e6db74">&#34;Doing action 1...&#34;</span> <span style="color:#a6e22e">action2</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Do action 2. </span><span style="color:#75715e"></span>	@printf <span style="color:#e6db74">&#34;Doing action 2...&#34;</span> <span style="color:#a6e22e">help</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Show help message. </span><span style="color:#75715e"></span>	@printf <span style="color:#e6db74">&#34;Usage:\n&#34;</span> 	@printf <span style="color:#e6db74">&#34;  make &lt;target&gt;\n\n&#34;</span> 	@printf <span style="color:#e6db74">&#34;Targets:\n&#34;</span> 	@printf <span style="color:#e6db74">&#34;  action1\tDo action 1.\n&#34;</span> 	@printf <span style="color:#e6db74">&#34;  action2\tDo action 2.\n&#34;</span> 	@printf <span style="color:#e6db74">&#34;  help\t\tShow help message.\n&#34;</span> </code></pre></div></div><p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1IwQiOPfxIXVfPhZ76N7UX497HuZ-lA3m" alt="結果" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">結果</center>   </figcaption> </figure> </p> <p>這種方式在數量一多下會很麻煩，尤其是要不斷確認上面是否有被更動。所以找到許多人針對每個 target 的註解去產生 help 資訊。這裡使用 perl 跟 awk 幫忙。</p> <p>下方印出的結果同上就不貼圖片了。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#a6e22e">action1</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Do action 1. </span><span style="color:#75715e"></span>	@printf <span style="color:#e6db74">&#34;Doing action 1...&#34;</span> <span style="color:#a6e22e">action2</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Do action 2. </span><span style="color:#75715e"></span>	@printf <span style="color:#e6db74">&#34;Doing action 2...&#34;</span> <span style="color:#a6e22e">help</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Show help message. </span><span style="color:#75715e"></span>	@printf <span style="color:#e6db74">&#34;Usage:\n&#34;</span> 	@printf <span style="color:#e6db74">&#34;  make &lt;target&gt;\n\n&#34;</span> 	@printf <span style="color:#e6db74">&#34;Targets:\n&#34;</span> 	@perl -nle<span style="color:#e6db74">&#39;print $&amp; if m{^[a-zA-Z0-9_-]+:.*?## .*$$}&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | <span style="color:#ae81ff">\ </span><span style="color:#ae81ff"></span>		sort | <span style="color:#ae81ff">\ </span><span style="color:#ae81ff"></span>		awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;}; \ </span><span style="color:#e6db74">		{printf &#34;  %-18s %s\n&#34;, $$1, $$2}&#39;</span> </code></pre></div></div><p>稍微解釋一下 perl 那一行</p> <p>首先就是先使用 regexp 去 match 符合的表達式，<code>^[a-zA-Z0-9_-]+:.*?## .*$$</code> 表示由一個單字(可能含數字)開頭 <code>:</code> 後方是相依的部份，最後是用 <code>##</code> 註解的描述。</p> <p>接著利用 pipe (<code>|</code>) 給 awk，它可以針對欄 (column) 去操作文字，<code>BEGIN</code> 區塊表示初始化宣告，也就是輸入的字串是用 <code>##</code> 當作分割符號，最後利用 <code>printf()</code> 去把第一欄及第二欄印出來。</p> <p>最後最後，加上點顏色頗不錯 OuO</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#75715e"># color </span><span style="color:#75715e"></span>BLUE <span style="color:#f92672">=</span> <span style="color:#ae81ff">\0</span>33<span style="color:#f92672">[</span>34m NC <span style="color:#f92672">=</span> <span style="color:#ae81ff">\0</span>33<span style="color:#f92672">[</span>0m <span style="color:#a6e22e">action1</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Do action 1. </span><span style="color:#75715e"></span>	@printf <span style="color:#e6db74">&#34;Doing action 1...&#34;</span> <span style="color:#a6e22e">action2</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Do action 2. </span><span style="color:#75715e"></span>	@printf <span style="color:#e6db74">&#34;Doing action 2...&#34;</span> <span style="color:#a6e22e">help</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Show help message. </span><span style="color:#75715e"></span>	@printf <span style="color:#e6db74">&#34;Usage:\n&#34;</span> 	@printf <span style="color:#e6db74">&#34;  make </span><span style="color:#66d9ef">$(</span>BLUE<span style="color:#66d9ef">)</span><span style="color:#e6db74">&lt;target&gt;</span><span style="color:#66d9ef">$(</span>NC<span style="color:#66d9ef">)</span><span style="color:#e6db74">\n\n&#34;</span> 	@printf <span style="color:#e6db74">&#34;Targets:\n&#34;</span> 	@perl -nle<span style="color:#e6db74">&#39;print $&amp; if m{^[a-zA-Z0-9_-]+:.*?## .*$$}&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | <span style="color:#ae81ff">\ </span><span style="color:#ae81ff"></span>		sort | <span style="color:#ae81ff">\ </span><span style="color:#ae81ff"></span>		awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;}; \ </span><span style="color:#e6db74">		{printf &#34;$(BLUE)  %-18s$(NC) %s\n&#34;, $$1, $$2}&#39;</span> </code></pre></div></div><p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1RTn1OcTBserVT9XOFhDRSFA2f3Lx1R-G" alt="有顏色版本" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">有顏色版本</center>   </figcaption> </figure> </p> <h3 id="參考資料">參考資料</h3> <ul> <li><a href="https://nedbatchelder.com/blog/201804/makefile_help_target.html">Makefile help target</a></li> </ul>
        ]]></description></item><item><title>First Met Hugo</title><link>https://aben20807.github.io/posts/20190321-first-met-hugo/</link><pubDate>Thu, 21 Mar 2019 22:20:12 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190321-first-met-hugo/</guid><description><![CDATA[
            <p>正常轉換跑道時都會有一篇推坑文，不過我這篇算比較晚了，也不是為了摸久一點，就感覺好像一直沒啥時間寫文章。  就請多見諒＠＠</p>
          
            <p><a href="https://aben20807.github.io/posts/20190321-first-met-hugo/"><img src="https://drive.google.com/uc?export=view&amp;id=1uRxzv04K2tSTBayXsGRSMKmK6CgstZ03" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190321-first-met-hugo/">Visit website to read the full article</a></p>
            <p>正常轉換跑道時都會有一篇推坑文，不過我這篇算比較晚了，也不是為了摸久一點，就感覺好像一直沒啥時間寫文章。  就請多見諒＠＠</p> <h1 id="前言">前言</h1> <p>從 Blogger 轉出來的原因可以去關於的頁面看看，我就不再贅述，此篇主要也不會手把手的教學如何用 Hugo 從頭到尾架設一個網頁，因為網路上有相當多這類的教學，我主要是記錄一些比較特別地方。接著跟我唸三遍：</p> <blockquote> <p>前端坑好深，前端坑好深，前端坑好深</p> </blockquote> <h1 id="安裝">安裝</h1> <p>說不教好像也有點無情，不過在 GitHub 架 Hugo 真的太過簡單了，步驟真的算少，所以我就推給其他文章吧(可以先看完整篇再開始)：<a href="https://medium.com/@chs_wei/%E5%9C%A8-github-%E9%83%A8%E7%BD%B2-hugo-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-9c40682dfe40">在 GitHub 部署 Hugo 靜態網站</a></p> <h1 id="安裝---注意事項">安裝 - 注意事項</h1> <p>Ubuntu 請用 <code>snap</code> 來安裝比較新的版本，用 <code>apt</code> 會發現一堆主題不能用因為版本過舊。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo snap install hugo $ hugo version Hugo Static Site Generator v0.54.0 linux/amd64 BuildDate: 2019-02-01T13:33:06Z </code></pre></div></div><p>結果注意事項就把 Hugo 全部安裝完成了＠＠，部屬在 GitHub 就跟大部分用法相同。</p> <h1 id="部落格架構配置">部落格架構配置</h1> <p>因為 Hugo 會針對主題和文章經過 <code>hugo</code> 指令去產生一個完整的網站並預設放在 <code>public/</code> 資料夾。所以一般會把寫文章的地方跟網站分成兩個 repo，也就是把 <code>public/</code> push 到 <code>&lt;username&gt;.github.io</code>，寫文章的就創建另一個 <code>blog-post</code> 之類的 repo。這個作法可以使得網站不會被污染，也就是不會有奇怪的檔案，repo 也不會好像各種語言都有。</p> <p>但是，一般上面這種是會把主題的檔案都複製到你寫文章的 repo 裡這樣就可以自訂一些前端設計。</p> <p>我覺得這樣還不夠乾淨！因此我的方式是使用三個 repo：</p> <ul> <li>blog-post：存文章</li> <li>hugOuO：主題</li> <li>aben20807.github.io：發布網站</li> </ul> <p>沒錯，多一個 repo 追蹤主題，由於 Hugo 會自動的搜尋一些資料夾找尋網站設定，在一開始的資料夾找不到時，會根據 <code>config.toml</code> 中設定的主題去 <code>themes/</code> 找對應的主題，所以一開始的資料夾就不要有任何前端的檔案，除非像是 google analytics 需要放置規定的檔案，不然所有的前端設計 (架構, css, javascript) 都放在主題的 repo 中。當然這是給那些會修改別人主題的人的建議，如果是直接用現成的那就不需要多一個 repo 了。</p> <p>以下是一個簡單的檔案結構：</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">blog-post/ &lt;----------------------- repo 1: 存文章 ├── config.toml ├── content │   ├── about │   ├── _index.md │   └── posts/ &lt;------------------- 文章會在這裡 ├── themes/ │   └── hugOuO/ &lt;------------------ repo 2: 主題 │       ├── archetypes/ │       │   ├── default.md │       │   └── posts.md │       ├── layouts/ │       │   ├── 404.html │       │   ├── _default/ │       │   ├── index.html │       │   ├── index.json │       │   ├── index.rss.xml │       │   ├── partials/ │       │   └── shortcodes/ │       ├── static/ │       │   ├── css/ │       │   ├── img/ │       │   └── js/ │       └── theme.toml └── public/ &lt;---------------------- repo 3: 發布網站 </code></pre></div></div><h2 id="這樣安排的缺點">這樣安排的缺點</h2> <p>這麼多 repo 就是一個蠻大的缺點，不過若是非常在意的話可以利用 branch 來讓三個 repo 合併。  但是這個缺點有一個優點 (?)，就是可以刷 GitHub 的 contributions 啊！每次寫文章改一堆東西就會綠一片OuO</p> <h2 id="其他">其他</h2> <p>當然也可以利用 GitHub 和其他工具達到持續集成、部署，參考：<a href="https://axdlog.com/zh/2018/using-hugo-and-travis-ci-to-deploy-blog-to-github-pages-automatically/">利用Travis CI和Hugo將Blog自動部署到Github Pages</a>。不過我是有點點懶惰，所以我就用 <a href="https://github.com/aben20807/blog-post/blob/master/deploy.sh">script</a> 來部屬。</p> <p>還有 <code>blog-post</code> repo 可以用 <code>.gitattributes</code> 來讓 GitHub 把 markdown 當作一個語言來計算，<a href="https://github.com/aben20807/blog-post/blob/master/.gitattributes">傳送門</a>。 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1L-bAODhj57C7wFIBaWTgZuY0Sp0bEQFJ" alt="結果展示" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">結果展示</center>   </figcaption> </figure> </p> <h1 id="圖片">圖片</h1> <p>通常架設在 GitHub 的靜態網站都會直接把圖片也傳到 repo 中，雖然說這樣會比較快而且方便，但是我不建議用 git 去追蹤圖片，到最後會非常肥大。所以我一開始就有想說用 google 雲端當作一個圖床 (Flickr 1TB 回來啊QuQ)，反正有學校帳號算是有無限空間吧 (還是當學生的小福利＠＠)，再加上 google 圖片可以無限上傳，我手機拍照的圖片都會自動上傳了，然後也可以跟雲端連結，也就是說在 google 雲端透過檔案存取到 google 圖片的檔案。不過因為它的 api 還不是說很好用，就是雲端右鍵拿到的連結是不能直接嵌入網頁的，所以要手動複製 id，我覺得頗麻煩就乾脆寫一個可以偵測是否在 markdown 使用 google 雲端的圖片，然後把它轉成對應的 url 同時提供點擊就可以直接連過去，這樣就可以放大檢視了。</p> <p>作法就是我的文章若要用到 google 雲端的圖片就要用以下語法：</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">![<span style="color:#f92672">google-標題</span>](<span style="color:#a6e22e">從雲端裡面右鍵拿到的分享連結</span>) </code></pre></div></div><p>沒意外這篇文章內文都是用這個方式加圖片的，唯一缺點就是明顯慢很多＠＠，雖然慢會影響 SEO，不過算了，就會看的人就會來看吧。說到這個，流量很明顯跟 Blogger 時期差很多＠＠，實做<a href="https://github.com/aben20807/hugOuO/blob/master/layouts/partials/custom-content.html#L5-L23">傳送門</a>。</p> <h1 id="文章">文章</h1> <p>對於文章，我建議可以用日期當作檔名的前綴，以便排序。我的主題就會自動切割日期。Hugo 也有 permalinks 功能，就是把日期當作網站的路徑，不過我懶得用了＠＠</p> <h1 id="優點啦">優點啦</h1> <ul> <li>單一執行檔，只需要安裝 hugo，其他什麼 ruby, python, node 都不用。</li> <li>建制快速，號稱目前地表最快，尤其當網站一多，目前有找到跟 Jekyll 的比較<a href="https://forestry.io/blog/hugo-vs-jekyll-benchmark/">傳送門</a>，跟 Hexo 的可能還要找一下。</li> <li>網站內容乾淨，也就是上面的缺點啦，我是覺得這是優點 OuO，分多個 repo 不是很好嗎。</li> </ul> <h1 id="有趣的功能">有趣的功能</h1> <p>下面這些功能其實不限於 Hugo，只要有想要其實都可以把它加到自己的網站，甚至是從頭自己刻的也可。不要忘了開頭念三次的東西 OuO</p> <h2 id="1-搜尋">1. 搜尋</h2> <p>由於之前 Blogger 算是內建搜尋的，所以這裡算是研究頗久，原本要使用一些已經做成套件的切字工具，但是中文字真的太難搞定了，所以我乾脆直接用 google 提供的搜尋：Google Custom Search。一樣，這裡就不一一教學，請移駕：<a href="https://blog.yowko.com/google-search-in-hugo/">將 Google自訂搜尋引擎 (Google Custom Search) 搭配 OpenSearch 加至 Hugo 網站中</a>。真的要參考實做的話可以來這個 <a href="https://github.com/aben20807/blog-post/commit/6f6b62898791322876091d4db98d580b8a7accdc#diff-44f0b83d58ef03d7cee156de462be50c">commit</a> 看看。對了，設定完後要等個幾天才會可以搜尋，我那時候以為我哪裡設定錯誤，結果等個幾天就可以用了。結果可以到這個<a href="https://aben20807.github.io/search/">頁面</a>查看。 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1YD4461mDTtn7MHssUOQxorRAiqkhRiVh" alt="搜尋範例" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">搜尋範例</center>   </figcaption> </figure> </p> <h2 id="2-toc-table-of-content">2. TOC (Table Of Content)</h2> <p>Hugo 算有提供 toc 工具，但是用起來沒這麼好看，例如它無法設定深度，不管幾層就都會做成 toc 也就是 h1~6 都有，造成空間浪費。這裡我也是弄超級久，最後我是參考 <a href="https://orianna-zzo.github.io/sci-tech/2018-08/blog%E5%85%BB%E6%88%90%E8%AE%B016-%E8%87%AA%E5%BB%BAhugo%E7%9A%84toc%E6%A8%A1%E6%9D%BF/#/hugo%E7%9A%84table-of-content">AllinOne</a> 這個主題的實做方式：<a href="https://github.com/orianna-zzo/AllinOne/blob/master/layouts/partials/toc.html">toc.html</a>。</p> <h2 id="3-headline-hash">3. Headline Hash</h2> <p>也就是滑鼠移到標題會出現一個 anchor 可以產生直接跳到這個標題的連結，直接參考：<a href="https://discourse.gohugo.io/t/adding-anchor-next-to-headers/1726">Adding anchor next to headers</a>。</p> <h2 id="4-smooth-scroll">4. Smooth Scroll</h2> <p>這個可以讓移動有滾動的動畫而不是直接跳到那邊，我是使用 <code>jquery.smooth-scroll.min.js</code> 來達成，請參考這個 <a href="https://github.com/aben20807/blog-post/commit/68fa52f8d25c90d003fec296081427d12c6724cf#diff-0aa74fe7c8cd2a2b79dab67ece16cb02">commit</a>。</p> <h2 id="5-scrollspy">5. Scrollspy</h2> <p>讓右邊的 toc 自動標記現在所在的標題位置，我是從 <a href="https://stackoverflow.com/questions/30348314/how-to-use-scrollspy-without-using-bootstrap/49257431#49257431">how to use scrollspy without using bootstrap 的其中一個回答</a> 改成這個 <a href="https://github.com/aben20807/blog-post/commit/94b0b7344de07858b4ed346bc76b30caafa71220#comments">commit</a></p> <p>2.3.4.5. 合起來差不多就是這樣： <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1Ent_uFFd1IuKhGna9hZ2uEBZ1cjoHw63" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <h2 id="6-自動換標題-ouo">6. 自動換標題 OuO</h2> <p>這算是一個有趣但是沒啥實用性的功能，我是在 <a href="https://diygod.me/">https://diygod.me/</a> 看到的，當你暫時離開去其他分頁時，它的標題就會變換。建議不要在手機上用這個功能。參考：<a href="https://blog.youdivi.com/tutorials/change-browser-tab-title-tab-not-active/">CHANGE BROWSER TAB TITLE WHEN TAB NOT ACTIVE</a>，<a href="https://github.com/aben20807/blog-post/commit/4a468cb27289453f1a53ccb05db50343877438d8#diff-0aa74fe7c8cd2a2b79dab67ece16cb02">commit</a>，如何排擠手機：<a href="https://stackoverflow.com/questions/3514784/what-is-the-best-way-to-detect-a-mobile-device-in-jquery/3540295#3540295">What is the best way to detect a mobile device in jQuery?</a> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1AF_3cXaG2gWU1VM5ybrrQDO2qXtEusGH" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <h2 id="7-e-mail-subscribe-mailchimphttpsmailchimpcom">7. E-mail subscribe (<a href="https://mailchimp.com/">mailchimp</a>)</h2> <p>原本 Blogger 有 G+ 當作一個社群平台來分享發布的文章，不過這裡就沒有了，我想說需要有一個方法來提供讀者訂閱，不能叫他自己去申請 GitHub 然後訂閱我網站的 repo 吧。所以我就找到這個服務，它免費版提供 2000 個訂閱者，一個月可以寄 12000 封 e-mail，對我來說算是非常夠用了(吧＠＠)，剛剛看原本還以為只有兩個人 (我跟我的分身帳號)，結果竟然多一個人了！還不來<a href="https://aben20807.github.io/subscription/">訂閱</a>？</p> <p>mailchimp 的用法其實官網就有提供，我英文不太行的看久一點就可以架設好服務了，我相信你們可以的 (?)</p> <h2 id="8-google-analytics">8. google analytics</h2> <p>Google 的流量監測，Hugo 已經有寫好可以直接用，在 <code>config.toml</code> 直接加上自己的 token 就好，然後還要上傳一個證明是自己網站的 html 檔案，放在 <code>static/</code> 裡面就可以。上面有提到流量差異大致上就如下，我 Blogger 那邊已經很久沒更新了，一天還是快 100 個人造訪呢 OuO。 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1XoxtAg5qZT_sDIrXc8HITfE5QBKN0nXF" alt="左：Blogger，右：這個網站QuQ" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">左：Blogger，右：這個網站QuQ</center>   </figcaption> </figure> </p> <h2 id="9-hued">9. hued</h2> <p>因為每次編輯時都要用很長的路徑 <code>content/posts/xxxx.md</code>，頗煩躁，所以就寫了一個把指令包起來的 script，安裝方式可以看 <a href="https://github.com/aben20807/blog-post#hued">README</a>，還有補全喔，雖然應該是只有 oh-my-bash 可用。</p> <h2 id="10-disqus-評論系統">10. Disqus 評論系統</h2> <p>設定方式跟 google analytics 一樣簡單，簡單到我都忘了要設定&hellip;.設定 short name 即可。</p>
        ]]></description></item><item><title>Emacs 安裝 rainbow-delimiters 插件</title><link>https://aben20807.github.io/posts/20190307-emacs-install-rainbow-delimiters/</link><pubDate>Thu, 07 Mar 2019 20:23:24 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190307-emacs-install-rainbow-delimiters/</guid><description><![CDATA[
            <p>恩&hellip;.身為一個 vimer，我還是想試試看 emacs，所以就選了系上的一堂教 lisp 的課。  本篇記錄一下安裝插件的過程  (雖然我這篇還是用 vim 打的&hellip;.</p>
          
            <p><a href="https://aben20807.github.io/posts/20190307-emacs-install-rainbow-delimiters/"><img src="https://drive.google.com/uc?export=view&amp;id=1Z2vwPs46qPbQTEnrqXEiniGTavMqA0hB" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190307-emacs-install-rainbow-delimiters/">Visit website to read the full article</a></p>
            <p>恩&hellip;.身為一個 vimer，我還是想試試看 emacs，所以就選了系上的一堂教 lisp 的課。  本篇記錄一下安裝插件的過程  (雖然我這篇還是用 vim 打的&hellip;.</p> <p>這個插件的名稱是 <code>rainbow-delimiters</code>，顧名思義就是讓對應的括號有相同的顏色，這在一堆括號的語言 lisp 中可以對初學者較為友善。</p> <h1 id="emacs-安裝">emacs 安裝</h1> <p>emacs 的安裝方式就還是提一下，不然我應該記不起來@@</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo add-apt-repository ppa:ubuntu-elisp/ppa $ sudo apt-get update $ sudo apt-get install emacs-snapshot emacs-snapshot-el </code></pre></div></div><h1 id="超基本按鍵">超基本按鍵</h1> <p>我是超新手，所以只暫時記錄最重要的@@</p> <ul> <li><code>ctrl-x ctrl-s</code>：儲存</li> <li><code>ctrl-x ctrl-c</code>：離開</li> </ul> <h1 id="新增設定檔">新增設定檔</h1> <p>首先需要新增一個設定檔，就像 vim 中的 <code>.vimrc</code> 一樣，而為了方便管理我使用 <code>~/.emacs.d/init.el</code>，我們就直接用 emacs 編輯吧～</p> <p>Note. <code>-nw</code> 可以用非 GUI 的方式開啟 emacs</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mkdir ~/.emacs.d/ $ emacs -nw ~/.emacs.d/init.el </code></pre></div></div><h1 id="支援-melpahttpsmelpaorg-插件庫">支援 <a href="https://melpa.org/#/">MELPA</a> 插件庫</h1> <p>打開之後貼上</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp">(<span style="color:#a6e22e">require</span> <span style="color:#e6db74">&#39;package</span>) (<span style="color:#66d9ef">let*</span> ((no-ssl (and (memq system-type <span style="color:#f92672">&#39;</span>(windows-nt ms-dos))                     (<span style="color:#a6e22e">not</span> (gnutls-available-p))))        (proto (<span style="color:#66d9ef">if</span> no-ssl <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;https&#34;</span>)))   <span style="color:#75715e">;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired                                         </span>   (add-to-list <span style="color:#e6db74">&#39;package-archives</span> (<span style="color:#a6e22e">cons</span><span style="color:#e6db74">&#34;melpa&#34;</span>(concat proto<span style="color:#e6db74">&#34;://melpa.org/packages/&#34;</span>)) <span style="color:#66d9ef">t</span>)   <span style="color:#75715e">;;(add-to-list &#39;package-archives (cons&#34;melpa-stable&#34;(concat proto&#34;://stable.melpa.org/packages/&#34;)) t)                            </span>   (when (<span style="color:#a6e22e">&lt;</span> emacs-major-version <span style="color:#ae81ff">24</span>)     <span style="color:#75715e">;; For important compatibility libraries like cl-lib                                                                           </span>     (add-to-list <span style="color:#e6db74">&#39;package-archives</span><span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;gnu&#34;</span> <span style="color:#f92672">.</span> (concat proto <span style="color:#e6db74">&#34;://elpa.gnu.org/packages/&#34;</span>))))) (package-initialize) </code></pre></div></div><h1 id="新增-rainbow-delimiters-插件">新增 <code>rainbow-delimiters</code> 插件</h1> <p>退出 (上面有記錄怎麼儲存跟離開) 後重新開啟 emacs</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ emacs -nw </code></pre></div></div><p>按下 <code>alt-x</code> 後輸入 <code>package-list-packages</code> 接著按下 <code>Enter</code> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1tcS1Yxs-I0J1Nf63528PVypU7LmrhDhG" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>會發現出現一個各種插件的頁面。</p> <p>搜尋方式請按 <code>ctrl-s</code> 後輸入 <code>rainbow-delimiters</code> 接著 <code>Enter</code>  即可找到 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1lQa5BBsjLRQxUheS41WTRi1maN1AtA90" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>在那一行按下 <code>i</code> 會發現最前方多了一個 <code>I</code></p> <p>Note. 要取消請按 <code>u</code> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1DuzQMOTEc4MO4HByxDhKCpVu30fr3FvV" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>選完後按下 <code>x</code> 就可以安裝了</p> <p>結果最後還需要加東西到 <code>~/emacs.d/init.el</code></p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp">(<span style="color:#a6e22e">require</span> <span style="color:#e6db74">&#39;rainbow-delimiters</span>) (add-hook <span style="color:#e6db74">&#39;prog-mode-hook</span> <span style="color:#e6db74">&#39;rainbow-delimiters-mode</span>) </code></pre></div></div><p>改完之後會發現有很淺的變色了</p> <h1 id="自訂顏色">自訂顏色</h1> <p>結果就如封面所示。</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp">(custom-set-variables  <span style="color:#f92672">&#39;</span>(package-selected-packages <span style="color:#f92672">&#39;</span>(rainbow-delimiters))) (custom-set-faces  <span style="color:#f92672">&#39;</span>(rainbow-delimiters-depth-1-face ((<span style="color:#66d9ef">t</span> (<span style="color:#e6db74">:foreground</span> <span style="color:#e6db74">&#34;dark orange&#34;</span>))))  <span style="color:#f92672">&#39;</span>(rainbow-delimiters-depth-2-face ((<span style="color:#66d9ef">t</span> (<span style="color:#e6db74">:foreground</span> <span style="color:#e6db74">&#34;deep pink&#34;</span>))))  <span style="color:#f92672">&#39;</span>(rainbow-delimiters-depth-3-face ((<span style="color:#66d9ef">t</span> (<span style="color:#e6db74">:foreground</span> <span style="color:#e6db74">&#34;chartreuse&#34;</span>))))  <span style="color:#f92672">&#39;</span>(rainbow-delimiters-depth-4-face ((<span style="color:#66d9ef">t</span> (<span style="color:#e6db74">:foreground</span> <span style="color:#e6db74">&#34;deep sky blue&#34;</span>))))  <span style="color:#f92672">&#39;</span>(rainbow-delimiters-depth-5-face ((<span style="color:#66d9ef">t</span> (<span style="color:#e6db74">:foreground</span> <span style="color:#e6db74">&#34;yellow&#34;</span>))))  <span style="color:#f92672">&#39;</span>(rainbow-delimiters-depth-6-face ((<span style="color:#66d9ef">t</span> (<span style="color:#e6db74">:foreground</span> <span style="color:#e6db74">&#34;orchid&#34;</span>))))  <span style="color:#f92672">&#39;</span>(rainbow-delimiters-depth-7-face ((<span style="color:#66d9ef">t</span> (<span style="color:#e6db74">:foreground</span> <span style="color:#e6db74">&#34;spring green&#34;</span>))))  <span style="color:#f92672">&#39;</span>(rainbow-delimiters-depth-8-face ((<span style="color:#66d9ef">t</span> (<span style="color:#e6db74">:foreground</span> <span style="color:#e6db74">&#34;sienna1&#34;</span>)))) ) </code></pre></div></div><h1 id="參考資料">參考資料</h1> <ul> <li><a href="https://5xruby.tw/posts/emacs-part1/">Emacs 入坑引導 - 打造自己的 Ruby IDE - Part 1</a></li> <li><a href="https://www.emacswiki.org/emacs/RainbowDelimiters">RainbowDelimiters</a></li> <li><a href="https://ericscrivner.me/2015/06/better-emacs-rainbow-delimiters-color-scheme/">Better Emacs Rainbow Delimiters Color Scheme</a></li> </ul>
        ]]></description></item><item><title>把 app 加到 ubuntu 的 dash 目錄</title><link>https://aben20807.github.io/posts/20190302-add-app-to-ubuntu-dash-home/</link><pubDate>Sat, 02 Mar 2019 10:40:02 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190302-add-app-to-ubuntu-dash-home/</guid><description><![CDATA[
          <p>所謂的 dash 就有點像是在 windows 10 點擊「開始」出現的很多 app 的畫面。而在 ubuntu 中有些程式的安裝方式是從網路上下載壓縮檔後解壓縮，一般要啟動的話就需要先去打開那個資料夾再點擊，有點麻煩，所以就找了一個最簡單的方式將要用的程式加到 dash 中。</p>
          
            <p><a href="https://aben20807.github.io/posts/20190302-add-app-to-ubuntu-dash-home/"><img src="https://drive.google.com/uc?export=view&amp;id=14kN9vjDOKr9W5d6e-1rgDEkNh6XtWRSa" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190302-add-app-to-ubuntu-dash-home/">Visit website to read the full article</a></p>
          <p>所謂的 dash 就有點像是在 windows 10 點擊「開始」出現的很多 app 的畫面。而在 ubuntu 中有些程式的安裝方式是從網路上下載壓縮檔後解壓縮，一般要啟動的話就需要先去打開那個資料夾再點擊，有點麻煩，所以就找了一個最簡單的方式將要用的程式加到 dash 中。</p> <p>測試系統：Ubuntu 18.04</p> <h1 id="使用-gnome-desktop-item-edit">使用 gnome-desktop-item-edit</h1> <p>首先安裝 <code>gnome-desktop-item-edit</code> 這個工具</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo apt install --no-install-recommends gnome-panel </code></pre></div></div><p>接著新增一個應用程式</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo gnome-desktop-item-edit /usr/share/applications/ --create-new </code></pre></div></div><p>出現一個小框框，填入名稱以及程式所在</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1YFjaDpgQhBUacfdD38UnId97hAoPG1QL" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>點 OK 後就會出現了，不需要重新登入或關機</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1dRR1G6VrP2oid0S9QBvTvXVMeFHzGF8r" alt="最下排左邊數來第二個" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">最下排左邊數來第二個</center>   </figcaption> </figure> </p> <p>圖標是預設的，若需要要修改就編輯一下檔案，注意檔名是剛剛取的名稱加上 .desktop 的副檔名</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo vim /usr/share/applications/VisualVM.desktop </code></pre></div></div><h1 id="加上-icon-路徑">加上 icon 路徑</h1> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1rAWhlWkLTVIJ8JhS_o-o-gZW1grBVbQU" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <p>儲存後就可以看到結果了</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1P1k41x1OtC9bbsphoYVyNTBoA14xDTKf" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p> <h1 id="參考">參考</h1> <ul> <li><a href="https://linuxconfig.org/how-to-create-desktop-shortcut-launcher-on-ubuntu-18-04-bionic-beaver-linux#h6-3-desktop-shortcut-creation-with-gnome-desktop-item-edit">Desktop Shortcut creation with gnome-desktop-item-edit</a></li> </ul>
        ]]></description></item><item><title>訂閱囉</title><link>https://aben20807.github.io/posts/20190227-subscription/</link><pubDate>Wed, 27 Feb 2019 17:39:51 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190227-subscription/</guid><description><![CDATA[
          <p>訂閱起來～訂閱起來～</p>
          
            <p><a href="https://aben20807.github.io/posts/20190227-subscription/"><img src="https://aben20807.github.io//img/default-header-img.jpg" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190227-subscription/">Visit website to read the full article</a></p>
          <p>訂閱起來～訂閱起來～</p> <p>本篇主要是測試訂閱有沒有問題 (希望沒有</p> <p>要訂閱的話可以透過右上角的信箱圖案填寫 email</p> <p>或是真的懶的話：https://aben20807.github.io/subscription/</p> <p>如果是 Gmail 的話可能會被分到「促銷內容」可以透過篩選器喔。或是用右鍵來修改已經寄到信箱的信的標籤喔。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=19Ftzj_DlKmuTLeyybZw0V50ucBLHuiJ7" alt=" " style="max-width: 100%;"/>   <figcaption>     <center class="caption-text"> </center>   </figcaption> </figure> </p>
        ]]></description></item><item><title>Talk About Shame</title><link>https://aben20807.github.io/posts/20190225-talk-about-shame/</link><pubDate>Mon, 25 Feb 2019 21:40:00 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190225-talk-about-shame/</guid><description><![CDATA[
          <p>顧炎武的＜廉恥＞中提到</p> <blockquote> <p>四者之中，恥尤為要</p> </blockquote> <p>其中的四者就是禮、義、廉、恥應該不用多說 (去複習國文啦</p>
          
            <p><a href="https://aben20807.github.io/posts/20190225-talk-about-shame/"><img src="https://drive.google.com/uc?export=view&amp;id=1oGP2AYSwCtfbqqAYbKGY-6mFXfqPWhlX" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190225-talk-about-shame/">Visit website to read the full article</a></p>
          <p>顧炎武的＜廉恥＞中提到</p> <blockquote> <p>四者之中，恥尤為要</p> </blockquote> <p>其中的四者就是禮、義、廉、恥應該不用多說 (去複習國文啦</p> <h1 id="關於標題">關於標題</h1> <p>(有時候英文標題就懶的改了，不然就是改了有點怪，想這次的，所以我就不改囉＠＠</p> <p>說到英文，「恥」在英文翻譯是 shame，不過在四維的英文中其對應的是 honor。根據不專業的討論，shame 是貶義，而英文卻傾向用褒義表達，更進一步的去解釋可以想成「恥」是讓我們了解什麼是不榮耀的事，大概是這樣。</p> <p>(圖片有點震撼我知道 OuO</p> <h1 id="正題">正題</h1> <p>為何會突然講這個主題呢？其實很多事情都是先學會，然後在之後才會去遇到，甚至體會到一開始接觸到時沒有獲得的感觸。這次談的這個主題其實已經在腦海中想過頗多次，但就如同上述，是我在高中學到這段課文後過了很久才漸漸有看法。或許到大學這段期間還不算久，我想會有更多的東西可能是我到老還無法了解的吧。</p> <p>總結那篇課文，其認為人會違反一些道德倫理，是因為無恥所導致。</p> <p>結合到日常生活中，最微小的可以從那些不遵守交通規則的人身上看出，他們將這些視為理所當然，例如在台南闖紅燈是再稀鬆平常不過的事了，在那些人眼中我看不到一絲的羞恥感。這或許也是現行法律所無法顧慮的吧，之前上課總說法律是道德的最低標準，這也是為何重刑不管用，酒駕的還是會酒駕，因為罰錢根本是小事，內心的道德感一點也沒有覺得自己做錯。我覺得可能要更善加利用輿論壓力才能有效降低，例如酒駕就會有標籤，可能求職時就需要出示之類的，但這都只是外部的約束，主要還是要自己感覺到「恥」。</p> <p>除了這些，更有人會合理化自己的行為，認為自己沒有影響別人什麼的，其實就需要去思考那為何需要訂定交通規則。</p> <p>另外，亂丟垃圾也是，真心不懂為何有人就是會把垃圾留在離垃圾桶不到五步距離的飲水機上。總之族繁不及備載，這些事一直都會發生。</p> <h1 id="結論">結論</h1> <p>好啦，其實也沒有要戰什麼，其實是想表達自己看到的現象彷彿跟以前學到的有些許映射。總之呢，希望世界和平，做人有多一點點羞恥心去用不同的角度去看待事情，這樣才能打造更和諧的社會。</p> <h1 id="後記">後記</h1> <p>其實我是覺得我可能過於看重這件事了，所以會變得比較怕去麻煩別人，當然這有好有壞，我是不太建議像我這樣的個性，因為時常要跟自己打架 XDD。人活著也不是要一直去注意他人的眼光，去找一個適合自己的光譜位置，然後貫徹自己的想法吧。</p>
        ]]></description></item><item><title>Makefile for Testing</title><link>https://aben20807.github.io/posts/20190216-makefile-for-testing/</link><pubDate>Sat, 16 Feb 2019 10:00:48 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190216-makefile-for-testing/</guid><description><![CDATA[
          <p>Makefile 可以執行終端機的指令，所以也可以搭配重新導向 (redirection) 用來做簡單測試</p> <p>例如：</p> <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">test</span><span style="color:#f92672">:</span>     ./a.out &lt; input.txt &gt; output.txt </code></pre></div><p>這樣只需要用 <code>$ make test</code> 就可以測試輸入 input.txt，並把結果存到 output.txt</p>
          
            <p><a href="https://aben20807.github.io/posts/20190216-makefile-for-testing/"><img src="https://aben20807.github.io//img/default-header-img.jpg" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190216-makefile-for-testing/">Visit website to read the full article</a></p>
          <p>Makefile 可以執行終端機的指令，所以也可以搭配重新導向 (redirection) 用來做簡單測試</p> <p>例如：</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">test</span><span style="color:#f92672">:</span>     ./a.out &lt; input.txt &gt; output.txt </code></pre></div></div><p>這樣只需要用 <code>$ make test</code> 就可以測試輸入 input.txt，並把結果存到 output.txt</p> <h1 id="舊方法">舊方法</h1> <p>不過若是有很多種輸入測資的話會有點麻煩，當然還是可以寫成這樣</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">test1</span><span style="color:#f92672">:</span>     ./a.out &lt; input1.txt &gt; output1.txt <span style="color:#a6e22e">test2</span><span style="color:#f92672">:</span>     ./a.out &lt; input2.txt &gt; output2.txt <span style="color:#a6e22e">test3</span><span style="color:#f92672">:</span>     ./a.out &lt; input3.txt &gt; output3.txt </code></pre></div></div><p>或是</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">test</span><span style="color:#f92672">:</span>     ./a.out &lt; input1.txt &gt; output1.txt     ./a.out &lt; input2.txt &gt; output2.txt     ./a.out &lt; input3.txt &gt; output3.txt </code></pre></div></div><p>這樣寫的缺點就是每次測資增加的時候舊需要修改 Makefile</p> <h1 id="makefile-內建函式">Makefile 內建函式</h1> <p>不過其實有更好的寫法，利用 makefile 內建的函式</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make">INPUT_DIR <span style="color:#f92672">=</span> input/linux/ INPUTS <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>wildcard <span style="color:#66d9ef">$(</span>INPUT_DIR<span style="color:#66d9ef">)</span>*.txt<span style="color:#66d9ef">)</span> OUTPUT_DIR <span style="color:#f92672">=</span> output/linux/ OUTPUTS <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>addprefix <span style="color:#66d9ef">$(</span>OUTPUT_DIR<span style="color:#66d9ef">)</span>,<span style="color:#66d9ef">$(</span>notdir <span style="color:#66d9ef">$(</span>INPUTS<span style="color:#66d9ef">)))</span> </code></pre></div></div><ul> <li><code>wildcard</code>: 獲取輸入檔案列表</li> <li><code>notdir</code>: 獲得檔案名稱 (去掉前面路徑)</li> <li><code>addprefix</code>: 加上前綴 (修改輸出路徑)</li> </ul> <p>這樣的優點就是只要 input/linux/ 中有多的 .txt 檔就會自動加入測試，不需要修改 Makefile</p> <h1 id="完整範例">完整範例</h1> <h2 id="檔案們">檔案們</h2> <h3 id="tc"><code>t.c</code>:</h3> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e"></span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {     <span style="color:#66d9ef">int</span> a, b;     scanf(<span style="color:#e6db74">&#34;%d%d&#34;</span>, <span style="color:#f92672">&amp;</span>a, <span style="color:#f92672">&amp;</span>b);     printf(<span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, a <span style="color:#f92672">+</span> b);     <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; } </code></pre></div></div><h3 id="makefile"><code>Makefile</code>:</h3> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make">CC <span style="color:#f92672">=</span> gcc EXEC <span style="color:#f92672">=</span> a.out INPUT_DIR <span style="color:#f92672">=</span> input/linux/ INPUTS <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>wildcard <span style="color:#66d9ef">$(</span>INPUT_DIR<span style="color:#66d9ef">)</span>*.txt<span style="color:#66d9ef">)</span> OUTPUT_DIR <span style="color:#f92672">=</span> output/linux/ OUTPUTS <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>addprefix <span style="color:#66d9ef">$(</span>OUTPUT_DIR<span style="color:#66d9ef">)</span>,<span style="color:#66d9ef">$(</span>notdir <span style="color:#66d9ef">$(</span>INPUTS<span style="color:#66d9ef">)))</span> <span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all, test, mk_parent_dir <span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">$(</span>EXEC<span style="color:#66d9ef">)</span> <span style="color:#a6e22e">mk_parent_dir</span><span style="color:#f92672">:</span>     @mkdir -p <span style="color:#66d9ef">$(</span>OUTPUT_DIR<span style="color:#66d9ef">)</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">:</span> mk_parent_dir <span style="color:#66d9ef">$(</span>OUTPUTS<span style="color:#66d9ef">)</span> <span style="color:#a6e22e">$(OUTPUT_DIR)%.txt</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">$(</span>INPUT_DIR<span style="color:#66d9ef">)</span>%.txt <span style="color:#66d9ef">$(</span>EXEC<span style="color:#66d9ef">)</span>     ./a.out &lt; $&lt; &gt; $@     @cat $&lt; $@ <span style="color:#75715e"># cat the content of file</span> <span style="color:#a6e22e">$(EXEC)</span><span style="color:#f92672">:</span> t.c     <span style="color:#66d9ef">$(</span>CC<span style="color:#66d9ef">)</span> t.c <span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>     rm -rf <span style="color:#66d9ef">$(</span>OUTPUT_DIR<span style="color:#66d9ef">)</span> a.out </code></pre></div></div><h3 id="檔案架構">檔案架構</h3> <pre tabindex="0"><code>$ tree . . ├── input │   └── linux │       ├── test1.txt │       ├── test2.txt │       └── test3.txt ├── Makefile ├── output └── t.c </code></pre><h2 id="使用">使用</h2> <h3 id="指令同為--make-test">指令同為 <code>$ make test</code></h3> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ make test gcc t.c ./a.out &lt; input/linux/test2.txt &gt; output/linux/test2.txt <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> ./a.out &lt; input/linux/test3.txt &gt; output/linux/test3.txt <span style="color:#ae81ff">78</span> <span style="color:#ae81ff">99</span> <span style="color:#ae81ff">177</span> ./a.out &lt; input/linux/test1.txt &gt; output/linux/test1.txt <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">7</span> </code></pre></div></div><h3 id="結果檔案架構">結果檔案架構</h3> <pre tabindex="0"><code>$ tree . . ├── a.out ├── input │   └── linux │       ├── test1.txt │       ├── test2.txt │       └── test3.txt ├── Makefile ├── output │   └── linux │       ├── test1.txt │       ├── test2.txt │       └── test3.txt └── t.c </code></pre><h1 id="後記">後記</h1> <p>上面的簡單例子中可能看不出 <code>$(INPUTS)</code> 跟 <code>$(OUTPUTS)</code> 的用途，不過在相依多的話可以直接代表全部的檔案，但若是需要做名稱配對的話還是需要 <code>%</code> 出馬，就像 <code>$(OUTPUT_DIR)%.txt: $(INPUT_DIR)%.txt</code> 來表示輸入輸出的檔名要一致。</p>
        ]]></description></item><item><title>咖啡木蠹蛾</title><link>https://aben20807.github.io/posts/20190212-zeuzera-coffeae-nietner/</link><pubDate>Tue, 12 Feb 2019 22:51:30 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190212-zeuzera-coffeae-nietner/</guid><description><![CDATA[
          <p>(以下圖片皆攝於 2019.02.03)</p> <p>咖啡木蠹蛾，學名 Zeuzera Coffeae Nietner 詳細可以去行政院農業委員會 農業試驗所提供的<a href="http://web.tari.gov.tw/techcd/%E6%9E%9C%E6%A8%B9/%E5%B8%B8%E7%B6%A0%E6%9E%9C%E6%A8%B9/%E6%A5%8A%E6%A1%83/%E8%9F%B2%E5%AE%B3/%E6%A5%8A%E6%A1%83-%E5%92%96%E5%95%A1%E6%9C%A8%E8%A0%B9%E8%9B%BE.htm">圖鑑</a></p>
          
            <p><a href="https://aben20807.github.io/posts/20190212-zeuzera-coffeae-nietner/"><img src="https://drive.google.com/uc?export=view&amp;id=14FU_jdoqFlTPkXxMENhMgayz86EkCfeGvg" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190212-zeuzera-coffeae-nietner/">Visit website to read the full article</a></p>
          <p>(以下圖片皆攝於 2019.02.03)</p> <p>咖啡木蠹蛾，學名 Zeuzera Coffeae Nietner 詳細可以去行政院農業委員會 農業試驗所提供的<a href="http://web.tari.gov.tw/techcd/%E6%9E%9C%E6%A8%B9/%E5%B8%B8%E7%B6%A0%E6%9E%9C%E6%A8%B9/%E6%A5%8A%E6%A1%83/%E8%9F%B2%E5%AE%B3/%E6%A5%8A%E6%A1%83-%E5%92%96%E5%95%A1%E6%9C%A8%E8%A0%B9%E8%9B%BE.htm">圖鑑</a></p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=14FU_jdoqFlTPkXxMENhMgayz86EkCfeGvg" alt="點圖可放大喔 OuO" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">點圖可放大喔 OuO</center>   </figcaption> </figure> </p> <p>總之呢就是害蟲，幼蟲會把樹木的枝條蛀空。</p> <p>我們家就是幾乎不噴農藥雜草也不會一定要用除草劑處理的光禿禿的，所以難免有害蟲。 <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1W2XiqPRhfVaMGkPwO_wRMIiIO_o1tdZH3g" alt="灑水中的葡萄園" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">灑水中的葡萄園</center>   </figcaption> </figure> </p> <p>這隻剛從蛹中出來就被我拍到，然後通報給老媽，她趁牠還沒出去產卵就把牠處理掉了。</p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1hssv_igXB1P3KEfEcCT5o2lbT64TF8JcbA" alt="蛹，仔細看第1張圖會看到喔" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">蛹，仔細看第1張圖會看到喔</center>   </figcaption> </figure> </p> <p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1GzQL4C-PyzQEkUnv7T2InNbzfUyjR2qZRg" alt="葡萄營養珠(老媽說是氮珠)" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">葡萄營養珠(老媽說是氮珠)</center>   </figcaption> </figure> </p>
        ]]></description></item><item><title>Features</title><link>https://aben20807.github.io/posts/features/</link><pubDate>Wed, 06 Feb 2019 09:37:31 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/features/</guid><description><![CDATA[
          <p>記錄一下一些特性和使用方式</p>
          
            <p><a href="https://aben20807.github.io/posts/features/"><img src="https://aben20807.github.io//img/default-header-img.jpg" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/features/">Visit website to read the full article</a></p>
          <p>記錄一下一些特性和使用方式</p> <h1 id="標題-heading">標題 (heading)</h1> <pre tabindex="0"><code># h1 ## h2 ### h3 #### h4 支援 emoji 😄 ##### h5 支援中文~ ###### h6  ####### h7 最多只有到 6 級 </code></pre><h1 id="h1">h1</h1> <h2 id="h2">h2</h2> <h3 id="h3">h3</h3> <h4 id="h4-支援-emoji-">h4 支援 emoji 😄</h4> <h5 id="h5-支援中文">h5 支援中文~</h5> <h6 id="h6">h6</h6> <p>####### h7 最多只有到 6 級</p> <p>右邊會有浮動 TOC (table of contents)，可點擊！  只會顯示 h1 ~ h3 過長會變成 &hellip;</p> <h3 id="test中文-1-12sdofjsojdfojasodjfosjofdsoifjaosjdofj">test中文 1-12sdofjsojdfojasodjfosjofdsoifjaosjdofj</h3> <h1 id="code-section-refhttpsgohugoiocontent-managementsyntax-highlightinghighlighting-in-code-fences">Code section <a href="https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences">ref</a></h1> <pre> ```c {linenos=table,hl_lines=[2,"4-6"],linenostart=199} #include <stdio.h> int main() {     int a = 0;     return a; } ``` </pre> <div style="border: 1px solid #888888;"></div><h1 id="強調字型">強調字型</h1> <p>可參考：https://www.markdownguide.org/basic-syntax/#emphasis</p> <pre tabindex="0"><code>__粗體__   **粗體**   _斜體_   *斜體*   __*粗斜體*__ </code></pre><p><strong>粗體</strong>  <strong>粗體</strong>  <em>斜體</em>  <em>斜體</em>  <strong><em>粗斜體</em></strong></p> <h1 id="橫線">橫線</h1> <pre tabindex="0"><code>--- </code></pre><hr> <h1 id="項目-bullet">項目 (Bullet)</h1> <pre tabindex="0"><code>+ a   + 1   + 2 + b   1. OuO   2. QuQ </code></pre><ul> <li>a <ul> <li>1</li> <li>2</li> </ul> </li> <li>b <ol> <li>OuO</li> <li>QuQ</li> </ol> </li> </ul> <h1 id="表格">表格</h1> <pre tabindex="0"><code>|A|B|C| |-|-|-| |a|b|c| |d|e|f| </code></pre><table> <thead> <tr> <th>A</th> <th>B</th> <th>C</th> </tr> </thead> <tbody> <tr> <td>a</td> <td>b</td> <td>c</td> </tr> <tr> <td>d</td> <td>e</td> <td>f</td> </tr> </tbody> </table> <h1 id="引用">引用</h1> <pre tabindex="0"><code>&gt; The more I learn, the more I realize how much I don't know.   &gt; --- Albert Einstein </code></pre><blockquote> <p>The more I learn, the more I realize how much I don&rsquo;t know.  &mdash; Albert Einstein</p> </blockquote> <h1 id="插入圖片">插入圖片</h1> <p>目前並不打算直接上傳到 github，所以找了一些方式  一般圖片</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">![<span style="color:#f92672">alt</span>](<span style="color:#a6e22e">https://drive.google.com/uc?export=view&amp;id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC</span>) </code></pre></div></div><p>   <figure class="gphoto-media">     <img src="https://drive.google.com/uc?export=view&amp;id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC" alt="alt" style="max-width: 100%;"/>     <figcaption>       <center class="caption-text">alt</center>     </figcaption>   </figure> </p> <p>這裡大部份會使用 google 雲端當作圖床  不過從取得連結那裡會拿到：https://drive.google.com/open?id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC  要改成上面的連結才行，所以我動了一些手腳，下面還會顯示標題說明，點擊即可在新分頁開啟可放大的圖片瀏覽器</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">![<span style="color:#f92672">google-title here</span>](<span style="color:#a6e22e">https://drive.google.com/open?id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC</span>) </code></pre></div></div><p> <figure class="gphoto-media">   <img class="gphoto-media" src="https://drive.google.com/uc?export=view&id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC" alt="title here" style="max-width: 100%;"/>   <figcaption>     <center class="caption-text">title here</center>   </figcaption> </figure> </p> <h1 id="數學式">數學式</h1> <p>要行內顯示的話在左右各使用一個 <code>$</code> 包著, e.g., <code>$x + y = z$</code>: $x + y = z$</p> <p>使用 <code>$$</code> 會置中顯示, e.g., <code>$$a \times b = c$$</code></p> <p>$$a \times b = c$$</p> <div style="border: 1px solid #888888;"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-latex" data-lang="latex"><span style="color:#e6db74">$$</span> \def\TT{i\frac{\pi}{<span style="color:#ae81ff">4</span>}} \begin{equation<span style="color:#f92672">*</span>} \begin{split} x &amp;<span style="color:#f92672">=</span> e^{\TT} \newline y &amp;<span style="color:#f92672">=</span> e^{<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>\TT} \end{split} \end{equation<span style="color:#f92672">*</span>} <span style="color:#e6db74">$$</span> </code></pre></div></div><p>$$ \def\TT{i\frac{\pi}{4}} \begin{equation*} \begin{split} x &amp;= e^{\TT} \newline y &amp;= e^{-3\TT} \end{split} \end{equation*} $$</p> <h1 id="youtube">YouTube</h1> <pre> {{&lt; youtube &quot;<span>https://www.youtube.com/watch?v=jC3jnC1dsAg</span>&quot; &gt;}} </pre>   <pre> {{&lt; youtube &quot;<span>https://www.youtube.com/watch?v=jC3jnC1dsAg?t=500</span>&quot; &gt;}} </pre>   <h1 id="section-refhttpscodepeniodobsondevpenggrjwv">Section <a href="https://codepen.io/DobsonDev/pen/GgRJwv">ref</a></h1> <pre> {{&lt; alert info >}} **Beware !** is a text {{&lt; /alert >}} {{&lt; alert success >}} **Beware !** is a text {{&lt; /alert >}} {{&lt; alert warning >}} **Beware !** is a text {{&lt; /alert >}} {{&lt; alert danger >}} **Beware !** is a text {{&lt; /alert >}} </pre>   <div class="info-msg">     <i class="fa fa-info-circle"></i>     <strong>Beware !</strong> is a text   </div>   <div class="success-msg">     <i class="fa fa-check"></i>     <strong>Beware !</strong> is a text   </div>   <div class="warning-msg">     <i class="fa fa-exclamation-triangle"></i>     <strong>Beware !</strong> is a text   </div>   <div class="alert error-msg">     <i class="fa fa-times-circle"></i>     <strong>Beware !</strong> is a text   </div> <h1 id="details-summary-section">Details, summary section</h1> <pre> {{&lt; summary "Click~" >}} # OuO OuO + OuO {{&lt; /summary >}} </pre>   <details>   <summary><span>Click~ </span></summary>   <h1 id="ouo">OuO</h1> <p>OuO</p> <ul> <li>OuO</li> </ul> </details>
        ]]></description></item><item><title>Happy New Year</title><link>https://aben20807.github.io/posts/20190204-happy-new-year/</link><pubDate>Mon, 04 Feb 2019 23:03:48 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190204-happy-new-year/</guid><description><![CDATA[
          <p>今天除夕，首先祝各位新年快樂~</p>
          
            <p><a href="https://aben20807.github.io/posts/20190204-happy-new-year/"><img src="https://aben20807.github.io//img/default-header-img.jpg" style="max-width: 100%;"/></a></p>
          
          <p><a href="https://aben20807.github.io/posts/20190204-happy-new-year/">Visit website to read the full article</a></p>
          <p>今天除夕，首先祝各位新年快樂~</p> <p>第一天用比較偏累，基本上把會用的東西都裝一裝了，例如：google analysitcs, disqus。likecoin 的部份我覺得可能還要找方法，不然拖慢許多載入速度。</p> <p>總之，主因大致上可以推給 G+ 關閉吧，加上在 Blogger 那邊改主題頗累 (外加煩躁) 選擇 Hugo 主要是速度吧，號稱目前最快，原本考慮的 Jekyll 跟 Hexo 似乎在文章多的時候都會慢，所以就直上了(?)。</p> <p>這裡會發的文會更偏向記錄，要說是日記也是可，不過我相信我自己絕對不可能日更，尤其是已經在研究所幹活了，可能這篇第一篇也是最後一篇也說不定。</p> <p>恩&hellip;也不知道怎麼結尾，那就這樣吧 OuO</p>
        ]]></description></item></channel></rss>