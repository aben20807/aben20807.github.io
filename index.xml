<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>記錄用</title><link>https://aben20807.github.io/</link><description>Recent content on 記錄用</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><managingEditor>aben20807@gmail.com (Huang Po-Hsuan)</managingEditor><webMaster>aben20807@gmail.com (Huang Po-Hsuan)</webMaster><atom:link href="https://aben20807.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 FileLocator 在資料夾中搜尋文件內容</title><link>https://aben20807.github.io/posts/20210806-search-text-in-multiple-files/</link><pubDate>Fri, 06 Aug 2021 15:20:27 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210806-search-text-in-multiple-files/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>知識實在不容易累積&lt;/p>
&lt;p>這其實是我個人覺得，不知道其他人感覺?&lt;/p>
&lt;p>為何不容易累積?&lt;/p>
&lt;p>最主要原因就是沒有一個好的管理系統來整理這些知識，而時間一久自然就逐漸忘記，自已最近就很常遇到明明就看過且解決過，但是臨時遇到相同問題時無法找到當時解決的方法，只好再重新來一遍，來來回回已經耗費許多時間。&lt;/p>
&lt;p>因此我現在遇到問題時，在解決過程我就盡量把所有步驟都寫起來，但是不是很完整的整理，就僅是將使用到的參考網址、指令流程複製下來放到文件或報告投影片 (利用隱藏投影片)，這樣做法一來快速方便，二來與報告放在一起可以做最大化的連結效果。&lt;/p>
&lt;p>然而，時間一久就會發現要在這些報告中搜尋內容不太容易，因為這些檔案大多不是純文字檔，例如: word、ppt，最暴力的方法就一個一個檔案開起來然後用 Ctrl-F 輸入關鍵字搜尋，真的不太方便。如果是純文字檔 (txt, md) 可以用 &lt;code>ag&lt;/code> (silversearcher-ag &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>) 或是直接用 vscode 開啟資料夾來搜尋。&lt;/p>
&lt;p>也是因為這樣我某些時段就會想把這些報告改成用 markdown，但是做投影片又離不開 ppt、google slide，所以後來才找到這個可以直接搜尋資料夾內所有檔案的方法。我所使用的是 FileLocator Lite &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>(雖然有 pro 的試用期，但是我選 Lite，不過不確定是否被迫強制試用，希望不要 QuQ)。&lt;/p>
&lt;p>這裡示範一下在資料夾中找出有提及 &amp;ldquo;memcheck&amp;rdquo; 的文件，可以限制文件的種類，但注意要用分號 &lt;code>;&lt;/code> 隔開，目標資料夾也同理。比較可惜是搜尋字串不能用正規表達式。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/AM-JKLVrBASd3V8HLIHeqrvn951PzqHkaT2Nxy2HUbNrmY_6L4IKCw3IeDoz5KLsYeTDwP0o7-RPpS6zvPRAkFafKuVD5cztcOOvXGgwpG9QzYSDIzo0LkbNgU0bwjd4rnGQ-eXIY0jtaRfx_P70FpC97Po3Wg=w1245-h870-no" alt="搜尋範例">&lt;/p>
&lt;p>找出檔案後，我還是點開然後用 Ctrl-F 搜尋，不過比原先的 &amp;ldquo;遍歷搜尋法&amp;rdquo; 快多了。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/ggreer/the_silver_searcher">https://github.com/ggreer/the_silver_searcher&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://www.mythicsoft.com/filelocatorlite/download/">https://www.mythicsoft.com/filelocatorlite/download/&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Build a Simple Compiler Ep3</title><link>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/</link><pubDate>Thu, 22 Jul 2021 20:17:52 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>指令生成 (Codegen)&lt;/p>
&lt;ul>
&lt;li>Series: &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/">[ep0]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/">[ep1]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/">[ep2]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/">[ep3]&lt;/a>&lt;/li>
&lt;li>Source code: &lt;a href="https://github.com/aben20807/learn_compiler">aben20807/learn_compiler&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="指令生成-codegen">指令生成 (Codegen)&lt;/h1>
&lt;p>&lt;del>由於是簡化版的編譯器&lt;/del>，我們不產生中間的表達式 (Intermediate representation, IR) &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，也不會有 Abstract syntax tree (AST) &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>，而是直接利用上一篇的螢幕輸出改成對應的 Java bytecode 指令 &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>。有興趣的可以去參考完整列表 &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> 看有支援什麼神奇功能。會寫 Java 的也可以參考如何使用反組譯的方式 &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> 找出對應的 bytecode 來觀察行為。&lt;/p>
&lt;h1 id="jasmin">Jasmin&lt;/h1>
&lt;p>Jasmin &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> 為一 JVM 的組譯器，其會將可讀指令形式的 bytecode 轉換成 .class 的形式 (可執行的 bytecode)。&lt;/p>
&lt;h2 id="j-檔格式">&lt;code>.j&lt;/code> 檔格式&lt;/h2>
&lt;ul>
&lt;li>開頭及結尾如下，只需要在一開始開檔時就寫入開頭，等到全部指令產生完畢，離開前再寫入結尾即可。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-asm" data-lang="asm">&lt;span style="color:#a6e22e">.source&lt;/span> &lt;span style="color:#66d9ef">bytecode.j&lt;/span>
&lt;span style="color:#a6e22e">.class&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">Main&lt;/span>
&lt;span style="color:#a6e22e">.super&lt;/span> &lt;span style="color:#66d9ef">java&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/&lt;/span>&lt;span style="color:#66d9ef">lang&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/&lt;/span>&lt;span style="color:#66d9ef">Object&lt;/span>
&lt;span style="color:#a6e22e">.method&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">main&lt;/span>([&lt;span style="color:#66d9ef">Ljava&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/&lt;/span>&lt;span style="color:#66d9ef">lang&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/&lt;/span>&lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#75715e">;)V
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">.limit&lt;/span> &lt;span style="color:#66d9ef">stack&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#a6e22e">.limit&lt;/span> &lt;span style="color:#66d9ef">locals&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#75715e">; generated instructions
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">return&lt;/span>
&lt;span style="color:#a6e22e">.end&lt;/span> &lt;span style="color:#66d9ef">method&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="完整程式碼">完整程式碼&lt;/h1>
&lt;p>仔細看的話就會發現跟 ep2 的程式碼幾乎差不多，只有加了寫檔把對應操作的指令寫入 bytecode.j。&lt;/p>
&lt;div class="alert error-msg">
&lt;i class="fa fa-times-circle">&lt;/i>
下方程式碼的 symbol table 為求簡單所以使用一維陣列實作，僅適用於本範例，容易造成記憶體錯誤且無法套用至多層級的 scope，所以請勿學習。
&lt;/div>
&lt;ul>
&lt;li>&lt;code>mycompiler.y&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">/* Definition section */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>{
&lt;span style="color:#75715e">//Extern variables that communicate with lex
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;common.h&amp;#34; &lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// #define YYDEBUG 1
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// int yydebug = 1;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">extern&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> yylineno;
&lt;span style="color:#66d9ef">extern&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">yylex&lt;/span>();
&lt;span style="color:#66d9ef">extern&lt;/span> FILE &lt;span style="color:#f92672">*&lt;/span>yyin;
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">yyerror&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">*&lt;/span>s)
{
printf(&lt;span style="color:#e6db74">&amp;#34;error:%d: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yylineno, s);
}
&lt;span style="color:#75715e">#define codegen(...) \
&lt;/span>&lt;span style="color:#75715e"> do { \
&lt;/span>&lt;span style="color:#75715e"> for (int i = 0; i &amp;lt; indent_cnt; i++) { \
&lt;/span>&lt;span style="color:#75715e"> fprintf(fout, &amp;#34;\t&amp;#34;); \
&lt;/span>&lt;span style="color:#75715e"> } \
&lt;/span>&lt;span style="color:#75715e"> fprintf(fout, __VA_ARGS__); \
&lt;/span>&lt;span style="color:#75715e"> } while (0)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/* Symbol table function */&lt;/span>
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">create_symbol&lt;/span>(&lt;span style="color:#75715e">/* ... */&lt;/span>);
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">insert_symbol&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> id_name);
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">lookup_symbol&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> id_name);
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">dump_symbol&lt;/span>();
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">get_op_name&lt;/span>(op_t op) {
&lt;span style="color:#66d9ef">switch&lt;/span> (op) {
&lt;span style="color:#66d9ef">case&lt;/span> OP_ADD:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ADD&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> OP_SUB:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;SUB&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> OP_MUL:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;MUL&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> OP_DIV:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;DIV&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unknown&amp;#34;&lt;/span>;
}
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">get_op_instruction&lt;/span>(op_t op) {
&lt;span style="color:#66d9ef">switch&lt;/span> (op) {
&lt;span style="color:#66d9ef">case&lt;/span> OP_ADD:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;iadd&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> OP_SUB:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;isub&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> OP_MUL:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;imul&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> OP_DIV:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;idiv&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unknown&amp;#34;&lt;/span>;
}
}
&lt;span style="color:#75715e">/* Global variables */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> example_symbol_cnt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#75715e">#define MAX_SYMBOL_NUM 10
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>example_symbol[MAX_SYMBOL_NUM] &lt;span style="color:#f92672">=&lt;/span> {};
&lt;span style="color:#66d9ef">int&lt;/span> indent_cnt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#75715e">// control the number of ident in bytecode
&lt;/span>&lt;span style="color:#75715e">&lt;/span> FILE&lt;span style="color:#f92672">*&lt;/span> fout &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;span style="color:#f92672">%&lt;/span>}
&lt;span style="color:#f92672">%&lt;/span>error&lt;span style="color:#f92672">-&lt;/span>verbose
&lt;span style="color:#75715e">/* Use variable or self-defined structure to represent
&lt;/span>&lt;span style="color:#75715e"> * nonterminal and token type
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#66d9ef">union&lt;/span> {
&lt;span style="color:#66d9ef">int&lt;/span> val;
&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>id_name;
op_t op;
}
&lt;span style="color:#75715e">/* Token without return */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>token DECL PRINT NEWLINE
&lt;span style="color:#75715e">/* Token with return, which need to sepcify type */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>token &lt;span style="color:#f92672">&amp;lt;&lt;/span>val&lt;span style="color:#f92672">&amp;gt;&lt;/span> NUMLIT
&lt;span style="color:#f92672">%&lt;/span>token &lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span> IDENT
&lt;span style="color:#75715e">/* Nonterminal with return, which need to sepcify type */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>type &lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span> AddOp MulOp
&lt;span style="color:#75715e">/* Yacc will start at this nonterminal */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>start Program
&lt;span style="color:#75715e">/* Grammar section */&lt;/span>
&lt;span style="color:#f92672">%%&lt;/span>
Program
: StatementList
;
StatementList
: Statement StatementList
&lt;span style="color:#f92672">|&lt;/span>
;
Statement
: DeclStmt
&lt;span style="color:#f92672">|&lt;/span> PrintStmt
;
DeclStmt
: DECL IDENT &lt;span style="color:#e6db74">&amp;#39;=&amp;#39;&lt;/span> Expression NEWLINE {
&lt;span style="color:#66d9ef">int&lt;/span> ref &lt;span style="color:#f92672">=&lt;/span> insert_symbol(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>);
printf(&lt;span style="color:#e6db74">&amp;#34;IDENT %s, ref: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, ref);
printf(&lt;span style="color:#e6db74">&amp;#34;STORE&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
free(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;istore %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ref);
}
;
PrintStmt
: PRINT Expression NEWLINE {
printf(&lt;span style="color:#e6db74">&amp;#34;PRINT&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;getstatic java/lang/System/out Ljava/io/PrintStream;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;swap&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;invokevirtual java/io/PrintStream/print(I)V&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
}
;
Expression
: AddExpr
;
AddExpr
: AddExpr AddOp MulExpr {
printf(&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, get_op_name(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>));
codegen(&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, get_op_instruction(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>));
}
&lt;span style="color:#f92672">|&lt;/span> MulExpr
;
AddOp
: &lt;span style="color:#e6db74">&amp;#39;+&amp;#39;&lt;/span> {
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> OP_ADD;
}
&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span> {
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> OP_SUB;
}
;
MulExpr
: MulExpr MulOp Operand {
printf(&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, get_op_name(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>));
codegen(&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, get_op_instruction(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>));
}
&lt;span style="color:#f92672">|&lt;/span> Operand
;
MulOp
: &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span> {
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> OP_MUL;
}
&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span> {
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> OP_DIV;
}
;
Operand
: NUMLIT {
printf(&lt;span style="color:#e6db74">&amp;#34;NUMLIT %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>val&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;ldc %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>val&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
}
&lt;span style="color:#f92672">|&lt;/span> IDENT {
&lt;span style="color:#66d9ef">int&lt;/span> ref &lt;span style="color:#f92672">=&lt;/span> lookup_symbol(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
printf(&lt;span style="color:#e6db74">&amp;#34;IDENT %s, ref: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, ref);
printf(&lt;span style="color:#e6db74">&amp;#34;LOAD&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
free(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;iload %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ref);
}
&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> Expression &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>
;
&lt;span style="color:#f92672">%%&lt;/span>
&lt;span style="color:#75715e">/* C code section */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> main(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>argv[])
{
&lt;span style="color:#66d9ef">if&lt;/span> (argc &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) {
yyin &lt;span style="color:#f92672">=&lt;/span> fopen(argv[&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>);
} &lt;span style="color:#66d9ef">else&lt;/span> {
yyin &lt;span style="color:#f92672">=&lt;/span> stdin;
}
&lt;span style="color:#75715e">/* Codegen output init */&lt;/span>
&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>bytecode_filename &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bytecode.j&amp;#34;&lt;/span>;
fout &lt;span style="color:#f92672">=&lt;/span> fopen(bytecode_filename, &lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;.source bytecode.j&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;.class public Main&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;.super java/lang/Object&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;.method public static main([Ljava/lang/String;)V&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;.limit stack 10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
codegen(&lt;span style="color:#e6db74">&amp;#34;.limit locals 10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
indent_cnt&lt;span style="color:#f92672">++&lt;/span>;
create_symbol();
yyparse();
dump_symbol();
&lt;span style="color:#75715e">/* Codegen end */&lt;/span>
codegen(&lt;span style="color:#e6db74">&amp;#34;return&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
indent_cnt&lt;span style="color:#f92672">--&lt;/span>;
codegen(&lt;span style="color:#e6db74">&amp;#34;.end method&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
fclose(fout);
fclose(yyin);
printf(&lt;span style="color:#e6db74">&amp;#34;Total lines: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yylineno);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> create_symbol()
{
printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; Create symbol table&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#75715e">// do nothing...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> insert_symbol(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> id_name)
{
printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; Insert {%s} into symbol table; assign it as ref {%d}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
id_name, example_symbol_cnt);
example_symbol[example_symbol_cnt] &lt;span style="color:#f92672">=&lt;/span> strdup(id_name);
example_symbol_cnt&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> example_symbol_cnt &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> lookup_symbol(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> id_name)
{
printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; Lookup in symbol table&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> example_symbol_cnt; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (strcmp(id_name, example_symbol[i]) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> i;
}
}
printf(&lt;span style="color:#e6db74">&amp;#34;{%s} not found in symbol table&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, id_name);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> dump_symbol()
{
printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; Dump symbol table&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> example_symbol_cnt; i&lt;span style="color:#f92672">++&lt;/span>) {
free(example_symbol[i]);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="測試範例">測試範例&lt;/h1>
&lt;ul>
&lt;li>&lt;code>input/in01.lc&lt;/code>:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>decl x = 1 + 4
decl y = 2
decl num = x + y * (3 + 5)
print num
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Result (其他檔案，如 Makefile 請參考 Source code):&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>$ make
$ ./mycompiler &amp;lt; input/in01.lc
$ java -jar jasmin.jar -g bytecode.j
Generated: Main.class
$ java Main
21
&lt;/code>&lt;/pre>&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Intermediate_representation">https://en.wikipedia.org/wiki/Intermediate_representation&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">https://en.wikipedia.org/wiki/Abstract_syntax_tree&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Java_bytecode">https://en.wikipedia.org/wiki/Java_bytecode&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings">Java bytecode instruction listings&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/aben20807/blog-post/issues/105">https://github.com/aben20807/blog-post/issues/105&lt;/a> &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>&lt;a href="http://jasmin.sourceforge.net/guide.html">http://jasmin.sourceforge.net/guide.html&lt;/a> &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Build a Simple Compiler Ep2</title><link>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/</link><pubDate>Thu, 22 Jul 2021 19:17:52 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>語法剖析器 (Parser)&lt;/p>
&lt;ul>
&lt;li>Series: &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/">[ep0]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/">[ep1]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/">[ep2]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/">[ep3]&lt;/a>&lt;/li>
&lt;li>Source code: &lt;a href="https://github.com/aben20807/learn_compiler">aben20807/learn_compiler&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="info-msg">
&lt;i class="fa fa-info-circle">&lt;/i>
從文章長度跟作業繳交期限就可以知道 parser 的難度遠大於 scanner，所以請提早動手開始，&lt;del>雖然不斷宣導下還是一定有人會不信邪前一個禮拜才開始&lt;/del>。
&lt;/div>
&lt;h1 id="語法剖析器-parser">語法剖析器 (Parser)&lt;/h1>
&lt;p>與詞法分析器 (Scanner) 相同，這裡我們仰賴語法剖析器產生器來建構符合我們定義文法的語法剖析器。&lt;/p>
&lt;p>由於我們再來會使用到的 JVM 功能是屬於 stack-based 的 virtual machine &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，所以在語法剖析時就要預先考慮產生對應的指令順序。&lt;/p>
&lt;h2 id="bison-yacc-三大區塊">bison (yacc) 三大區塊&lt;/h2>
&lt;p>這裡其實與上一篇幾乎相同 (用 &lt;code>%%&lt;/code> 切了三個區塊出來)，只是中間區塊從 Rules section 換成 Grammar section，用來定義文法。&lt;/p>
&lt;p>寫法如下，其實跟課本學到的文法表示差不多只是換個符號表示。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">Parent
: Child1 Child2 Child3
&lt;span style="color:#f92672">|&lt;/span> Child4
;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="action">Action&lt;/h2>
&lt;p>Action &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> 可以在 parse 過程中插入某些定義的動作，如下方程式範例中大括號部分。可以看到並不限於在最後方加上，也可以在 child 間加上 action。所以在建構不同層的 symbol table 時可以利用這個特性。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">Parent
: Child1 {
printf(&lt;span style="color:#e6db74">&amp;#34;after reducing Child1; before reducing Parent&amp;#34;&lt;/span>);
} Child2 Child3 {
printf(&lt;span style="color:#e6db74">&amp;#34;reduce Parent!&amp;#34;&lt;/span>);
}
&lt;span style="color:#f92672">|&lt;/span> Child4 {
printf(&lt;span style="color:#e6db74">&amp;#34;reduce Parent from Child4&amp;#34;&lt;/span>);
}
;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="利用-semantic-value-將下方資訊向上傳遞">利用 Semantic value 將下方資訊向上傳遞&lt;/h2>
&lt;p>為了向上傳遞資訊，bison (yacc) 提供了這項功能，讓下方的 action 可以用 &lt;code>$$&lt;/code> 來作為回傳值，而上方的 action 可以用 &lt;code>$1&lt;/code>, &lt;code>$2&lt;/code> 來存取對應來自下方的回傳值。要使用這項功能需要注意需要在 Definition section 宣告相關的型別 (包含 &lt;code>%union&lt;/code>, &lt;code>%token&lt;/code>, &lt;code>%type&lt;/code>) &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>。另外，數字所表示的位子需要把 action 也計算進去，如下方範例第一個 rule &lt;code>$1&lt;/code> 來自 &lt;code>Child1&lt;/code>; &lt;code>$2&lt;/code> 來自 &lt;code>Child1&lt;/code> 的 action, &lt;code>$3&lt;/code> 來自 &lt;code>Child2&lt;/code>, &lt;code>$4&lt;/code> 來自 &lt;code>Child3&lt;/code>。換 rule 則再從 1 開始，如 &lt;code>$1&lt;/code> 來自 &lt;code>Child4&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">Parent
: Child1 {
printf(&lt;span style="color:#e6db74">&amp;#34;after reducing Child1; before reducing Parent&amp;#34;&lt;/span>);
} Child2 Child3 {
&lt;span style="color:#960050;background-color:#1e0010">$$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">123&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>;
printf(&lt;span style="color:#e6db74">&amp;#34;reduce Parent!&amp;#34;&lt;/span>);
}
&lt;span style="color:#f92672">|&lt;/span> Child4 {
&lt;span style="color:#960050;background-color:#1e0010">$$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
printf(&lt;span style="color:#e6db74">&amp;#34;reduce Parent from Child4&amp;#34;&lt;/span>);
}
;
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="symbol-table">Symbol table&lt;/h1>
&lt;p>由於硬體 (或是虛擬機器) 是看不懂你程式所寫的 &lt;code>x&lt;/code>, &lt;code>y&lt;/code> 變數，所以編譯器需要給這些變數一個位址 (address) 或是參考 (reference) 來代表不同的變數 (因為 JVM 常用參考來說明，所以這裡以後者來表示這個專有名詞)，因此 symbol table 最大用意就在生成 &amp;ldquo;變數&amp;rdquo; 與 &amp;ldquo;參考&amp;rdquo; 的一對一對應表，當有 scope 的概念時必須考慮變數是否在外層已經被定義並且從中獲取對應的參考，再來就是作業會遇到的內容就不多加贅述，不過可以提示: 是要利用 linked list 來實作 (沒意外大二資料結構就教過)。&lt;/p>
&lt;h1 id="stack-based">Stack-based&lt;/h1>
&lt;h2 id="運算範例">運算範例&lt;/h2>
&lt;p>利用 Stack-based 的運算可以大幅減少硬體的相依性，也因為 JVM 採用這個運算模式，所以我們產生的指令需要符合可執行的順序。下圖簡單示範一個加法的運作流程，左方為對應的虛擬指令，①: 第 1,2 行會把 x 變數存放的值放入 stack；②: y 也放入後遇到第 5 行的加法運算，因此將 stack 中兩個值 pop 出來進行加法運算；③: 最後將運算結果放回。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/AM-JKLVeUXwOtg_rkDa19Jd4yQ7AT2_7Ijf_6iQhaDiplgQf4-ZrvVvvl50lP0o2d3aime409KsaCtxmeyr4VN5_jZNaiFm0fBwazef5yNccep0_4hCuYok2BtO8qH9eMgOF_za2GpGjZONQGY-C6f40kMuFhQ=w611-h332-no" alt="Stack 版本的運算">&lt;/p>
&lt;p>&lt;strong>進階版本&lt;/strong> &lt;code>decl num = x + y * (3 + 5)&lt;/code> 應該要產生如下的指令順序，則在 JVM 執行流程會是: 第一個遇到的運算是 &lt;code>ADD&lt;/code>，所以 &lt;code>3&lt;/code>、&lt;code>5&lt;/code> 做完後放回 &lt;code>8&lt;/code>，再來是 &lt;code>MUL&lt;/code>，就是剛剛放回的 &lt;code>8&lt;/code> 與 &lt;code>y&lt;/code>，依此類推，最後才將結果存到 &lt;code>num&lt;/code> 中&lt;/p>
&lt;pre>&lt;code>IDENT x, ref: 0
LOAD
IDENT y, ref: 1
LOAD
NUMLIT 3
NUMLIT 5
ADD
MUL
ADD
IDENT num, ref: 2
STORE
&lt;/code>&lt;/pre>&lt;h2 id="轉成-stack-based-順序">轉成 stack-based 順序&lt;/h2>
&lt;p>這裡就不包含詳細的從頭教學，這裡示範怎麼透過 action 來將原先的順序轉換成 stack-baced 順序。根據輸入的字串 &lt;code>x * 2&lt;/code>，parser 會以同樣的順序跑過，符合可以 reduce 時才會向上合併，例如，&lt;code>MulExpr&lt;/code> (從 &lt;code>IDENT&lt;/code> ① 來), &lt;code>MulOp&lt;/code>, &lt;code>Operand&lt;/code> (從 &lt;code>NUMLIT&lt;/code> ② 來) 都走過就會 reduce 成 &lt;code>MulExpr&lt;/code> 接著執行它的 action ③。為了在 ③ 才印出運算子，這裡我們需要在 ③ 時知道下方上來的運算子是哪一個，因此利用上面提到的 &lt;a href="#%E5%88%A9%E7%94%A8-semantic-value-%E5%B0%87%E4%B8%8B%E6%96%B9%E8%B3%87%E8%A8%8A%E5%90%91%E4%B8%8A%E5%82%B3%E9%81%9E">Semantic value&lt;/a> 來傳遞 (注意 &lt;code>%union&lt;/code> 中有 &lt;code>op&lt;/code> 這個欄位，中間使用到 &lt;code>\$&amp;lt;op&amp;gt;\$&lt;/code> 代表指定的回傳型別) 讓 ③ 的 &lt;code>\$2&lt;/code> 獲得運算子資訊。所以就會達到先印出 &lt;code>x&lt;/code> 的參考及數字 &lt;code>2&lt;/code> 後再印出運算子類型。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/AM-JKLW6ZMC2XfsnZg8jHI64e3dKCSezHqXX3QGtvRlmC9ZN2z8isdz0fU7BpkalJRei9VrdiOMPcYX1J_cacpu3iiXN3EZaQPNdEoc72iKKLKHpykzNxfMX7wjvUHBtGh18vRx389qK2SxuOU-028GIcUStCw=w1371-h821-no" alt="action 被執行的步驟">&lt;/p>
&lt;h1 id="程式碼除錯">程式碼除錯&lt;/h1>
&lt;p>有時候想要確認 shift、reduce 的中間過程可以加入下方兩行程式，不過就需要自行簡化輸入的程式不然會資訊量過多難以觀察。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#define YYDEBUG 1
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> yydebug &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="測試範例">測試範例&lt;/h2>
&lt;pre>&lt;code>decl x = 2
&lt;/code>&lt;/pre>
&lt;details>
&lt;summary>&lt;span>輸出內容太多請點擊查看 &lt;/span>&lt;/summary>
&lt;pre>&lt;code>$ ./mycompiler &amp;lt; input/in02.cl
&amp;gt; Create symbol table
Starting parse
Entering state 0
Reading a token: Next token is token DECL ()
Shifting token DECL ()
Entering state 1
Reading a token: Next token is token IDENT ()
Shifting token IDENT ()
Entering state 8
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 18
Reading a token: Next token is token NUMLIT ()
Shifting token NUMLIT ()
Entering state 9
Reducing stack by rule 17 (line 166):
$1 = token NUMLIT ()
NUMLIT 2
-&amp;gt; $$ = nterm Operand ()
Stack now 0 1 8 18
Entering state 15
Reducing stack by rule 14 (line 153):
$1 = nterm Operand ()
-&amp;gt; $$ = nterm MulExpr ()
Stack now 0 1 8 18
Entering state 14
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 10 (line 136):
$1 = nterm MulExpr ()
-&amp;gt; $$ = nterm AddExpr ()
Stack now 0 1 8 18
Entering state 13
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 128):
$1 = nterm AddExpr ()
-&amp;gt; $$ = nterm Expression ()
Stack now 0 1 8 18
Entering state 27
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 31
Reducing stack by rule 6 (line 109):
$1 = token DECL ()
$2 = token IDENT ()
$3 = token '=' ()
$4 = nterm Expression ()
$5 = token NEWLINE ()
&amp;gt; Insert {x} into symbol table; assign it as ref {0}
IDENT x, ref: 0
STORE
-&amp;gt; $$ = nterm DeclStmt ()
Stack now 0
Entering state 6
Reducing stack by rule 4 (line 104):
$1 = nterm DeclStmt ()
-&amp;gt; $$ = nterm Statement ()
Stack now 0
Entering state 5
Reading a token: Now at end of input.
Reducing stack by rule 3 (line 100):
-&amp;gt; $$ = nterm StatementList ()
Stack now 0 5
Entering state 17
Reducing stack by rule 2 (line 99):
$1 = nterm Statement ()
$2 = nterm StatementList ()
-&amp;gt; $$ = nterm StatementList ()
Stack now 0
Entering state 4
Reducing stack by rule 1 (line 95):
$1 = nterm StatementList ()
-&amp;gt; $$ = nterm Program ()
Stack now 0
Entering state 3
Now at end of input.
Shifting token $end ()
Entering state 16
Stack now 0 3 16
Cleanup: popping token $end ()
Cleanup: popping nterm Program ()
&amp;gt; Dump symbol table
Total lines: 2
&lt;/code>&lt;/pre>
&lt;/details>
&lt;h1 id="完整程式碼">完整程式碼&lt;/h1>
&lt;div class="alert error-msg">
&lt;i class="fa fa-times-circle">&lt;/i>
下方程式碼的 symbol table 為求簡單所以使用一維陣列實作，僅適用於本範例，容易造成記憶體錯誤且無法套用至多層級的 scope，所以請勿學習。
&lt;/div>
&lt;ul>
&lt;li>&lt;code>mycompiler.y&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">/* Definition section */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>{
&lt;span style="color:#75715e">// Extern variables that communicate with lex
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;common.h&amp;#34; &lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// #define YYDEBUG 1
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// int yydebug = 1;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">extern&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> yylineno;
&lt;span style="color:#66d9ef">extern&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">yylex&lt;/span>();
&lt;span style="color:#66d9ef">extern&lt;/span> FILE &lt;span style="color:#f92672">*&lt;/span>yyin;
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">yyerror&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">*&lt;/span>s)
{
printf(&lt;span style="color:#e6db74">&amp;#34;error:%d: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yylineno, s);
}
&lt;span style="color:#75715e">/* Symbol table function */&lt;/span>
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">create_symbol&lt;/span>(&lt;span style="color:#75715e">/* ... */&lt;/span>);
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">insert_symbol&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> id_name);
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">lookup_symbol&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> id_name);
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">dump_symbol&lt;/span>();
&lt;span style="color:#75715e">/* Global variables */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> example_symbol_cnt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#75715e">#define MAX_SYMBOL_NUM 10
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>example_symbol[MAX_SYMBOL_NUM] &lt;span style="color:#f92672">=&lt;/span> {};
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">get_op_name&lt;/span>(op_t op) {
&lt;span style="color:#66d9ef">switch&lt;/span> (op) {
&lt;span style="color:#66d9ef">case&lt;/span> OP_ADD:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ADD&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> OP_SUB:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;SUB&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> OP_MUL:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;MUL&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> OP_DIV:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;DIV&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unknown&amp;#34;&lt;/span>;
}
}
&lt;span style="color:#f92672">%&lt;/span>}
&lt;span style="color:#f92672">%&lt;/span>error&lt;span style="color:#f92672">-&lt;/span>verbose
&lt;span style="color:#75715e">/* Use variable or self-defined structure to represent
&lt;/span>&lt;span style="color:#75715e"> * nonterminal and token type
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#66d9ef">union&lt;/span> {
&lt;span style="color:#66d9ef">int&lt;/span> val;
&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>id_name;
op_t op;
}
&lt;span style="color:#75715e">/* Token without return */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>token DECL PRINT NEWLINE
&lt;span style="color:#75715e">/* Token with return, which need to sepcify type */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>token &lt;span style="color:#f92672">&amp;lt;&lt;/span>val&lt;span style="color:#f92672">&amp;gt;&lt;/span> NUMLIT
&lt;span style="color:#f92672">%&lt;/span>token &lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span> IDENT
&lt;span style="color:#75715e">/* Nonterminal with return, which need to sepcify type */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>type &lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span> AddOp MulOp
&lt;span style="color:#75715e">/* Yacc will start at this nonterminal */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>start Program
&lt;span style="color:#75715e">/* Grammar section */&lt;/span>
&lt;span style="color:#f92672">%%&lt;/span>
Program
: StatementList
;
StatementList
: Statement StatementList
&lt;span style="color:#f92672">|&lt;/span>
;
Statement
: DeclStmt
&lt;span style="color:#f92672">|&lt;/span> PrintStmt
;
DeclStmt
: DECL IDENT &lt;span style="color:#e6db74">&amp;#39;=&amp;#39;&lt;/span> Expression NEWLINE {
&lt;span style="color:#66d9ef">int&lt;/span> ref &lt;span style="color:#f92672">=&lt;/span> insert_symbol(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>);
printf(&lt;span style="color:#e6db74">&amp;#34;IDENT %s, ref: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, ref);
printf(&lt;span style="color:#e6db74">&amp;#34;STORE&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
free(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>);
}
;
PrintStmt
: PRINT Expression NEWLINE {
printf(&lt;span style="color:#e6db74">&amp;#34;PRINT&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
}
;
Expression
: AddExpr
;
AddExpr
: AddExpr AddOp MulExpr {
printf(&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, get_op_name(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>));
}
&lt;span style="color:#f92672">|&lt;/span> MulExpr
;
AddOp
: &lt;span style="color:#e6db74">&amp;#39;+&amp;#39;&lt;/span> {
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> OP_ADD;
}
&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span> {
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> OP_SUB;
}
;
MulExpr
: MulExpr MulOp Operand {
printf(&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, get_op_name(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>));
}
&lt;span style="color:#f92672">|&lt;/span> Operand
;
MulOp
: &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span> {
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> OP_MUL;
}
&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span> {
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>op&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> OP_DIV;
}
;
Operand
: NUMLIT {
printf(&lt;span style="color:#e6db74">&amp;#34;NUMLIT %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>val&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
}
&lt;span style="color:#f92672">|&lt;/span> IDENT {
&lt;span style="color:#66d9ef">int&lt;/span> ref &lt;span style="color:#f92672">=&lt;/span> lookup_symbol(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
printf(&lt;span style="color:#e6db74">&amp;#34;IDENT %s, ref: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, ref);
printf(&lt;span style="color:#e6db74">&amp;#34;LOAD&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
free(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>id_name&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
}
&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> Expression &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>
;
&lt;span style="color:#f92672">%%&lt;/span>
&lt;span style="color:#75715e">/* C code section */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> main(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>argv[])
{
&lt;span style="color:#66d9ef">if&lt;/span> (argc &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) {
yyin &lt;span style="color:#f92672">=&lt;/span> fopen(argv[&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>);
} &lt;span style="color:#66d9ef">else&lt;/span> {
yyin &lt;span style="color:#f92672">=&lt;/span> stdin;
}
create_symbol();
yyparse();
dump_symbol();
fclose(yyin);
printf(&lt;span style="color:#e6db74">&amp;#34;Total lines: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yylineno);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> create_symbol()
{
printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; Create symbol table&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#75715e">// do nothing...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> insert_symbol(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> id_name)
{
printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; Insert {%s} into symbol table; assign it as ref {%d}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
id_name, example_symbol_cnt);
example_symbol[example_symbol_cnt] &lt;span style="color:#f92672">=&lt;/span> strdup(id_name);
example_symbol_cnt&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> example_symbol_cnt &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> lookup_symbol(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> id_name)
{
printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; Lookup in symbol table&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> example_symbol_cnt; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (strcmp(id_name, example_symbol[i]) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> i;
}
}
printf(&lt;span style="color:#e6db74">&amp;#34;{%s} not found in symbol table&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, id_name);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> dump_symbol()
{
printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; Dump symbol table&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> example_symbol_cnt; i&lt;span style="color:#f92672">++&lt;/span>) {
free(example_symbol[i]);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="測試範例-1">測試範例&lt;/h1>
&lt;ul>
&lt;li>&lt;code>input/in01.lc&lt;/code>:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>decl x = 1 + 4
decl y = 2
decl num = x + y * (3 + 5)
print num
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Result (其他檔案，如 Makefile 請參考 Source code):&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>$ make
$ ./myparser &amp;lt; input/in01.lc
&amp;gt; Create symbol table
NUMLIT 1
NUMLIT 4
ADD
&amp;gt; Insert {x} into symbol table; assign it as ref {0}
IDENT x, ref: 0
STORE
NUMLIT 2
&amp;gt; Insert {y} into symbol table; assign it as ref {1}
IDENT y, ref: 1
STORE
&amp;gt; Lookup in symbol table
IDENT x, ref: 0
LOAD
&amp;gt; Lookup in symbol table
IDENT y, ref: 1
LOAD
NUMLIT 3
NUMLIT 5
ADD
MUL
ADD
&amp;gt; Insert {num} into symbol table; assign it as ref {2}
IDENT num, ref: 2
STORE
&amp;gt; Lookup in symbol table
IDENT num, ref: 2
LOAD
PRINT
&amp;gt; Dump symbol table
Total lines: 5
&lt;/code>&lt;/pre>&lt;h1 id="references">References&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://thiagoh.github.io/bison/">Bison 3.0.4 Manual&lt;/a>&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Stack_machine#Virtual_stack_machines">https://en.wikipedia.org/wiki/Stack_machine#Virtual_stack_machines&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://thiagoh.github.io/bison/#Actions">https://thiagoh.github.io/bison/#Actions&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://thiagoh.github.io/bison/#Action-Types">https://thiagoh.github.io/bison/#Action-Types&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://thiagoh.github.io/bison/#Action-Features">https://thiagoh.github.io/bison/#Action-Features&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Build a Simple Compiler Ep1</title><link>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/</link><pubDate>Thu, 22 Jul 2021 18:17:52 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>詞法分析器 (Scanner)&lt;/p>
&lt;ul>
&lt;li>Series: &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/">[ep0]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/">[ep1]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/">[ep2]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/">[ep3]&lt;/a>&lt;/li>
&lt;li>Source code: &lt;a href="https://github.com/aben20807/learn_compiler">aben20807/learn_compiler&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="詞法分析器-scanner">詞法分析器 (Scanner)&lt;/h1>
&lt;p>這裡我們不需要像編譯系統的課本或課程中提到的演算法來用 C 語言寫一個詞法分析器，而是利用 flex (lex) 這個詞法分析器產生器，它讓使用者可以用一些高階的定義詞法分析的模式，接著自動產生對應的詞法分析器。&lt;/p>
&lt;p>使用這類工具的原因如下:&lt;/p>
&lt;ul>
&lt;li>減少人工撰寫造成的錯誤&lt;/li>
&lt;li>開發快速且方便除錯&lt;/li>
&lt;li>&lt;del>修課學生不是每一個都對編譯器有興趣，但這是必修課&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>然而實際上真實的複雜語言，如 C++、Rust、Go &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> 大多都是手寫來達到更高的設計彈性。&lt;/p>
&lt;h1 id="flex-lex-三大區塊">flex (lex) 三大區塊&lt;/h1>
&lt;p>用兩個 &lt;code>%%&lt;/code> 來作為區隔:&lt;/p>
&lt;ul>
&lt;li>Definition section: 又分作兩個小區塊 (可對照下方完整程式碼): %{ 定義標頭檔、全域變數 %}、正規表達式標籤、condition (&lt;code>%x&lt;/code>) &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>、選項 (&lt;code>%option&lt;/code>) &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Rules section: 定義判斷為 token 的規則。定義的順序會影響優先度所以要考慮是否會覆蓋其他規則，例如關鍵字應該要優先於變數名，否則像是 &lt;code>decl&lt;/code>, &lt;code>print&lt;/code> 會被判定為 ident。這同時也是為何 &lt;code>.&lt;/code> (匹配所有字元) 會放在最下面&lt;/li>
&lt;li>C Code section: 定義 main 函式、其他函式&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>&amp;lt;&amp;lt; Definition section &amp;gt;&amp;gt;
%%
&amp;lt;&amp;lt; Rules section &amp;gt;&amp;gt;
%%
&amp;lt;&amp;lt; C Code section &amp;gt;&amp;gt;
&lt;/code>&lt;/pre>&lt;h1 id="正規表達式">正規表達式&lt;/h1>
&lt;p>這裡主要利用正規表達式 (Regular Expression, regex, regexp, RE) 來判斷一個輸入中有那些 token，例如 &lt;code>apple&lt;/code> 不是任何一個保留關鍵字，所以就是一般的變數名稱。由於本系列所採用的是簡化版的語言，變數只有大小寫字母組成，所以這裡就直接定義 &lt;code>ident&lt;/code> 個標籤負責對應 &lt;code>{letter}+&lt;/code> 其中 &lt;code>letter&lt;/code> 對應 a~z 或是 A~Z 其中一個字元。&lt;/p>
&lt;h1 id="完整程式碼">完整程式碼&lt;/h1>
&lt;ul>
&lt;li>&lt;code>mycompiler.l&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">/* Definition section */&lt;/span>
&lt;span style="color:#f92672">%&lt;/span>{
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#define YY_NO_UNPUT
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#define YY_NO_INPUT
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">%&lt;/span>}
&lt;span style="color:#75715e">/* Define regular expression label */&lt;/span>
letter [a&lt;span style="color:#f92672">-&lt;/span>zA&lt;span style="color:#f92672">-&lt;/span>Z]
digit [&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span>]
ident {letter}&lt;span style="color:#f92672">+&lt;/span>
num_lit {digit}&lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#75715e">/* Rules section */&lt;/span>
&lt;span style="color:#f92672">%%&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;+&amp;#34;&lt;/span> { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;ADD&amp;#34;&lt;/span>); }
&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;SUB&amp;#34;&lt;/span>); }
&lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span> { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;MUL&amp;#34;&lt;/span>); }
&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span> { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;DIV&amp;#34;&lt;/span>); }
&lt;span style="color:#e6db74">&amp;#34;(&amp;#34;&lt;/span> { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;LPAR&amp;#34;&lt;/span>); }
&lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span> { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;RPAR&amp;#34;&lt;/span>); }
&lt;span style="color:#e6db74">&amp;#34;=&amp;#34;&lt;/span> { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;ASSIGN&amp;#34;&lt;/span>); }
&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">n&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;NEWLINE&amp;#34;&lt;/span>); }
&lt;span style="color:#e6db74">&amp;#34;decl&amp;#34;&lt;/span> { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;DECL&amp;#34;&lt;/span>); }
&lt;span style="color:#e6db74">&amp;#34;print&amp;#34;&lt;/span> { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;PRINT&amp;#34;&lt;/span>); }
{ident} { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;IDENT&amp;#34;&lt;/span>); }
{num_lit} { printf(&lt;span style="color:#e6db74">&amp;#34;%-8s &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, yytext, &lt;span style="color:#e6db74">&amp;#34;NUMLIT&amp;#34;&lt;/span>); }
&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>EOF&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> { yyterminate(); }
. {;}
&lt;span style="color:#f92672">%%&lt;/span>
&lt;span style="color:#75715e">/* C Code section */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> yywrap(&lt;span style="color:#66d9ef">void&lt;/span>)
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">int&lt;/span> main(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>argv[])
{
&lt;span style="color:#66d9ef">if&lt;/span> (argc &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) {
yyin &lt;span style="color:#f92672">=&lt;/span> fopen(argv[&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>);
} &lt;span style="color:#66d9ef">else&lt;/span> {
yyin &lt;span style="color:#f92672">=&lt;/span> stdin;
}
yylex();
printf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Finish scanning.&amp;#34;&lt;/span>);
fclose(yyin);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="測試範例">測試範例&lt;/h1>
&lt;ul>
&lt;li>&lt;code>input/in01.lc&lt;/code>:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>decl x = 1 + 4
decl y = 2
decl num = x + y * (3 + 5)
print num
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Result (其他檔案，如 Makefile 請參考 Source code):&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>$ make
$ ls
input/ lex.yy.c Makefile mycompiler.l myscanner*
$ ./myscanner &amp;lt; input/in01.lc
decl DECL
x IDENT
= ASSIGN
1 NUMLIT
+ ADD
4 NUMLIT
\n NEWLINE
decl DECL
y IDENT
= ASSIGN
2 NUMLIT
\n NEWLINE
decl DECL
num IDENT
= ASSIGN
x IDENT
+ ADD
y IDENT
* MUL
( LPAR
3 NUMLIT
+ ADD
5 NUMLIT
) RPAR
\n NEWLINE
print PRINT
num IDENT
\n NEWLINE
Finish scanning.
&lt;/code>&lt;/pre>&lt;h1 id="references">References&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://westes.github.io/flex/manual/">Lexical Analysis With Flex, for Flex 2.6.2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cs.virginia.edu/~cr4bd/flex-manual/index.html#Top">Lexical Analysis With Flex, for Flex 2.6.3&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/westes/flex">westes/flex&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/39075510/option-noinput-nounput-what-are-they-for">YY_NO_UNPUT, YY_NO_INPUT&lt;/a>&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/GNU_Bison#Use">https://en.wikipedia.org/wiki/GNU_Bison#Use&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_lexer/lib.rs.html">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_lexer/lib.rs.html&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_parse/lib.rs.html">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_parse/lib.rs.html&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://www.cs.virginia.edu/~cr4bd/flex-manual/Start-Conditions.html">https://www.cs.virginia.edu/~cr4bd/flex-manual/Start-Conditions.html&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>&lt;a href="https://www.cs.virginia.edu/~cr4bd/flex-manual/Scanner-Options.html#Scanner-Options">https://www.cs.virginia.edu/~cr4bd/flex-manual/Scanner-Options.html#Scanner-Options&lt;/a> &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Build a Simple Compiler Ep0</title><link>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/</link><pubDate>Thu, 22 Jul 2021 17:17:52 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>說明及事前準備&lt;/p>
&lt;ul>
&lt;li>Series: &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep0/">[ep0]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep1/">[ep1]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep2/">[ep2]&lt;/a>, &lt;a href="https://aben20807.github.io/posts/20210722-build-a-simple-compiler-ep3/">[ep3]&lt;/a>&lt;/li>
&lt;li>Source code: &lt;a href="https://github.com/aben20807/learn_compiler">aben20807/learn_compiler&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>雖然好像很多相關資料了，但我覺得還是欠缺完整性，所以就寫了這個系列來補全。儘管還是有少數人無論如何都選擇直接抄襲同學這條路，但還是希望透過本系列能夠清楚完整的帶領完全沒概念的人走一遍，藉此降低這些行為。&lt;/p>
&lt;p>雖然我算是蠻常使用本系列所介紹的這套工具了，不過可能還是會有錯誤的地方，還請各位不吝指教。&lt;/p>
&lt;h1 id="本篇所建構的編譯器">本篇所建構的編譯器&lt;/h1>
&lt;p>本系列內容為使用 flex/bison (lex/yacc) 建構一個簡易的編譯器，並使其產生的 jasmin 指令可在 JVM 執行。完整執行流程如下。我們會利用 flex 產生 scanner，利用 bison 產生 parser。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/AM-JKLVfavnVca_5BLSfCjR9c4-qX2B3aClIeT0xi-dKP7OA3I6YQ6wpE7Xpesp1-TiV7scUERknJm54uRRowNcFRd1vm7irZP_97aKpwDJMTSH8d5B0bcyF6whs077_llSwlHZyCey4jSwH4XqjpQ8O2vJ5pQ=w551-h281-no" alt="流程，橘色區塊為本系列需要寫程式的部分">&lt;/p>
&lt;h1 id="環境設定">環境設定&lt;/h1>
&lt;h2 id="作業系統">作業系統&lt;/h2>
&lt;ul>
&lt;li>OS: Ubuntu 18.04 (我使用 WSL2)&lt;/li>
&lt;/ul>
&lt;h2 id="軟體安裝">軟體安裝&lt;/h2>
&lt;ul>
&lt;li>gcc: 7.5.0 (&lt;code>gcc -v&lt;/code>)&lt;/li>
&lt;li>gnu make: 4.1 (&lt;code>make -v&lt;/code>)&lt;/li>
&lt;li>flex: 2.6.4 (&lt;code>flex --version&lt;/code>)&lt;/li>
&lt;li>bison: 3.0.4 (&lt;code>bison --version&lt;/code>)&lt;/li>
&lt;li>java: openjdk 11.0.10 (&lt;code>java --version&lt;/code>)&lt;/li>
&lt;li>安裝指令: &lt;code>$ sudo apt install gcc make flex bison default-jre&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="定義本次教學的語言">定義本次教學的語言&lt;/h1>
&lt;p>主要特性: 包含賦值、基本四則運算、輸出。&lt;/p>
&lt;h2 id="型別-type">型別 type&lt;/h2>
&lt;ul>
&lt;li>整數 (num_lit), e.g., &lt;code>1&lt;/code>, &lt;code>2&lt;/code>&lt;/li>
&lt;li>變數 (ident), e.g., &lt;code>x&lt;/code>, &lt;code>y&lt;/code>, &lt;code>num&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="運算子-operator">運算子 operator&lt;/h2>
&lt;ul>
&lt;li>&lt;code>+&lt;/code>: 加&lt;/li>
&lt;li>&lt;code>-&lt;/code>: 減&lt;/li>
&lt;li>&lt;code>*&lt;/code>: 乘&lt;/li>
&lt;li>&lt;code>/&lt;/code>: 除&lt;/li>
&lt;li>&lt;code>=&lt;/code>: 宣告時賦值&lt;/li>
&lt;/ul>
&lt;h2 id="其他符號">其他符號&lt;/h2>
&lt;ul>
&lt;li>&lt;code>(&lt;/code> &lt;code>)&lt;/code>: 運算有最高優先度&lt;/li>
&lt;li>&lt;code>\n&lt;/code> (newline): 換行作為結尾&lt;/li>
&lt;/ul>
&lt;h2 id="關鍵字-keyword">關鍵字 keyword&lt;/h2>
&lt;ul>
&lt;li>&lt;code>decl&lt;/code>&lt;/li>
&lt;li>&lt;code>print&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="簡化的文法-grammar">簡化的文法 grammar&lt;/h2>
&lt;ul>
&lt;li>未標示運算子優先順序，但是符合先乘除後加減，括號優先度最高。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>Statement -&amp;gt; DeclStmt
| PrintStmt
DeclStmt -&amp;gt; &amp;quot;decl&amp;quot; ident &amp;quot;=&amp;quot; Expression newline
PrintStmt -&amp;gt; &amp;quot;print&amp;quot; Expression newline
Expression -&amp;gt; Expression BinaryOp Expression
| Operand
Operand -&amp;gt; num_lit
| ident
| &amp;quot;(&amp;quot; Expression &amp;quot;)&amp;quot;
BinaryOp -&amp;gt; &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="範例輸入">範例輸入&lt;/h2>
&lt;pre>&lt;code>decl x = 1 + 4
decl y = 2
decl num = x + y * (3 + 5)
print num
&lt;/code>&lt;/pre>&lt;h1 id="qa-僅代表本人意見">Q&amp;amp;A (僅代表本人意見)&lt;/h1>
&lt;details>
&lt;summary>&lt;span>建議心理素質強健者再行觀看 &lt;/span>&lt;/summary>
&lt;ul>
&lt;li>&lt;strong>Q&lt;/strong> 為何編譯系統&lt;del>目前&lt;/del>為必修?&lt;/li>
&lt;li>&lt;strong>A&lt;/strong> 這需要回顧一下整個資訊工程的範疇，一般這個科系會有一些硬體課程以及多數的軟體課程 (包含數學、理論)，編譯系統是連接兩大領域的科學，因此在這堂課會用到幾乎所有在大學的所學 (例如，程式設計、資料結構、演算法、作業系統、計算理論)，雖然沒有到使用硬體指令 (否則會太難，想學可以參考 Jserv 的課)，不過可以說是整個大學的總整理。&lt;/li>
&lt;li>&lt;strong>Q&lt;/strong> 為何編譯系統這麼難?&lt;/li>
&lt;li>&lt;strong>A&lt;/strong> 其實課程部分一點也不難，每年超過100分的大概都有 20 個已經超過修課人數的一成，要不及格只可能是上課都沒在聽、考試沒複習、作業有問題都沒有問幾乎每次都沒交。如果是編譯器領域的話的確是難，但相對的會的人就少。&lt;/li>
&lt;li>&lt;strong>Q&lt;/strong> 為何作業沒有部份給分?&lt;/li>
&lt;li>&lt;strong>A&lt;/strong> 試想你之後出社會，老闆要你開發產品而你只能寫出屍體，連執行都不行，這樣你覺得老闆要給你多少薪水。你總不能跟他說我寫了哪些功能只是不能跑，所以應該要部份給薪吧。&lt;/li>
&lt;/ul>
&lt;/details></description></item><item><title>Google Sheet Grouping</title><link>https://aben20807.github.io/posts/20210529-google-sheet-grouping/</link><pubDate>Sat, 29 May 2021 11:16:15 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210529-google-sheet-grouping/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>Proficient programming language:&lt;/p>
&lt;ul>
&lt;li>Google sheet&lt;/li>
&lt;/ul>
&lt;p>善用工具的心法很簡單：&lt;/p>
&lt;blockquote>
&lt;p>我相信有這個功能&lt;/p>
&lt;/blockquote>
&lt;p>不過還是需要拆解一下：需求 -&amp;gt; 功能分解 -&amp;gt; 合併&lt;/p>
&lt;h1 id="需求">需求&lt;/h1>
&lt;p>以這次功能為例，我想要針對所有同學進行分組，但是不需要隨機，只要按照順序分 A, B, C 就好。&lt;/p>
&lt;h1 id="功能分解逐漸合併">功能分解、逐漸合併&lt;/h1>
&lt;p>三個一個循環很容易想到取餘數 (modulo)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。接著到 Google sheet function list &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> 搜尋看看有沒有：&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3eHskvbWonxNnPntuPoVU-BB5frZRuSWBseEPPHvhg16rNbOLr23yhb2Tuz85f7vYaXiwlkgFMsTjsSitPAAevG904AnSEQLgyMMEghKFwomt81AQKUzU-Cv67Q451GlAUpLWxmeoHNrMmOykGNJMUO3A=w1199-h776-no" alt="搜尋結果">&lt;/p>
&lt;p>我們大概可以知道 &lt;code>MOD(x, y)&lt;/code> 得到的是 &lt;code>x/y&lt;/code> 的餘數，因此 &lt;code>x&lt;/code> 是對應到列數，而 &lt;code>y&lt;/code> 是分組的數量。&lt;/p>
&lt;p>再來比較抽象。我們有了餘數功能，要怎麼對應到每一列 (row)? 所以就找到 &lt;code>ROW()&lt;/code> 可以取得目前的列數，這樣我們就得到 &lt;code>x&lt;/code> 了。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3fiUAHHbCsaBpyvclBHNlMa57_1-JlrEAxSMRP3BVX071SZnn_ORcsEhZtnJHOuKy4HK67yw_JdbdKocrBhJwjWvqgLf5GxGDsakCLbiTZJdNWIicGirct-YQ-ddVNbS58h_rayFvi4zN9yi041gG4zaQ=w307-h386-no" alt="每個人的列數">&lt;/p>
&lt;p>&lt;code>y&lt;/code> 用 &lt;code>3&lt;/code> 代入&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3fEda2LS9FQLpGcan6rweZctvXTwK1q-OsEA-kjdmbCe6u0L40y0W2deC-sJb0sreCOLIrhbHIjJZnaSofjM0YcA6TgpQd7DauHQy5-FalhW0LMzRniLvSulgd21t9MxtSjjYiN1UdP0KBHHbPw-wdfCw=w308-h387-no" alt="2,0,1 重複出現">&lt;/p>
&lt;p>如果分組編號就是 0,1,2 的話就可以在這邊停止，不過如果要重新取代號 (A,B,C) 或是分配不同內容給各個組別時就需要繼續下去。&lt;/p>
&lt;p>再來的思考方向，就是用剛剛的 0,1,2 當作索引值 (index)，查看看如何用索引值取得其他格子的內容。我們選擇使用 &lt;code>INDEX()&lt;/code>，其使用方法就是先選擇一個區塊 &lt;code>reference&lt;/code> 接著用 &lt;code>row&lt;/code>, &lt;code>column&lt;/code> 去選擇。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3fSOGvhxqM_OW94b9zA6qbLl1QGMXiLcMS-4wcQgOTPUiaXnA1PIOUqcfRX39GNuWDQDAycJXlsi1vvnI_uHAMqTd4MRD8le7oTlrBVVII1nJ_oyE07eYf-GL8cyEuqhAZ2t28PFZQ6iwBqmtftOAK_wA=w1174-h900-no" alt="選一個功能最不複雜的">&lt;/p>
&lt;p>套用進去會長這樣，&lt;code>INDEX(\$E\$1:\$E\$3, MOD(ROW(), 3))&lt;/code> (&lt;code>\$&lt;/code> 是鎖定用，不會因為下拉導致列或欄改變，因為 &lt;code>E1:E3&lt;/code> 是固定放我們的代號)。
&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3djn5Tqfhr3O1GH6SALCCahCihSID6m0RbA_4VYXGqNU61yoL5Lk6bRp81gsIVOj8tevLHv0-w-0RihTdeAv6UfDQtqwE4CTepk71mYrFmztiTzwjMSvtxqcXrEo8y2Wu2t4K81R18gRBF1VkY41F3K7Q=w506-h385-no" alt="目前的成果">&lt;/p>
&lt;p>會發生上面的錯誤是因為 &lt;code>INDEX&lt;/code> 使用的列起始是從 &lt;code>1&lt;/code> 開始，所以我們來加 &lt;code>1&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3dsrRA-9kdsJrtANswZ01XvsoSW3UdUn8UyjgTCqihHAq_QH7Dm65y9P0616XASNuCcVu2Np_ZR9Z5ZiobW-by36NZT-U87j3eO_EK1LYqoxrmN_m-vSOUD5OETzm_7CtQ6IoWfkwzDz0arxbha-QTmDQ=w506-h385-no" alt="完成">&lt;/p>
&lt;p>如果想要 A 開始的會只要將右邊 E 欄換個順序即可。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3eGzeTF-u6a8scFj0NVUs5GCRge149HD7X6oygWYCyLx322QMxejANFBdLzqkTCBtMaX78yDWUHRCzbZBg3NimvKwhXokBfc_FJi4KNL-iPFX1MS6mgLarOQIwLPbKsxItFPkB9PvsDneu1N9XYXzcmVg=w505-h387-no" alt="換順序">&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>(&lt;a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation&lt;/a>)。 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>(&lt;a href="https://support.google.com/docs/table/25273?hl=en">https://support.google.com/docs/table/25273?hl=en&lt;/a>) &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Hugo on WSL2 (Ubuntu18.04)</title><link>https://aben20807.github.io/posts/20210215-hugo-on-wsl2/</link><pubDate>Mon, 15 Feb 2021 10:56:01 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20210215-hugo-on-wsl2/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>漸漸變成老闆的樣子 (?)&lt;/p>
&lt;h1 id="tldr">TL;DR&lt;/h1>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cd /tmp
$ wget https://github.com/gohugoio/hugo/releases/download/v0.80.0/hugo_extended_0.80.0_Linux-64bit.tar.gz
$ tar xvf hugo_extended_0.80.0_Linux-64bit.tar.gz
$ sudo mv hugo /usr/local/bin
$ hugo version
Hugo Static Site Generator v0.80.0-792EF0F4/extended linux/amd64 BuildDate: 2020-12-31T13:46:18Z
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>筆電系統演進:&lt;/p>
&lt;ul>
&lt;li>國小~國中 (Windows)&lt;/li>
&lt;li>高中 (VirtualBox, Wubi)&lt;/li>
&lt;li>大一~三 (Cygwin, VirtualBox)&lt;/li>
&lt;li>大四~研一 (Dual system)&lt;/li>
&lt;li>研二~??? (Windows)&lt;/li>
&lt;/ul>
&lt;p>雖然開發還是在 Linux 上，不過文書的處理會越來越多，所以筆電如果用雙系統會頻繁的切換，相當麻煩。因此目前是用遠端軟體連到 Linux 做開發 (需要的話。&lt;/p>
&lt;p>最近 Win10 已經可以支援 WSL2 了，雖然要經過一些步驟，不過已經相對穩定，目前用的很多簡單指令都有支援，所以像 VSCode 用的 git 也可以直接用 WSL2 內的 git 了 &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>因此目前的文書作業，包括計畫書 (Word)、論文 (Latex)，我都轉移到 Win10。&lt;/p>
&lt;p>為了檢驗相容性，也嘗試在 WSL2 中用 hugo 寫個東西。找很久才發現，原來可以直接下載編譯好的執行檔。詳細就請看最前面的指令。&lt;/p>
&lt;h1 id="結語">結語&lt;/h1>
&lt;p>結果每次都是過年在寫文章&amp;hellip;&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://aozaki-kuro.com/tech/hugo-deployment-debugging/#wsl2%E5%86%85%E9%83%A8%E7%BD%B2hugo">Hugo部署与踩坑记&lt;/a>&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>(&lt;a href="https://github.com/andy-5/wslgit">https://github.com/andy-5/wslgit&lt;/a>) &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>寫一個記帳程式有多難？</title><link>https://aben20807.github.io/posts/20200815-how-hard-to-build-money-manager-app/</link><pubDate>Sat, 15 Aug 2020 17:17:26 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200815-how-hard-to-build-money-manager-app/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>靈機一動，想說可以用表單來記帳，一查果然有人做過 OuO&lt;/p>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>又被 Google play 發了60元禮金，想說看一下工具類的 APP 付費情況，發現前幾名有兩個記帳 APP，原本想說要買來用養成一下記帳，可是我對現有的記帳程式沒有啥好感，之前也用過兩三種，後來也都放棄。結果後來想想還是不要拿來買工具，所以又買了一個 Rusty lake 的遊戲，燒腦的解謎遊戲，多多支持 (無業配XD)&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3fMBGVal6Y6qmf0-CSh-AfKoWtWNqvCUI-60lPR7C9ZAgDbE0CNwlqPyAdjm-Q1uLbExDxLR14b6K2AtJJZLBcHftF0fZ3gblRscO7kjQBQ0DP74gCnNbiFOOOdxHri-Zqcay_gKsUCyi_Y7hkR49XQ=w646-h1041-no" alt="Rusty Lake Paradise">&lt;/p>
&lt;h1 id="使用表單記帳">使用表單記帳&lt;/h1>
&lt;p>靈機一動，想說可以用表單來記帳，一查果然有人做過&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>不過我也只是採用了簡單部份，後面那個對帳有點複雜啊。所以我就建了兩個表單：消費記錄、轉帳記錄。&lt;/p>
&lt;ul>
&lt;li>消費記錄：記錄平常花費&lt;/li>
&lt;li>轉帳記錄：領錢、悠遊卡或是點點卡儲值&lt;/li>
&lt;/ul>
&lt;p>用表單記帳好處：&lt;/p>
&lt;ul>
&lt;li>雲端化，即時更新&lt;/li>
&lt;li>自動時間戳記&lt;/li>
&lt;li>超客制化，問題選項及流程都自行設計&lt;/li>
&lt;li>統計圖表功能完整&lt;/li>
&lt;/ul>
&lt;p>可能缺點：&lt;/p>
&lt;ul>
&lt;li>一定要有網路才能記帳&lt;/li>
&lt;li>複雜統計功能要花時間設計&lt;/li>
&lt;li>某些表單沒有的可能就無法提供，例如，顯示表格，另外我發現手機無法上傳圖片 QuQ&lt;/li>
&lt;/ul>
&lt;h2 id="表單設計">表單設計&lt;/h2>
&lt;p>表單有一個很有用的功能，就是區段，可以針對回答跳轉到不同的問題&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3dtUNadoaEi6qkB0o9GKiDL1uZLqi7ZtRLBbOshWrIMFbIkF5MYjICopOKcSXLBjJldZudGT87f5hrf02RASGct7YaMXLHAphLohzBmlMlNjxhetEQ54pa7bwIqhv150zbY_sxdVIuaM3zGVSDU6XmB=w859-h579-no" alt="根據回答跳轉區段">&lt;/p>
&lt;p>所以大概就是這樣設計，如此便可以快速方便記錄細節。其實這就是一個狀態機，Compiler DFA 回憶起來~ 針對自己的情況加選項或是問題，超級客制化。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3e_fQr9GGaMQHlG1-JLvQpCmzcuImufjPFuqtFlugwb9QRj9VCHhpGle_-A-zICRSk6ZQ9PqXyftjUV1piJdzm5mz2syYiKMI6LbS5gocIyS4fSv-Z_GdTWehkdEVe13kp35NYO7MdXNYTFKzvdeJya=w892-h422-no" alt="我沒畫完整版的喔">&lt;/p>
&lt;h2 id="預先填入表單">預先填入表單&lt;/h2>
&lt;p>某些選項可能超常用，比方說消費記錄大部份都是現金，可以將它用作選項預設值，可以參考 &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3c51lQNqFVCSqjAn2XVkDt0xZSs9PSqt2S623mTXkh-oTcmLdcNJd5Qh59cDiUALwe4EnGx1oO94vTn9O8AasjwZOfFwG8IkdblaSR4643XjYfozFOT5h1bJpxScbVyPMBXMlYAH0tlZd6irq7jWtyc=w692-h403-no" alt="新版在右上角">&lt;/p>
&lt;h2 id="如何使用表單">如何使用表單&lt;/h2>
&lt;p>一開始想法很簡單，就是建立記錄用的表單，然後將連結用書籤的型式存在手機桌面，這樣就可以直接點來記帳。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3dBfRoc4yz-m2ciB1uy1WiY5NUFUdHZZ7Us8HWtZPVZviemG2keYD56E0Ujo-00380KveIxeQcQ2l5AqRjHYrVejcxQESoC6lR43QtZGwsSKjyX-m_0rdqzzg8hE0Y9NEUjzPRe7L4t3R4J5TTtrmwQ=w1272-h836-no" alt=" ">
&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3frXOytq3We7pyNsglA69vKcVR3mFoV0nQbihbk8mqR5ebdj-gxlvXPhxQ7oNByjdtlwTQ9Szj1TTxC4mWJ0ty7SLGr5LpJIJKMmpWzBGlyHuK-26TGR8A2rgkBn4nUv_ODDaC1FUCxQDjO51t8dUrE=w1272-h903-no" alt="出現在桌面">&lt;/p>
&lt;h1 id="app">APP&lt;/h1>
&lt;p>用書籤有一個很大的缺點，就是一定要放在桌面，多表單的話很麻煩。再來就是每次點開就需要開啟瀏覽器，而我的瀏覽器頁面常駐超過 99 個分頁 (&lt;code>:D&lt;/code>) 所以載入要花費一定的記憶體及時間。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3fljY1Lx9qYXtjq8dfqx-dSbDyjz9IMmU5DAMkDUivBFwupJQSODbQxBZD3NEQqxt0v8dZhQKk1COJQDHHgtNnIawzdwr5WEJZjZvyh2Tgq31R2aY3cLObAA2ELveNItMXgpRmasztoSxK93Le0--3X=w1272-h1239-no" alt=" ">&lt;/p>
&lt;p>於是我就想說找看看有沒有將表單變成 APP 的方法，不過看來沒有簡單的方法，&lt;a href="https://play.google.com/store/apps/details?id=x1Trackmaster.x1Trackmaster&amp;amp;hl=zh_TW">AppSheet&lt;/a> 好像可以不過似乎之後要收費。接著我就打算自己用一個簡單的 APP。&lt;/p>
&lt;p>Android Studio 過於肥大是不得已才會採用。查了一下發現 App Inventer 2 (AI2) 也有支援 WebView 的元件所以我的想法應該可行，基本概念就是用 WebView 來載入我們的表單，用按鈕控制開啟哪個表單這樣。&lt;/p>
&lt;h2 id="版面設計">版面設計&lt;/h2>
&lt;p>兩個畫面，左邊主畫面作為一開始進入的畫面；右邊用來開啟網頁也就是表單，放一個 WebViewer 然後大小用最大。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3dV5Gn101vL3GfVWY6yecntkVd0UP_vDgzZGqd0tjoA8k9V87nX7zlF2EbEFGxqcDrn8icutYcE4SV7-tv9eCHWX3qc8Mez--FxVkzNpoQmtH-IbD-Vu0iVv4sIKCEPKIw8KLvQYWBwdJnK8PfNJZoG=w1272-h554-no" alt=" ">&lt;/p>
&lt;h2 id="開始寫-code咦是拉-code">開始寫 code，咦，是拉 code&lt;/h2>
&lt;p>先展示一下完整的模樣&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3e3RXtqDVFdubJjmlkAZCHYZ8ru-FtTDTd8vtkxaetMkS1p7LiDKKNdgLZ0IXXq27vYR2-onK45Gghk3-itmUuTId7LzROOm0tcuY9_xstcEfiDZ7-NichYkmS5t7Rk52bOgpAIBvUxBzj0fkCEvxRR=w1272-h643-no" alt="Screen1">&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3e2vKJQmuKlTVEAJ88cMpwZBqYB05bvn23YiBIITp8wQ4EKct_hx56i0QFq6Fhhx1novqwDOLs0kyxpPMnU0UkKL9-PeN5MnMBSLV9HCkuzJT3g47X_jkz-a_E2_BzZqZvWJrEKl-TR1NbEGyd-QOYg=w1272-h640-no" alt="Screen2">&lt;/p>
&lt;ol>
&lt;li>首先是畫面進入及離開，因為在 AI2 中對 TextBox 作修改是無法儲存的，關閉 App 重開後會恢復，所以這裡採用建議的方式：用 TinyDB 當作儲存空間。那紫色的兩個 procedure 將在稍候提到。主要就是用來讓設定可以被儲存。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3dZJnlJPYoM8IWlwit56aajeQJuqncIQu5uY5sh1pZIxoxaCayShM1Ay7BmT2j6S5MxmrNmMAf7BGEfBvJaglWr6GqP_vE4eu3d8eVXRie1sVBmiwzBVQJ3knwwkcTK-V7lrddQ4lIuC7PrbM9Og8vz=w285-h219-no" alt=" ">&lt;/p>
&lt;ol start="2">
&lt;li>點擊按鈕後傳送對應的連結給 Screen 2 當作瀏覽連結，這裡我有點懶所以命名就大致上不更改@@，值得注意的是，這裡看到傳入 TextBox 的值，可是剛剛畫面上沒看到 TextBox 啊，其實是我隱藏起來了，將 visiable 設定為 false，按下設定才會顯示。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3cNajTDVEms6BWCGBHIX63Fd96YTILkirW2p1q-3ZP_hStceuVfYwJaYOU5hTqFINqrGtgCQfCPL0ggoefHZNOnq5bQMG4QdZdPCoPtc-3NVfHMrlOabF64OWSOJLnnsoRCA3XgfSDlXf3VXROB5GxR=w592-h299-no" alt=" ">&lt;/p>
&lt;ol start="3">
&lt;li>Screen 2 接收剛剛傳的連結後當作首頁畫面，Screen 2 也就只有這個方塊。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3e6D9aJTo3gFXSJfGY-iZRUp-u_KXDHUEJFF8QUDn5Jldo8X0lMhkwOa8x4xL3KqFa4kSqFbCDj7PzP-P_-UNhxP5EtyR0DqAEk67CtIQOMSGOa6OMOCo9euneoXM1NScigiOmUBofdCfifTklbz5uT=w521-h200-no" alt="Screen2">&lt;/p>
&lt;ol start="4">
&lt;li>這裡就是我在 2. 中提到的，按設定的按鈕會顯示設定&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3f_jBNSwSu_p9eWDv0JXn71OjRa06_utd5xEswjfv0jJzZ37yEsERkJhZWAF8dZjET5kNbGcIPxv69s5IJ3yi-zi0bhSXjBuRZeXrjV8LpzEZ-j0R-kDJC6gMraE-fKY-1B9SvYuK-ACQN2biQz7gCe=w465-h160-no" alt="Setting section">&lt;/p>
&lt;ol start="5">
&lt;li>在 4. 中設定的部份會需要儲存到 TinyDB 中。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3ctSw-g3InpKnt1QyfG7yu4i5nKUx_671d5lJf6lmI4rxnGNUPmnw0iZNa7TZHgvS3nbeRoQc3muMyjZhg6K1iyHWZ2jpAjMt7jyZ2hwX5my6GPAUpH3TW48aaNVq1gcDnAfyDWo0fcgZnbwWdLTG1s=w449-h290-no" alt="Set button">&lt;/p>
&lt;ol start="6">
&lt;li>最後，把 TextBox 存取 TinyDB 的動作寫成 procedure，這樣比較清楚。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3fuQeIoXDp-C0TvgNpIznR4JRc9DS0LNSmCg0kfnQbSz3r_FlL3sxPNhAg4PG_OWO0tixY_v9-p9tlfMDECuiPBbu3HDHNDPLFsoXp_3S2Zduhvrc4Q24jfEasuM55IkriY7mdfDjI5nVVFbK_6ywRR=w668-h1038-no" alt="">&lt;/p>
&lt;ol start="7">
&lt;li>額外功能。開啟相機掃描 QRcode 並複製到剪貼簿，這裡需要安裝一個外掛套件 &lt;a href="https://puravidaapps.com/clipboard.php">Clipboard Extension&lt;/a>，另外記得取消勾選BarcodeScanner1 的 UseExternalScanner 直接使用內建的即可。會多這個功能主要是可以用在電子發票上，在記帳前可以先掃描，之後直接複製到備註那邊即可。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3c-baXvN_ippYf4tCbROQDqkwHjfknfbXDqdElVdxzrL59g3gnELs3BUf2Ep_xsxMGlpB9Hv7SCx8oWR5wzQ8ERxKR8UTf7qtScZWZwMu9pbp4PmYYVQavRyFq_JKcg6vFP5bARTyCiu73obddk6AJC=w401-h272-no" alt=" ">&lt;/p>
&lt;h1 id="成品">成品&lt;/h1>
&lt;p>感覺我也不算是做一個記帳 App，反而像是將書籤或是網址合併變成一個 App，所我雖然取這個名子不過我還是找一個沒有跟錢相關的 icon。我也增加設定頁面可以設定的東西，包括按鈕的文字也可以換，所以也就不限於記帳了。&lt;/p>
&lt;p>Icons made by &lt;a href="https://smashicons.com/">Smashicons&lt;/a> from &lt;a href="https://www.flaticon.com/">www.flaticon.com&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3dCHkhaKSt4Pe-t7pRfxzxIkU9A_MWEyLR0svdl1wfinZR2ZWCTHdPAPFcmO0ZvBb8zNxEeMLkDC8hIWSV3dGmKY_CWAYZmojmgoma500tOE_9fMUyDH3nY0faL-9rCjL-91-TE52bD_NTjXlzn55CU=w660-h1319-no" alt=" ">&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3er9oo-dAdEogzgXc41sHDxnVwKEkUQc0l36X0jxzWBpb92QlXhWG6E7__NLzf9SarSWnkUIMytNOhLRCXg5ur5F9_DcTGqRs6pYsgzE7htPymKKSPlUigLhhJbOe5KgmmHm2vRSf3gAodtYE0m83Dh=w660-h1319-no" alt="主頁面">&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3ev0_9UxWRs2TNPcc947ntp3ncr_Tkl8E_mYhJWHBTOlMeWi9GEbFH0H_j7iXEQyYsnGhu2-hxX2t12ktLjV0-tB5RKV9M292ZcbKR9-KMBRa-nCNzV5QxBkpHGM4-bc5B3pHNr0EPA1DOuaOB2pzog=w660-h1319-no" alt="設定頁面">&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3cg3mhLJEIYy3tIRsOxqJr3PiOjmWaEc6ho6npj1Q69AgaCnIbU073VmOqbA2DULN1r9mfN7CI57ZOW_9ZrDKhtEkyU65zBAy9lu7i7gaNUr8e1f2Vo3QodWIKZDBjKHeCMgC1GNwcuh_yJxr-sR7k6=w660-h1319-no" alt="消費記錄，連額頭網址列都消失了，舒服 OuO">&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3fEqBTRnMchjOpS4SqzjifLk05CXdQuQQ-9I0Ve_quNnRtTz07Cv6rdSh2s5R4H5B08zy1eEEJsJoyEVkaep0PZ4upa1D5eyteMM1A1-aXwAlLYymFscg2z73dx4UDiAq4kn3EOkbHVwVNi7SHK5VXZ=w660-h1319-no" alt="轉帳記錄">&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3dMfTlxaQfdxv0wXs3JRymXiUE9ZYfW6e-fUDP2N7ABITWv_f0aULXvR8NrLMLjPRDDH9HqAKd5OvDxGjP7auQG6-lwY60N5a2h1L-m9loZD2VU3-yFNFALtn4Jq0q648kG2oHz3xZB2U5lhew98PKa=w660-h1319-no" alt="報表，就是畫幾張圖用手機開的感覺">&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://leadingmrk.com/google-sheet-form-account-book/">【Google表單記帳術】史上最完整雲端記帳本打造教學！1小時內開始用表單記帳，免費又方便！&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://blog.miniasp.com/post/2014/07/17/Create-Google-Forms-with-Pre-filled-Responses">Google 表單如何設定欄位預設值（可從網址列變更預設值）&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>C++ Get Pretty Type Name</title><link>https://aben20807.github.io/posts/20200710-cpp-get-pretty-type-name/</link><pubDate>Fri, 10 Jul 2020 13:36:58 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200710-cpp-get-pretty-type-name/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>最近狂看 C++ 的東西，明明這麼複雜，可是真香 OuO&lt;/p>
&lt;h1 id="tldr">tl;dr&lt;/h1>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;typeinfo&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cxxabi.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string get_type_name(&lt;span style="color:#66d9ef">const&lt;/span> T variable) {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">typeid&lt;/span>(variable).name();
&lt;span style="color:#66d9ef">int&lt;/span> status &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>;
&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> demangled_name &lt;span style="color:#f92672">=&lt;/span> abi&lt;span style="color:#f92672">::&lt;/span>__cxa_demangle(name, NULL, NULL, &lt;span style="color:#f92672">&amp;amp;&lt;/span>status);
std&lt;span style="color:#f92672">::&lt;/span>string ret{name};
&lt;span style="color:#66d9ef">if&lt;/span> (status &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
ret &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string(demangled_name);
free(demangled_name);
}
&lt;span style="color:#66d9ef">return&lt;/span> ret;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="typeid-operator">typeid operator&lt;/h1>
&lt;p>在 &lt;code>typeinfo&lt;/code> 中有提供 &lt;code>typeid()&lt;/code> 可以取得 type 或是 expression (variable) 的名字 &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;typeinfo&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span> () {
&lt;span style="color:#66d9ef">int&lt;/span> a;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>).name() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">typeid&lt;/span>(a).name() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(fontScale:14,j:1,lang:c%2B%2B,selection:(endColumn:2,endLineNumber:8,positionColumn:1,positionLineNumber:1,selectionStartColumn:2,selectionStartLineNumber:8,startColumn:1,startLineNumber:1),source:'%23include+%3Ciostream%3E%0A%23include+%3Ctypeinfo%3E%0A%0Aint+main+()+%7B%0A++++int+a%3B%0A++++std::cout+%3C%3C+typeid(int).name()+%3C%3C+!'%5Cn!'%3B%0A++++std::cout+%3C%3C+typeid(a).name()+%3C%3C+!'%5Cn!'%3B%0A%7D'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((g:!((h:compiler,i:(compiler:g83,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'0',intel:'0',libraryCode:'1',trim:'1'),fontScale:14,j:1,lang:c%2B%2B,libs:!(),options:'-Ofast',selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'x86-64+gcc+8.3+(Editor+%231,+Compiler+%231)+C%2B%2B',t:'0')),k:50,l:'4',m:78.34710743801652,n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compiler:1,editor:1,fontScale:14,wrap:'1'),l:'5',n:'0',o:'%231+with+x86-64+gcc+8.3',t:'0')),header:(),l:'4',m:21.65289256198347,n:'0',o:'',s:0,t:'0')),k:50,l:'3',n:'0',o:'',t:'0')),l:'2',n:'0',o:'',t:'0')),version:4">[run]&lt;/a>&lt;/p>
&lt;p>不過像是 int 只能顯示 i，其他複雜的顯示也不直觀，主要是因為 C++ 會對於型別做修飾 (Name mangling &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>)，這也是為何 C++ 能夠支援 function overloading，因為編譯過程中型別都會轉成獨一無二的表達方式所以不會造成衝突。&lt;/p>
&lt;h1 id="demangle">Demangle&lt;/h1>
&lt;p>在 &lt;code>&amp;lt;cxxabi.h&amp;gt;&lt;/code> 中有提供方法可以讓經過 mangle 的型別轉回可讀性較高的字串。以下範例與上述提到的方法進行比較。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;typeinfo&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cxxabi.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string get_type_name(&lt;span style="color:#66d9ef">const&lt;/span> T variable) {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">typeid&lt;/span>(variable).name();
&lt;span style="color:#66d9ef">int&lt;/span> status &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>;
&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> demangled_name &lt;span style="color:#f92672">=&lt;/span> abi&lt;span style="color:#f92672">::&lt;/span>__cxa_demangle(name, NULL, NULL, &lt;span style="color:#f92672">&amp;amp;&lt;/span>status);
std&lt;span style="color:#f92672">::&lt;/span>string ret{name};
&lt;span style="color:#66d9ef">if&lt;/span> (status &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
ret &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string(demangled_name);
free(demangled_name);
}
&lt;span style="color:#66d9ef">return&lt;/span> ret;
}
&lt;span style="color:#66d9ef">namespace&lt;/span> OuO&lt;span style="color:#f92672">::&lt;/span>QuQ {
&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> { };
&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> size&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Bar&lt;/span> { };
}
&lt;span style="color:#66d9ef">using&lt;/span> Foo &lt;span style="color:#f92672">=&lt;/span> OuO&lt;span style="color:#f92672">::&lt;/span>QuQ&lt;span style="color:#f92672">::&lt;/span>Foo;
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span> () {
&lt;span style="color:#66d9ef">int&lt;/span> a;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">typeid&lt;/span>(a).name() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> get_type_name(a) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;
Foo b;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">typeid&lt;/span>(b).name() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> get_type_name(b) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;
OuO&lt;span style="color:#f92672">::&lt;/span>QuQ&lt;span style="color:#f92672">::&lt;/span>Bar&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">99&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> c;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">typeid&lt;/span>(c).name() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> get_type_name(c) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAM1QDsCBlZAQwBtMQBGAFlICsupVs1qhkAUgBMAISnTSAZ0ztkBPHUqZa6AMKpWAVwC2tQVvQAZPLUwA5YwCNMxEAGYA7KQAOqBYXW0eoYmgj5%2BanRWNvZGTi4eisqYqgEMBMzEBEHGppyJKhG0aRkEUXaOzm6eCumZ2SF5NSVlMXFVAJSKqAbEyBwA5FKu1siGWADU4q466jXEmMxGU9jiAAwAgkMjY5iT03PWwMtrm5LDtKMGE1M6BACeXpjWNMcbWxc7ezrIAB4/zA48AA6BCvTZvDYETBGLzCKE3e6PWiLXYAFTBaFoNXGNXQIBAB1E42AmAIAH1EZgycijJgIJjsajxgA3DJ4AHsdqTdyyDbjfnjBkEQUIDIAKkFdGxNN2UwAIuNKXh0BBWcR2Q5OUCZRB2lNeesBeNrMKmgQDAo9gqALTcfUnI3IUXECVC8ZYIwiYDsdDUlFW8YAiggMlk37MMker3sCAy0jjWwAVQsFnjSZT8akADYzRa9a4DUbcfjCcBxvMCOIeTKq3L7XyBXgqOMILnLfL5eNVlyq4WjQKKwHiwSCOrRBAo6IfX7afm%2B/3xlR5nTJ97ML6ZXOHQLa9v%2BRWerRy6T65t3HWIesZQovMw%2BuMAPIGB/4gCKBlf3PnONHBlU4wAMVQVAv25OsCxOPdFWhWFmChL4DCxPBgBsdBjXoHE8AAL0wMEi1/f9pAyUDdwgt5zxOC1DkA4CAyfF8QHfV98SA1BT0gjYTXGT1rBbHseSgrjmFPfC8RQbphRuG5FQeJ4VWYdptRRXUvmksBBgAVh0Wh1JEgVhzQAxJOmaSSXJSkZzpBTVOmcZdK0nTBjI8FDQFVjxgcPT%2BQMiSbJ0GTHmVCAHEUnUexM2z7O03TnNE/FDOMnRTNJClZMs4LwqSyLNOipyDSg%2Bi3w/fEiOIG4AE5yuWQUvJ/MSEr8gK5PpULlMytScsc2qfKMxqzNSx50uQdrsvEByYvyht91JQ8u3Y89%2Bk6VgQH6DT%2BlIUx%2BlWdbUBWpKZDkHFul6WUzk4daCBW7b2k6ABrEANNWIQVu4dbNu20hdv6daFBAJ7Lq2xbSDgWAYEQcSYTwdgyAoelUEh6GQGAAAOVxSCoKGoWIX7gqu9bAWRYg7hW87SDQIxaXoB9aFYYnAdIVd2Dxhm8HmFJmUwX76cwH5kiMgYPpNZRmdYPAHGIDI7j0LASYu9UjFlzoaHoJg2A4Hh%2BEEYRRBQOQ5CEMXfsgTpUC8QouetXF5QkA6ZE4dxxmtB9XB%2BpIUg0CBzHqXJSHMFoKhcPIwn8OhvdCXwQ9of3YkqRo3cKYo6n0HJBCUApUlqUprHKGPA8UTOw8aTPo7aThOgUY6%2Bi4JaVrWjbma%2Bn5kaza0s24YlkGQcZkaBVwW1wQgSEmM74z0BHnGH1wy/GfbZBkC68Zu0h7se57%2Ble0gFazHv3CzVZXFcVYNPcZGNM4SReHenaVp%2Bv7SAB67gbBiAkAkrwjPIShya8KHY99/AiB52VowFgTMNYAHcJZeEVmvOuV9PorSGJwcY4DCAIHGE3FubcO5dx7i7e%2Bi9OgIAWFgFwuo14bwVlPIEZxypZizOVbgkgeDI13kfeu9Mvq33%2BoQ5eD0nrLX6Pg%2BBXCCGAyXoIyQb0G43zEddToHNsYBBANwIAA%3D">[run]&lt;/a>&lt;/p>
&lt;p>可以從結果看到後者可讀性較高&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3cFVFsP6QcLV2K8_d7pOf3SfR4bWEjy5oM8KqVHXHST8h7ysiSwCAJd4-oZOfWB_v54ekhXZ5OSM36lAtLS0EhN-YoDXIkuRVkDPU6sH41P5jrtNhPYsvgnIeg55ZGXouiUQe-vblaoFGLo40Y315J0=w1708-h1112-no" alt="封面照片 - 執行結果">&lt;/p>
&lt;p>我發佈後才被 YouTube 推薦&amp;hellip;，不過我最近也看一堆他的影片。
&lt;div style=" position: relative; width: 100%; height: 100%;
padding-bottom: 56.25%; /*16:9*/ ">
&lt;iframe src="https://www.youtube.com/embed/uX99t7GmuDc?start=1" style=" position: absolute; top: 0; left: 0; width: 100%; height: 100%;" class="center"
allowfullscreen frameborder="0" title="YouTube Video">
&lt;/iframe>
&lt;/div>&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/a/19123821">C++ Get name of type in template&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/a/4541470">Unmangling the result of std::type_info::name&lt;/a>&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://en.cppreference.com/w/cpp/language/typeid">typeid operator&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Name_mangling">Name mangling&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>雜記</title><link>https://aben20807.github.io/posts/20200508-miscellaneous0508/</link><pubDate>Fri, 08 May 2020 23:06:11 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200508-miscellaneous0508/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>考完囉，還有好多事@@&lt;/p>
&lt;h1 id="天氣">天氣&lt;/h1>
&lt;p>我是每天都要洗熱水澡的人，今天竟然不用開電熱水器就有熱水，賺。&lt;/p>
&lt;p>天氣雖然熱，但是這幾天傍晚天空都很美 OuO&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/pT6JsJO88Ew5z4vDATq6Ge3ZBKcdA0l2v4-fJ6mmZkkWYk23L2BMcP7TxH7nrq2-Oru5enZXfjSOGsXsvKMjFzGg1PbicmH2gOGuPUchRxdFmIKRu1fGyELFwYpWOcIMuI1ys49aeg=w1266-h949-no" alt="封面照片 - 5/6">&lt;/p>
&lt;h1 id="考後反省">考後反省&lt;/h1>
&lt;p>有一題 NPDA 確定錯，不過其他也不保證對 QuQ&lt;/p>
&lt;p>題目跟答案如下：&lt;/p>
&lt;p>&lt;img src="https://gateoverflow.in/?qa=blob&amp;amp;qa_blobid=15483797651626709437" alt="來源"> &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>我真的沒想到可以 push 任意 1~3 個這種作法，我的回答就說不能同時存 n 跟 3n 的資訊所以不是 Context Free 因此找不到 NPDA，寫這種答案都會很懷疑自己，因為推翻題目的解法之前考古都沒有過。有人可能只 push 3 個，這樣無法保證大於 n，可是這種應該會被部份給分吧。寫過題目的人可能才會意識到寫我這種的可能要給更多部份分 (自己講XDD)，可是我這種想的比較周全啊，結果卻是全錯 QuQ&lt;/p>
&lt;h1 id="鋼琴推薦-ludovico-einaudi---nuvole-bianche">鋼琴推薦 Ludovico Einaudi - Nuvole Bianche&lt;/h1>
&lt;p>我忘記之前有沒有分享過。這是我小時候 (大一 or 大二) 在 C++ 助教的 FB 發現他有分享，真的很耐聽，我可以重複這首邊做事一整天。歌名是義大利文，翻譯是 white clouds，不過若是翻成中文就變成白雲，雖然這個梗可能有年紀了，不過我這輩的應該都還是有聽過這個藝人，之後可能就可以直接用中文說歌名而不會有其他聯想了。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/nGdLDnNyT3t-GAiJLcxPfNVIuoEl_EelGs9VBAgRQ6s0K37bK5cYnNc3UA5uY6fv98fC5VbQ96jzo5jtNJJDG-WenPQc-EaJdegb9xDOxDG2A8QvX-stQDuPKj5oGm6e-MQGrYc9jBU=w1292-h229-no" alt="Ludovico Einaudi - Nuvole Bianche">&lt;/p>
&lt;div style=" position: relative; width: 100%; height: 100%;
padding-bottom: 56.25%; /*16:9*/ ">
&lt;iframe src="https://www.youtube.com/embed/xyY4IZ3JDFE?start=1" style=" position: absolute; top: 0; left: 0; width: 100%; height: 100%;" class="center"
allowfullscreen frameborder="0" title="YouTube Video">
&lt;/iframe>
&lt;/div>
&lt;h1 id="圖床">圖床&lt;/h1>
&lt;p>昨天突然發現，我可以把圖片用學校 google 帳號備份啊，這樣我可以直接傳原圖而且無限空間，之後的圖床也會改用 google photo 了，解釋起來麻煩，總之各種面向來說都比較方便 OuO&lt;/p>
&lt;p>話說好像太多影片檔所以到現在還沒備份完，我都用長鏡頭拍老鼠，考驗演技 (x&lt;/p>
&lt;h1 id="雜">雜&lt;/h1>
&lt;p>最近晚上實驗試都剩下我一個，突然覺得有點孤單XDD&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://gateoverflow.in/174614/identify-the-language?show=174677#c174677">https://gateoverflow.in/174614/identify-the-language?show=174677#c174677&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>雜記</title><link>https://aben20807.github.io/posts/20200505-miscellaneous0505/</link><pubDate>Tue, 05 May 2020 21:33:50 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200505-miscellaneous0505/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>要考試了好不想寫考古 (x&lt;/p>
&lt;h1 id="天氣">天氣&lt;/h1>
&lt;p>五月突然變得超熱，這樣六、七、八月要怎麼過？QuQ&lt;/p>
&lt;h1 id="人生好難xd">人生好難XD&lt;/h1>
&lt;p>人真的是頗複雜的動物，思想難以輕易被解讀，內心會自己額外腦補一段，但是又怕是自己過度解讀造成的誤解。&lt;/p>
&lt;p>會變成木頭不是沒有道理，因為感覺大家好像都想說什麼卻又沒說出來，我不太想製造不必要的麻煩，所以盡量不要去過度解讀，就算有也只放在心裡當做腦補區塊就是。但是好像又需要把握什麼。老實講這是我在住宿公寓看到一個長的算漂亮的女生卻把整包回收丟到一般垃圾之後突然產生的感想，若是不把握之後遇到都是這種的怎麼辦? 有這個聯想是有些奇怪XDD&lt;/p>
&lt;p>高中班導曾經在上課提到挑情人的數學問題 &lt;a href="https://en.m.wikipedia.org/wiki/Secretary_problem">Secretary problem&lt;/a>，就像是當你放棄了目前的，那有一定機率再也遇不到更好的。&lt;/p>
&lt;p>真是煩&lt;/p>
&lt;blockquote>
&lt;p>人生好難XD&lt;/p>
&lt;/blockquote>
&lt;p>終於漸漸知道前室友為什麼每天掛在嘴邊了，原來是每天都在取捨的部份 OuO&lt;/p>
&lt;p>&lt;img src="https://images.unsplash.com/photo-1588671571787-aad772fd7e1e?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1934&amp;amp;q=80" alt="封面照片 - 5/3 全家爬員林藤山步道隨手拍">&lt;/p>
&lt;p>這代表我現在是有這個煩惱？果然是因為事情都擠在一起不想做，喜歡胡思亂想的部份啊。&lt;/p>
&lt;h1 id="資格考的意義">資格考的意義？&lt;/h1>
&lt;p>或許有這個疑慮代表我還是屁孩。&lt;/p>
&lt;p>到底為什麼博士班需要考資格考，而且是筆試基礎科目。若是為了在就讀期間確認有一定能力或許是最好的解答，但我不太能認可，沒有能力還能讀嗎？這些考科都算是系上的必修科目，而且老實說，課堂的考試可能都還比資格考難。&lt;/p>
&lt;p>必修的考試會出的繁瑣 (至少 compiler 是這樣)，主要是讓學生能夠靜下心在考試當下思考所學，雖然多但是會發現慢慢寫還是寫得完，除非是沒讀書。&lt;/p>
&lt;p>但是資格考好像不是這樣，而是流於寫考古題來通過考試的形式，這讓我非常好奇資格考的意義。不過也沒管道可以反應，也只能繼續考下去。&lt;/p>
&lt;p>我算是蠻會考試的，但都讀到這裡了還要考，對我來說只是複習一下，但不是說臺灣教育就是敗在考試制度嗎？真的都沒有人懷疑？好吧，我還只是個屁孩 OuO&lt;/p>
&lt;p>希望這次考試順利通過 (被揍&lt;/p>
&lt;h1 id="手機成癮">手機成癮&lt;/h1>
&lt;p>有點嚴重，前幾天睡前都在重新整理 YouTube 看有什麼沒看過的影片。覺得這樣不行，所以最近晚上會更早把手機開飛航，早上時也會起床一段時間再關飛航，聯絡不到先不要緊張，我還活著的機率頗大 OuO&lt;/p>
&lt;h1 id="舊部落格">舊部落格&lt;/h1>
&lt;p>話說我的&lt;a href="https://aben20807.blogspot.com/">舊部落格&lt;/a>竟然已經破20萬瀏覽，每天還是會有超過100人造訪，可能是因為我持續透過 IFTTT 更新，所以 SEO 還沒放棄我的網站，相較之下，這個網站觀看人數慘不忍睹XD&lt;/p>
&lt;p>前幾天，去維護了一下那個網站，至少有把 LikeCoin 的按鈕修好，該貢獻一下了吧 (x&lt;/p></description></item><item><title>Shutil</title><link>https://aben20807.github.io/posts/20200420-shutil/</link><pubDate>Mon, 20 Apr 2020 16:20:49 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200420-shutil/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>在 &lt;a href="https://github.com/aben20807/local-judge">local-judge&lt;/a> 中遇到一個關於檔案權限 (Filemode) 的問題，因為檔案權限不同導致 git 比對的結果會顯示兩個輸入不同：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">old mode &lt;span style="color:#ae81ff">100644&lt;/span>
new mode &lt;span style="color:#ae81ff">100755&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>原本我是用 subprocess 在比對之前執行 &lt;code>chmod&lt;/code>，效果跟我想的是一樣的。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">chmod &lt;span style="color:#f92672">--&lt;/span>reference&lt;span style="color:#f92672">=&lt;/span>answer_filepath output_filepath
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是在解決另外一個複製的問題時，意外找到 &lt;a href="https://docs.python.org/3/library/shutil.html#module-shutil">shutil&lt;/a>，這個工具提供一些檔案複製的函式，其中就有複製檔案權限的，而且竟然是 build-in module，因此我後來改用這個了。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">copymode(answer_filepath, output_filepath)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>感覺雖然自己已經算是很會找現有的工具了，但是還是很多東西沒看過呢 OuO&lt;/p></description></item><item><title>雜記</title><link>https://aben20807.github.io/posts/20200413-miscellaneous/</link><pubDate>Mon, 13 Apr 2020 21:06:45 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200413-miscellaneous/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>明明事情很多，卻無所事事游手好閒。&lt;/p>
&lt;h1 id="天氣">天氣&lt;/h1>
&lt;p>最近天氣很常太陽很大，但卻感覺不到熱，只有陽光刺眼，可能是因為在同時冷風狂吹。這種天氣老實說很像之前去的美西那樣，但我又深怕是因為時過多年，大腦已經擅自將記憶修改成這樣的天氣會讓我想到那裡。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/zG-bOAF04jTSbeO54kPpSXKcX5gxErxulpnFLLVKT9JLKBGiyOom_EVtKqKmaqElN83YhAdb3AZsmpSY-L2qj-MnSwqDFflzl7iYbho5Gm-PsXgma31Lrt2JNv50TgAmxOCu8Y9peoI=w2400" alt="封面圖片 4/13 9:07 AM">&lt;/p>
&lt;p>近期看到 FB 上許多認識的人去國外讀研究所，說認識其實是不算熟的人，僅僅是我們互相知道有對方這樣。感覺當初我沒有考慮是因為我太膽小了，害怕失敗，現在讀博之後這些問題又再一次出現，或許連留在成大也是上述那些問題，想自己未來要幹麻真難。&lt;/p>
&lt;p>也許因為教別人是我逃不開的舒適圈，習慣不了被人拯救的自己，相對的也限制我成長的速度。不過世界上的強者太多，就拿 Google Code Jam 2020 Round 1A 來說，在兩個半小時中我好不容易才擠出兩題的最小測資的暴力解，結束後以為我再也不會碰這個了 (x)，結果因為近期無力做事，所以去找了一下別人的講解，我只有聽邏輯的部份沒有看他的程式碼，他邏輯解釋蠻清晰的，所以我就照著這個邏輯寫，結果兩題就都拿到全對了。附上&lt;a href="https://www.youtube.com/watch?v=OlpC2d1Odrs">講解影片連結&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/Ft2HHye-9TCm-aHoORISDTXKbT8zaO1enDNm2jwl201gfX62yQafxhT1239-uQ7u_n7bpNujZ6u7LFJtrTLd-5hx0CF1Rw_XS4BfKhLqjHivSVMWJB7MjmNdWEjEZqDfLfhT1yr3Kec=w2400" alt="實力差距">&lt;/p>
&lt;p>讓我想起這幾天實驗室學長再跟新生面試時提到&lt;/p>
&lt;blockquote>
&lt;p>重要的是想法，用什麼工具來實現都是其次&lt;/p>
&lt;/blockquote>
&lt;h1 id="手遊-非業配">手遊 (非業配)&lt;/h1>
&lt;p>老實說，可能是因為最近沈迷新手遊，不過這款真的是我目前玩到我覺得最可以的手機遊戲，跟現在大部分都已經免洗化一兩年就砍掉的那種不一樣。它就是「明日方舟 Arknights」，老實說去年吧就看到另外一個學長在玩，那時候覺得塔防遊戲就都那樣，結果現在玩起來真的有驚豔到，界面流暢度一流 (可能是因為我之前都玩雷亞的每個都卡到爆炸)，玩法真的充滿變化，完全突破我的想像。&lt;/p>
&lt;p>最令我印象深刻的是它的自動打怪模式可以中途接手，所以如果玩到一半發現有更快的解法可以臨時接手改變陣行。&lt;/p>
&lt;p>可惜的是沒有掛機。但是，這遊戲讓我重新思考掛機的必要性，老實說掛機已經不算是遊玩的一部分，或許這是因為現在大家時間越來越零碎的產物，但是它犧牲了遊戲的體驗，玩家變成玩的是掛機模擬後的結果，中間的過程變得不再重要。是這遊戲讓我意識到過程的重要性。(雖然我是因為刪了不能掛機的 Evil Hunter Tycoon 才找到這款&amp;hellip;)&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/8Hr9P9sQx12ty-3wFnjoatYcOlEngUYxyikB0FZOEaCinXu1okPH-8PiGvob4PP5_PouZ-elcnFTTuUUjpp8rKiDVZt11ZPsxMLugX5SuD68t2-uKchZpfRvdXAhTrmGl7qavQsiPBk=w2400" alt="兩隻能天使 OuO">&lt;/p>
&lt;h1 id="結語">結語&lt;/h1>
&lt;p>總之這幾天算是都在回課程的 email，然後主要進度都沒啥進展，paper 頗難寫，太多次都是手邊在忙時有想法，可是動筆時又卡住，可能跟兩個東西有關，第一，英文太爛，第二，太久沒寫東西，基於這些理由想到乾脆之後不定期發一下雜記 (雖然原本就是不定期 OuO)&lt;/p></description></item><item><title>20200202</title><link>https://aben20807.github.io/posts/20200202-20200202/</link><pubDate>Sun, 02 Feb 2020 11:14:20 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20200202-20200202/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=12Y9AlAEvGKF87LKqiDW_5waH4inUmwQN -->
&lt;p>Palindrome!&lt;/p>
&lt;p>想當年，高中程式設計上機考最後一題就是迴文，當時能帶大抄，剛好有迴文所以就直接貼上了，
記得打了一堆自己不太懂的程式碼。當時我左邊的同學霸氣不帶大抄，雖然他最後一題沒寫出來，不過卻令我相當佩服呢。&lt;/p>
&lt;p>啊，完蛋，是字串反轉還是迴文判斷啊@@，算了，小時候的事了(x&lt;/p>
&lt;p>因應時節(?)，所以寫了一個簡單的迴文檢測程式。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>argv[]) {
&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>s &lt;span style="color:#f92672">=&lt;/span> strdup(argv[&lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;span style="color:#66d9ef">int&lt;/span> len &lt;span style="color:#f92672">=&lt;/span> strlen(s);
&lt;span style="color:#66d9ef">int&lt;/span> mid &lt;span style="color:#f92672">=&lt;/span> len &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> mid; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (s[i] &lt;span style="color:#f92672">!=&lt;/span> s[len &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&lt;/span> i]) {
printf(&lt;span style="color:#e6db74">&amp;#34;Not Palindrome QuQ&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">goto&lt;/span> exit;
}
}
printf(&lt;span style="color:#e6db74">&amp;#34;Palindrome! OuO&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
exit:
free(s);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ gcc -o palindrome palindrome.c
$ ./palindrome &lt;span style="color:#ae81ff">20200202&lt;/span>
Palindrome! OuO
$ ./palindrome &lt;span style="color:#ae81ff">20200203&lt;/span>
Not Palindrome QuQ
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下次迴文，要等到 20211202。再下一次，20300302。&lt;/p></description></item><item><title>Hugo v0.60</title><link>https://aben20807.github.io/posts/20191201-hugo-0-60/</link><pubDate>Sun, 01 Dec 2019 17:26:34 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20191201-hugo-0-60/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>記錄一下 hugo 的改變 QuQ&lt;/p>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>因為實在改的有點多東西，直接在 FB 發(抱)文(怨)又有點沒架構，所以乾脆來個小整理。另外這也不是全部，主要是我有遇到的 QuQ&lt;/p>
&lt;p>這裡主要是從 0.59 到 0.60 &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> 的一些記錄。&lt;/p>
&lt;h1 id="不同之處">不同之處&lt;/h1>
&lt;h2 id="parser">Parser&lt;/h2>
&lt;p>最大不同就是 markdown parser 從原本的 &lt;a href="https://github.com/russross/blackfriday">Blackfriday&lt;/a> 換成使用 &lt;a href="https://github.com/yuin/goldmark/">Goldmark&lt;/a> 為預設了。所以有一堆是用 regex 改的內容全都要再改規則＠＠，例如 &lt;code>&amp;lt;img xxx /&amp;gt;&lt;/code> 這類的 self-closing tags &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> 把最後的 &lt;code>/&lt;/code> 去掉了變成 &lt;code>&amp;lt;img xxx&amp;gt;&lt;/code>，所以剛剛是看不到圖片的。我已經改成讓 &lt;code>/&lt;/code> 可有可無了&amp;hellip;&lt;/p>
&lt;h2 id="footnote">Footnote&lt;/h2>
&lt;p>Footnote 的部份被大改了，產生的 html 跟原本的不太一樣，然後 0.60.1 好像有一些修改 &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> ，所以可能還要再等等 QuQ，目前 snap 最新還在 0.60.0 所以還不能返回 (&lt;code>footnoteAnchorPrefix&lt;/code>, &lt;code>footnoteReturnLinkContents&lt;/code> 也還沒看到實作&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>)。之後還要加入 smooth scroll 讓捲動有動畫而不是直接跳 (這邊我也是用 regex)。&lt;/p>
&lt;h2 id="預設不可以在-markdown-中使用-html">預設不可以在 markdown 中使用 html&lt;/h2>
&lt;p>如果有加一些非 markdown 語法的 html 的話預設會變成 &lt;code>&amp;lt;!-- raw HTML omitted --&amp;gt;&lt;/code>
(例如從 google 雲端嵌入 pdf 檔案之類的)，如果想要修改這個預設 &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> 的話可以在 config.tmol 裡面加入&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[&lt;span style="color:#a6e22e">markup&lt;/span>]
[&lt;span style="color:#a6e22e">markup&lt;/span>.&lt;span style="color:#a6e22e">goldmark&lt;/span>]
[&lt;span style="color:#a6e22e">markup&lt;/span>.&lt;span style="color:#a6e22e">goldmark&lt;/span>.&lt;span style="color:#a6e22e">renderer&lt;/span>]
&lt;span style="color:#a6e22e">unsafe&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="後記">後記&lt;/h1>
&lt;p>J 個改變的速度其實有點小惱人，每次都想棄用 snap，但換個想法，這是走在世界的尖端啊 (x&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/gohugoio/hugo/releases/tag/v0.60.0">hugo v0.60.0 release&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://discuss.codecademy.com/t/no-ending-for-self-closing-link-element/201099">No ending &amp;lsquo;/&amp;rsquo; for self-closing link element?&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/gohugoio/hugo/issues/6551">Support footnote return links #6551&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/yuin/goldmark/blob/54fc7c3/extension/footnote.go#L236-L247">yuin/goldmark:236-247&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>&lt;a href="https://gohugo.io/getting-started/configuration-markup/">Configure Markup&lt;/a> &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Programming Sense (2)</title><link>https://aben20807.github.io/posts/20191118-programming-sense-2/</link><pubDate>Mon, 18 Nov 2019 11:36:33 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20191118-programming-sense-2/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>結果因為太多項了導致右邊的目錄超出邊界，所以還是要拆成兩篇。QuQ&lt;/p>
&lt;p>&lt;a href="https://aben20807.github.io/posts/20191116-programming-sense/">{{ 上一篇傳送門：Programming Sense (1) }}&lt;/a>&lt;/p>
&lt;h1 id="抽像化-abstractionhttpsenwikipediaorgwikiabstraction_computer_science">抽像化 (&lt;a href="https://en.wikipedia.org/wiki/Abstraction_(computer_science)">Abstraction&lt;/a>)&lt;/h1>
&lt;p>盡量的抽象化自己的程式，最簡單的方式就是把相關的程式碼包成一塊，而不是散在主函式中，包起來的動作通常稱作封裝 (&lt;a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)">Encapsulation&lt;/a>)，也有實作成 ADT (&lt;a href="https://en.wikipedia.org/wiki/Abstract_data_type">Abstract data type&lt;/a>) 一說。&lt;/p>
&lt;p>主要目的就是讓程式碼可重複使用，並讓簡化主函式的流程。抽象化過程要想著如何讓別人 (包括未來的自己) 使用自己的程式碼。可以透過將函式切成一個函式只做一件事讓可重複利用率提高。&lt;/p>
&lt;p>例如實作一個 Queue 時，可以將存放的結構 (陣列)、操作指標 (front, rear) 放在同一個 &lt;code>struct&lt;/code> 中，甚至將 enqueue 和 dequeue 做成函式指標 (function pointer) 一起放入 &lt;code>struct&lt;/code> 中。注意，以下程式碼尚未測試過&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">// 結構定義
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> Queue {
&lt;span style="color:#66d9ef">char&lt;/span> que[&lt;span style="color:#ae81ff">26&lt;/span>];
&lt;span style="color:#66d9ef">int&lt;/span> front;
&lt;span style="color:#66d9ef">int&lt;/span> rear;
&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>enque)(&lt;span style="color:#66d9ef">struct&lt;/span> Queue &lt;span style="color:#f92672">*&lt;/span>, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> a);
&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>deque)(&lt;span style="color:#66d9ef">struct&lt;/span> Queue &lt;span style="color:#f92672">*&lt;/span>);
};
&lt;span style="color:#75715e">// 初始化
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> Queue &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">init_queue&lt;/span>() {
&lt;span style="color:#66d9ef">struct&lt;/span> Queue &lt;span style="color:#f92672">*&lt;/span>ret &lt;span style="color:#f92672">=&lt;/span> calloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> Queue), &lt;span style="color:#ae81ff">1&lt;/span>);
ret&lt;span style="color:#f92672">-&amp;gt;&lt;/span>front &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
ret&lt;span style="color:#f92672">-&amp;gt;&lt;/span>rear &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
ret&lt;span style="color:#f92672">-&amp;gt;&lt;/span>enque &lt;span style="color:#f92672">=&lt;/span> enque; &lt;span style="color:#75715e">// 須另外定義 enque 函式
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ret&lt;span style="color:#f92672">-&amp;gt;&lt;/span>deque &lt;span style="color:#f92672">=&lt;/span> deque; &lt;span style="color:#75715e">// 須另外定義 deque 函式
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> ret;
}
&lt;span style="color:#75715e">// 使用
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">struct&lt;/span> Queue &lt;span style="color:#f92672">*&lt;/span>q &lt;span style="color:#f92672">=&lt;/span> init_queue();
q&lt;span style="color:#f92672">-&amp;gt;&lt;/span>enque(q, &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>);
q&lt;span style="color:#f92672">-&amp;gt;&lt;/span>deque(q);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="寫程式的過程">寫程式的過程&lt;/h1>
&lt;h2 id="思考">思考&lt;/h2>
&lt;p>不先思考就直接寫程式的話是很危險的，通常最後很容易落得需要打掉重練的情況，預先思考可以避免掉一些盲點。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1uYiTbRQ-bmFDkJE-MC_z-HyemZzzz6kA" alt="google- ">&lt;/p>
&lt;h3 id="待解決的問題">待解決的問題&lt;/h3>
&lt;p>首先得理解題目或問題的要求，如果有提供範例輸入輸出的話請一定要按照給定的格式，不能多也不能少。不過這在現實中比較少見，很多情況是要去設計防呆的。&lt;/p>
&lt;p>直覺的解法一定有，但是通常會有大量的迴圈拖慢程式執行，儘管現在的硬體好到讓我們感覺不出差異，但是還是需要正視這個問題，因為當需求一擴大，效能瓶頸就會是一個大問題。&lt;/p>
&lt;p>以下題目來自 108-1 成大資工 資料結構作業三 (這裡放上題目，不過我不打算解它，雖然這樣會比較完整，可是我真的沒空 QuQ)&lt;/p>
&lt;iframe src="https://drive.google.com/file/d/1N7S4ynPmXpMYVZVgJdL0_h0K_IYXCwUl/preview" width="100%" height="340px">&lt;/iframe>
&lt;h3 id="是否能簡化">是否能簡化&lt;/h3>
&lt;p>以範例問題來說，題目會給定 N 個團體，每個群體的人數不定。最直觀的方法是使用二維陣列存放這 N 個團體各自的成員，要檢查 A 是否屬於某個群體時使用雙層迴圈去搜尋這個二維陣列，都找不到則代表不屬於任何團體。&lt;/p>
&lt;p>然而這樣每次搜尋都要耗費不少資源，甚至需要不少程式碼。更好的作法可以對題目的細節做解讀，題目提到成員只會有 A~Z 所以我們可以直接產生一個長度為 26 的整數陣列 &lt;code>people_group_ids&lt;/code> (更好的方式是使用 dict 不過 C 沒有內建) 來存放這 26 的人的團體編號，為了方便初始化，可以讓 0 代表沒有團體接著往上累加，讀取到範例輸入讀取到 3 A B C 時，在陣列的 0 1 2 位置上填入 1，等到要查詢 A 的團體編號時就可以使用 &lt;code>people_group_ids[0]&lt;/code> 來查詢了，原本 $O(nm)$ 的複雜度直接降為 $O(1)$，程式碼上也較為清楚。另外關於 A 對應 0 要怎麼寫，這就需要對字元有一些了解，可以觀察一下 &lt;a href="https://en.wikipedia.org/wiki/ASCII">ASCII 表格&lt;/a>，&lt;code>person = 'B';&lt;/code> 的話我們只需要使用 &lt;code>person - 'A'&lt;/code>; 就可以得到 &lt;code>1&lt;/code> 了，把這個操作放到函式中增加可讀性的話更棒如下。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_group_id&lt;/span>(
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> people_group_ids,
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> person) {
&lt;span style="color:#66d9ef">return&lt;/span> people_group_ids[person &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>];
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">set_group_id&lt;/span>(
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> people_group_ids,
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> person,
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> group_id) {
people_group_ids[person &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> group_id;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>插隊的話只需要從 queue 的頭找 &lt;code>group_id&lt;/code> 相同的人即可。&lt;/p>
&lt;h3 id="事前設計">事前設計&lt;/h3>
&lt;p>這裡表達的不是一定要畫出 UML 或是先做好完整架構圖，而是有一點架構就可以，有簡易的流程圖當然更棒，但是我自己通常會在腦中進行，遇到比較大型的才會拿一張紙畫一下流程，這裡推薦 &lt;a href="https://www.draw.io/">draw.io&lt;/a> 這個完美的應用程式，可以應付各種圖。&lt;/p>
&lt;h2 id="小步前進持續驗證">小步前進，持續驗證&lt;/h2>
&lt;blockquote>
&lt;p>寫大程式要像西敏寺那樣的大教堂一樣，先從一個功能完整的小教堂開始，然後把小部分拆掉蓋個更大更豪華的；如果一次就想蓋個超大的教堂，最後可能弄成一團廢墟，連禮拜的功能都沒有。&lt;br>
&amp;mdash; Yoda 生活筆記 (Lee You Tang) &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>等萬事俱備只欠打扣時我們就可以開始寫程式囉，最有效率的流程就是小步前進逐步驗證，不要一次就把程式打完，這樣執行發現跟結果不一樣時，問題就會非常難找，是輸入錯誤還是中間的邏輯錯誤或是輸出錯誤，若沒有逐步驗證的話，哪個階段出問題真的很難定位。&lt;/p>
&lt;p>我的做法會先將輸入部分完成，並且印出結果確認是否跟想像中的結果一模一樣，這裡必須要注意是否有奇怪的換行，或是輸出的順序不對等等問題，因為 C 的輸入會有許多隱藏的陷阱，也許是把空格也當成一個成員之類的。操作的指令也是把讀到的直接印出來確認。驗證完畢才繼續往下一步走。 細心檢查每一個魔鬼細節才能達到最終目的。&lt;/p>
&lt;p>強烈建議每一次的驗證完後搭配 git commit 把階段性成果記錄下來。&lt;/p>
&lt;p>enque 跟 deque 一樣分開驗證，這時候我們需要加上一些輔助的程式碼幫助我們印出 queue 的內容，來保證每次的操作都是正確的。例如：&lt;code>print_queue()&lt;/code>。&lt;/p>
&lt;h1 id="除錯-debug">除錯 (Debug)&lt;/h1>
&lt;h2 id="編譯訊息">編譯訊息&lt;/h2>
&lt;p>編譯器產生的訊息相當重要，而且不是只有 Error 重要，Warning 也是一大關鍵，所以千萬不要忽略這些警告，反而要將這些警告視為錯誤，這裡推薦在編譯的時候加上 &lt;code>-Wall -Werror&lt;/code> 這樣那些警告就會導致編譯錯誤了。&lt;/p>
&lt;h2 id="設計測資">設計測資&lt;/h2>
&lt;p>題目給的測資一定很少，但是實際會遇到的情況相當多，所以一定要多設計幾組測試資料，可以利用上一篇提到的重新導向 (Redirection) 的方式才不用每次都要重新手打，照理說可以再加上 Makefile 來幫忙，可以參考我的另外一篇 &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。&lt;/p>
&lt;h2 id="註解大法">註解大法&lt;/h2>
&lt;p>用註解部份程式碼來找出錯誤是最簡單的方式，但這我通常是用來幫別人抓錯的時候會用，因為我不確定其是否使用逐步驗證的方式，因此只有結果錯誤，但是中間的過程無法直接看出是哪邊有問題，利用註解的方式隔離未驗證的程式碼來逐步比對。&lt;/p>
&lt;h2 id="printf-好夥伴">&lt;code>printf&lt;/code> 好夥伴&lt;/h2>
&lt;p>&lt;code>printf()&lt;/code> 是一個相當神奇且好用的函式，其底層非常複雜歡迎有興趣的人可以參考 &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>。我的習慣是在實作不同資料結構時都會做一個對應的函式來印出其內容以方便驗證。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">print_queue&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> Queue &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> q) {
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">26&lt;/span>; i&lt;span style="color:#f92672">++&lt;/span>) {
printf(&lt;span style="color:#e6db74">&amp;#34;%c &amp;#34;&lt;/span>, q&lt;span style="color:#f92672">-&amp;gt;&lt;/span>que[i]);
}
printf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gdb">GDB&lt;/h2>
&lt;p>GDB (&lt;a href="https://www.gnu.org/software/gdb/">The GNU Project Debugger&lt;/a>) 是 segmentation fault 發生時的好夥伴，它可以幫助你找出程式是在哪裡發生錯誤，這樣就可以去找出對應的解決方法。關於原生的 GDB 有點樸素這點我之前有寫過一篇介紹 &lt;a href="https://github.com/cyrus-and/gdb-dashboard">GDB dashboard&lt;/a> 可以參考 &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>。&lt;/p>
&lt;h1 id="後記">後記&lt;/h1>
&lt;p>突然發現自己好像也不是這麼悠閒，不過還是把這些趕出來了，可能會有錯 (範例打錯或錯字) 再請大家幫忙抓漏 了，感恩 QuQ。很多部份也都沒有附上範例，這可能之後有需要的話可以補上。歡迎討論也歡迎在我有空的時候找我幫忙 review 程式碼，這對我來說也是一種成長的來源吧。身邊如果有人願意幫你 review 的話請盡量把握，也在此感謝曾經幫我看過程式碼的貴人們。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://yodalee.blogspot.com/2019/11/rust-visitor.html">把一顆樹寫出來是會有多難&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://aben20807.github.io/posts/20190216-makefile-for-testing/">Makefile for Testing&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://www.maizure.org/projects/printf/index.html?fbclid=IwAR2fPTM7CxfIWD7pC_crmp-UFDPG2RZ7BH-62e-TCjPmxhzwLyT_D7oEYak">Tearing apart printf()&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://aben20807.blogspot.com/2018/06/1070618-gdb-gdb-dashboard.html">107.06.18 好看的 gdb, gdb-dashboard&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Programming Sense (1)</title><link>https://aben20807.github.io/posts/20191116-programming-sense/</link><pubDate>Sat, 16 Nov 2019 08:53:13 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20191116-programming-sense/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>主要是我自己編寫邊學慢慢累積的，說真的也找不太到相關的資源，要搜尋也不知道下什麼關鍵字，問別人其實也很難在一時半刻裡解釋清楚，所以就拿來發一篇吧 OuO&lt;/p>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>期中加資格考的爆炸禮拜終於結束，其實比我想得還要容易，雖然我都很沒把握，因為我幾乎不狂寫考古題，而是以觀念取勝，有沒有取到就不確定了。&lt;/p>
&lt;p>寫程式很簡單，拿來解決問題就有些難度，最難的是用優雅易懂且嚴謹的程式碼來解決問題，寫得好絕對遠遠好過寫得快。&lt;/p>
&lt;p>關於這個主題，其實很早就打算寫了，只是一直擱置連架構都沒出來，直到最近有幫同學看一下程式碼，所以覺得這個觀念還是頗為重要，所以整理一下發個文，主要也希望可以幫助比較沒經驗的人，但也不限於此，我相信也會有畢業於資訊工程相關科系而沒有這些觀念。&lt;/p>
&lt;p>當然在整個程式界我也不是老手，幾乎沒在開源貢獻，更沒參與過業界，所以很多的概念是我在大學時期慢慢累積起來的，主要來源就是一些開源的專案還有自身的經驗，不能說涵蓋得很全面，也不是說我這套最棒了大家看了之後一定要照這些規則，這篇從來就不是規則，而是我在寫了幾年程式後整理出來讓自己開發更為流暢的一些想法，希望大家能夠來互相討論給與意見。&lt;/p>
&lt;p>架構會以不同的主題當作探討，雖然全部都是在講 programming sense，內容因為相當廣泛，切成不同文章又會讓某些部分零碎化，所以請善用標題跟右方的目錄來幫助閱讀。順序以 &amp;ldquo;工具&amp;rdquo;，&amp;ldquo;coding style&amp;rdquo;，&amp;ldquo;習慣養成&amp;rdquo;，&amp;ldquo;抽像化&amp;rdquo;，&amp;ldquo;寫程式的過程&amp;rdquo;，&amp;ldquo;除錯&amp;rdquo;。並主要以 C 語言當作講解範例。&lt;/p>
&lt;p>雖然雜但是請記得一個中心思想：&lt;/p>
&lt;blockquote>
&lt;p>用程式碼來溝通 (Communication Through Code)&lt;/p>
&lt;/blockquote>
&lt;h1 id="工具">工具&lt;/h1>
&lt;p>「工欲善其事，必先利其器」《論語·衛靈公》 善用工具真的頗為重要，使用得當可以大量減少重複性的動作，如果是寫一般的小程式的話我會建議可以玩看看 &lt;a href="https://en.wikipedia.org/wiki/Vim_(text_editor)">VIM&lt;/a> 設定可以參考&lt;a href="https://github.com/aben20807/aben20807.vim">我的設定&lt;/a>或直接問我，可以大量減少手部的負擔。大型一點的我會推薦 &lt;a href="https://code.visualstudio.com/">VSCode&lt;/a>，因為內容會偏多所以我就用一個副標題來說明了。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1kYWGLrrnkeQaVo2OwbMZQddDu6iIn-do" alt="google-vi&amp;hellip; "> &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="vscode">VSCode&lt;/h2>
&lt;p>VSCode 其實不太像一般的 IDE，它更像一個單純的文字編輯器，只是有相當多好用的外掛功能，基本的包含了對各種語言的程式碼的關鍵字 highlight、檔案架構樹、搜尋取代功能、編碼轉換、coding style 自動重新排版。以下附上一些我目前服役中的外掛功能，使用方法就請各位自己前往查看了：&lt;/p>
&lt;ul>
&lt;li>&lt;code>alefragnani.bookmarks&lt;/code> &lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks">🔗&lt;/a>： 可以在想要標記的程式碼上加入書籤，這個在瀏覽大型專案需要跳來跳去 trace 程式碼下可以幫很大的忙，至少不用再記是第幾行了。&lt;/li>
&lt;li>&lt;code>coenraads.bracket-pair-colorizer&lt;/code> &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">🔗&lt;/a>：連結對應的括號，這在括號一堆的語言 (C, C++, Java, Lisp) 相當有幫助，可以一眼就看出在哪個有效範圍 (scope)。&lt;/li>
&lt;li>&lt;code>streetsidesoftware.code-spell-checker&lt;/code> &lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker">🔗&lt;/a>：幫忙檢查英文拼字。&lt;/li>
&lt;li>&lt;code>tabnine.tabnine-vscode&lt;/code> &lt;a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode">🔗&lt;/a>：程式碼補全建議。&lt;/li>
&lt;li>&lt;code>gruntfuggly.todo-tree&lt;/code> &lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree">🔗&lt;/a>：收集註解中有 &lt;code>TODO&lt;/code> 標籤的地方。&lt;/li>
&lt;li>&lt;code>donjayamanne.githistory&lt;/code> &lt;a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory">🔗&lt;/a>：Git 系列。&lt;/li>
&lt;li>&lt;code>eamodio.gitlens&lt;/code> &lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">🔗&lt;/a>：Git 系列。&lt;/li>
&lt;li>&lt;code>zhuangtongfa.material-theme&lt;/code> &lt;a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">🔗&lt;/a>：耐看主題。&lt;/li>
&lt;li>&lt;code>vscode-icons-team.vscode-icons&lt;/code> &lt;a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">🔗&lt;/a>：美美的檔案圖示。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://drive.google.com/open?id=1YrpZ2ktFpMxR3Y7MZM0zBrt4DtRFNmga" alt="google-名稱拿去搜尋即可">&lt;/p>
&lt;h2 id="shell">Shell&lt;/h2>
&lt;p>很多指令都是可以幫助懶惰的人，目前我還沒有遇過我想要但是沒有的指令。&lt;/p>
&lt;h3 id="重新導向-redirection">重新導向 (Redirection)&lt;/h3>
&lt;p>寫程式時會常使用重新導向 (Redirection) 的方式來減少標準輸入 (stdin) 的次數，用法也相當直觀，只需要先將測試輸入先打在一份文檔 (例如：input.txt) 中，再使用以下指令執行程式即可。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ./queue &amp;lt; input.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>若要把標準輸出 (stdout) 存到另一份文件時呢，當然也是使用重新導向。這適合在輸出很多時或是需要搜尋結果時使用。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ./queue &amp;lt; input.txt &amp;gt; output.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="coding-style">Coding Style&lt;/h1>
&lt;p>這是一個看似微小卻非常重要的細節，尤其是需要別人幫忙 review 甚至是合作時都需要事先講好共用的 coding style，一來格式統一閱讀時不需要轉換，二來可以避免因為工具自動調整造成不必要的程式改動紀錄。&lt;/p>
&lt;p>看別人的程式碼時最怕遇到沒有縮排的&amp;hellip;&lt;/p>
&lt;p>這裡涵蓋的範圍包括了縮排、空格、括號、命名。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1srj3r8VaQ4_csG69Lr3vQD_ENvjEXmJH" alt="google-pythonize &amp;hellip; 別亂學 XDD"> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="google-coding-style">Google Coding Style&lt;/h2>
&lt;p>若要偷懶，強烈建議就直接用最多人使用的就好，很多工具都有辦法幫忙重新排版程式碼，這裡展示如何用 VSCode 來設定 Google 使用的 coding style，規定的格式細節可參考 &lt;a href="https://google.github.io/styleguide/cppguide.html">Google C++ Style Guide&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1lCoOvNF61c1WaNoZ2MhO9QioANQS3HUS" alt="google-開啟設定">
&lt;img src="https://drive.google.com/open?id=1RCaxBhfaLrVM84FoD3ekeu4AmtBhnxLJ" alt="google-搜尋 format style，將欄位改成 Google">
&lt;img src="https://drive.google.com/open?id=1rALSINyYBW1JuCiWsj1IVSLhiI_-_rXd" alt="google-使用格式化可以用右鍵或是直接按對應的快捷鍵">&lt;/p>
&lt;h1 id="習慣養成">習慣養成&lt;/h1>
&lt;blockquote>
&lt;p>傻瓜都可以寫出機器能讀懂的代碼，但只有專業程序員才能寫出人能讀懂的代碼。&lt;br>
&amp;mdash; 李先靜 《系統程序員成長計劃》&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;h2 id="coding-style-again">Coding Style Again&lt;/h2>
&lt;p>用工具是很方便沒錯，不過盡量還是養成習慣而不依賴工具，這裡介紹幾個比較常見的格式：&lt;/p>
&lt;h3 id="空行-blank">空行 (Blank)&lt;/h3>
&lt;p>把所有操作寫在同一個函式裡面通常不容易辦到，因此不免會有某些區塊在做相關的事，合理使用空行能夠讓讀者很容易就看出程式碼的這些區塊的用途。&lt;/p>
&lt;h3 id="縮排-indent">縮排 (Indent)&lt;/h3>
&lt;p>我以前偏好 4 個空格，但是最近有往兩個空格移動的趨勢，另外 Google 也是以 2 個空格為主。然而 Linux kernel 是使用 tab，這裡其實只要跟合作的夥伴們講好統一使用一種即可，就不提有統計指出用 space 賺的錢比用 tab 的人多了 &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>。&lt;/p>
&lt;h3 id="if-statement">If Statement&lt;/h3>
&lt;h4 id="加上空格們">加上空格們&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">if&lt;/span>(condition) { &lt;span style="color:#75715e">// Bad
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> (condition){ &lt;span style="color:#75715e">// Bad
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span>(condition){ &lt;span style="color:#75715e">// Doubly bad
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> (condition) { &lt;span style="color:#75715e">// Good
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="加上大括號們">加上大括號們&lt;/h4>
&lt;p>這裡我會比較嚴格規定自己，就算是只有一行也要加，這樣比較方便擴充，例如臨時要加上 &lt;code>printf&lt;/code> 時就不用再加。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">if&lt;/span> (condition) {
foo;
} &lt;span style="color:#66d9ef">else&lt;/span> {
bar;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="loop-statement">Loop Statement&lt;/h3>
&lt;h4 id="加上空格們-1">加上空格們&lt;/h4>
&lt;p>注意 &lt;code>;&lt;/code> 前不要後要。&lt;br>
這裡用 &lt;code>i++&lt;/code> 或 &lt;code>++i&lt;/code> 其實基本上沒有效能差異 &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>，編譯器會幫你最佳化，我更喜歡 &lt;code>i++&lt;/code> 因為要改成 &lt;code>i+=2&lt;/code> 之類的比較方便，另外也是有 &lt;code>i-=-1&lt;/code> &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> 這種邪教&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> some_number; i&lt;span style="color:#f92672">++&lt;/span>) {
printf(&lt;span style="color:#e6db74">&amp;#34;OuO&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pointer-變數宣告">Pointer 變數宣告&lt;/h3>
&lt;p>&lt;code>int*x;&lt;/code>、&lt;code>int *x;&lt;/code>、&lt;code>int* x&lt;/code>、&lt;code>int * x&lt;/code> 都是可編譯的寫法，在 C 中 &lt;code>int *x;&lt;/code> 更為常用。C++ 中反而是 &lt;code>int* x;&lt;/code> &lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>。&lt;/p>
&lt;h3 id="命名-naming-convention">命名 (Naming Convention)&lt;/h3>
&lt;h4 id="檔案名稱變數-variable函式-function">檔案名稱、變數 (Variable)、函式 (Function)&lt;/h4>
&lt;p>使用 &lt;a href="https://en.wikipedia.org/wiki/Snake_case">snake_case&lt;/a> 並取有上下文關係的名字，例如 &lt;code>flag&lt;/code>、&lt;code>count&lt;/code> 就沒有上下文，會不知道這個變數要用來存放什麼東西。&lt;br>
e.g., &lt;code>http_server_logs.h&lt;/code>、&lt;code>table_name&lt;/code>&lt;/p>
&lt;p>Google 的函式也可用 UpperCamelCase，但我個人比較習慣 snake_case，另外函式須以動詞開頭以表明動作。&lt;br>
e.g., &lt;code>add_table_entry&lt;/code>&lt;/p>
&lt;h4 id="struct-class">Struct, Class&lt;/h4>
&lt;p>使用 &lt;a href="https://en.wikipedia.org/wiki/Camel_case">UpperCamelCase&lt;/a>&lt;br>
e.g., &lt;code>UrlTableProperties&lt;/code>, &lt;code>TableInfo&lt;/code>&lt;/p>
&lt;h4 id="常數-constant">常數 (Constant)&lt;/h4>
&lt;p>使用全大寫並以 &lt;code>_&lt;/code> 連接。&lt;br>
e.g., &lt;code>MAX_ROW_SIZE&lt;/code>&lt;/p>
&lt;h2 id="初始化-initialize">初始化 (Initialize)&lt;/h2>
&lt;p>寫 C 語言時要注意變數的初始化，以免結果跟自己所想的不一樣，這是因為在規格書中的定義中提到，只有全域變數或是靜態 (static) 變數會被初始化，其他未初始化的則不會有明確的初始值。 C99 §6.7.8.10 &lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>。在陣列的初始化若要全部定義為 &lt;code>\0&lt;/code>，我們可以直接在宣告中使用 &lt;code>{}&lt;/code> 即可，因為規格書中有規定若初始化的個數不足則會比照靜態變數 C99 §6.7.8.21 &lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">// 每個變數宣告時搭配初始化
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#75715e">// 陣列初始化以下都可以
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span> que[&lt;span style="color:#ae81ff">26&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;\0&amp;#39;&lt;/span>};
&lt;span style="color:#66d9ef">char&lt;/span> que[&lt;span style="color:#ae81ff">26&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0&lt;/span>};
&lt;span style="color:#66d9ef">char&lt;/span> que[&lt;span style="color:#ae81ff">26&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {};
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="註解-comment">註解 (Comment)&lt;/h2>
&lt;p>請盡量使用英文來註解，因為英文比較不像中文那樣一詞多義，可以較明確的敘述，若執意要用中文就需要注意編碼，目前主流應該是使用 UTF8。內容部份可以多記錄一點上下文而不是僅僅該行程式碼做了什麼事，通常註解會拿來說明整個函式，會需要一行一行註解的情況比較少並會用高可讀性的程式馬來替代。我之前有找到一篇非常詳盡的指南 &lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup> 可以參考看看 (雖然我也沒有仔細讀完就是了＠＠&lt;/p>
&lt;p>寫法上注意空格即可。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">// OuO
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">/* OuO */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="副作用-side-effect">副作用 (Side Effect)&lt;/h2>
&lt;p>副作用 (&lt;a href="https://en.wikibooks.org/wiki/C_Programming/Side_effects_and_sequence_points">Side Effect&lt;/a>) 聽起來好像很不妙，簡單來說就是會在函式內部修改到參數的情況。其實這在一般程式語言中頗為常見，沒有這項功能的話程式會變得相當難寫，例如 Functional language 寫起來就頗耗費腦力。&lt;/p>
&lt;h3 id="在函式宣告時點出副作用">在函式宣告時點出副作用&lt;/h3>
&lt;p>但是在開發過程需要適時隔離變化，C 語言提供了 &lt;code>const&lt;/code> 修飾字來標示該參數在函式中不會被修改。以下範例中的 &lt;code>rear&lt;/code> 和 &lt;code>orig&lt;/code> 不會被修改到內容，所以可以利用 &lt;code>const&lt;/code> 來提醒函式呼叫者該參數不會被改動，反之 &lt;code>front&lt;/code> 就有機會被改動。詳細的排列組合可以參考 &lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">deque&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>orig, &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>front, &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rear) {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>front &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rear) {
printf(&lt;span style="color:#e6db74">&amp;#34;Empty&amp;#34;&lt;/span>);
} &lt;span style="color:#66d9ef">else&lt;/span> {
printf(&lt;span style="color:#e6db74">&amp;#34;%c&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, orig[&lt;span style="color:#f92672">*&lt;/span>front]);
&lt;span style="color:#f92672">*&lt;/span>front &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>front &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">// rear, orig 皆是指向一個唯讀參數 (read-only parameter)
&lt;/span>&lt;span style="color:#75715e">// 的唯讀指標 (read-only location)
&lt;/span>&lt;span style="color:#75715e">// 若嘗試在函式中修改 `rear` 或 `*rear` 就會得到編譯錯誤
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">deque&lt;/span>(
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> orig,
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>front,
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> rear) {
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="需要修改的才傳入其指標-pointer">需要修改的才傳入其指標 (Pointer)&lt;/h3>
&lt;p>這裡要先宣導一個觀念就是 C 語言只有 Pass By Value，也就是只會複製傳入變數的數值，傳入指標也是一樣，我們只是傳入了指標這個數值，而透過這個指標的取值 (dereference) 可以改動對應的記憶體位置 C99 §6.5.2.2.4 &lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>。而因為 C 的函式回傳值只限一個，所以大部分會使用修改參數的方式來回傳數值，而真正的回傳值就用來表示函式是否正確執行，否則就回傳對應的錯誤碼。&lt;/p>
&lt;p>上面那樣改起來好像太奇葩，更好的解決方式是要先思考，把將要在函式內部更動變數在傳入其指標，其餘的只須把數值傳進去即可。當然若是傳入陣列就還是需要指標就像 &lt;code>orig&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">// 因為最後一個參數不會變動而且只需要其數值
&lt;/span>&lt;span style="color:#75715e">// 所以直接以常數傳入，當然函式內部就不需要取值了
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">deque&lt;/span>(
&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> orig,
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>front,
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> rear_value) {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>front &lt;span style="color:#f92672">==&lt;/span> rear_value) {
printf(&lt;span style="color:#e6db74">&amp;#34;Empty&amp;#34;&lt;/span>);
} &lt;span style="color:#66d9ef">else&lt;/span> {
printf(&lt;span style="color:#e6db74">&amp;#34;%c&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, orig[&lt;span style="color:#f92672">*&lt;/span>front]);
&lt;span style="color:#f92672">*&lt;/span>front &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>front &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="多檔案">多檔案&lt;/h2>
&lt;h3 id="避免重複-include">避免重複 include&lt;/h3>
&lt;p>專案擴張下，必然會用到多檔案，這時候就會拆成很多的 &lt;code>.h&lt;/code>, &lt;code>.c&lt;/code> 檔，&lt;code>.h&lt;/code> 用來作為界面的溝通，這時候一定要使用 macro (&lt;a href="https://en.wikipedia.org/wiki/Include_guard">Include guard&lt;/a>) 防止重複 include。以下為檔名為 &lt;code>file.h&lt;/code> 的內容範例：&lt;code>FILE_H&lt;/code>, &lt;code>_FILE_H&lt;/code>, &lt;code>__FILE_H__&lt;/code> 都有人用，但一般以第一種為主即可。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#ifndef FILE_H
&lt;/span>&lt;span style="color:#75715e">#define FILE_H
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/* ... Declarations etc here ... */&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">/* FILE_H */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="用-static-修飾內部函數">用 &lt;code>static&lt;/code> 修飾內部函數&lt;/h3>
&lt;p>如果在多檔案下函數並不是要開放給其他檔案呼叫時，請加上 &lt;code>static&lt;/code> 來保證只有當前檔案內部可以看到那個函數。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">my_local_function&lt;/span>() {
printf(&lt;span style="color:#e6db74">&amp;#34;OuO&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="避免使用危險的函式們">避免使用危險的函式們&lt;/h2>
&lt;p>C 語言給予使用者相當大的彈性但用起來需要知道自己在做什麼，否則會有許多安全性漏洞，有一些函式很容易造成誤用，連資深工程師也常用錯，因此蠻多專案直接把不安全的函式禁用，例如 Git &lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>，Intel 的 safestringlib 也有一個完整列表 &lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>。以下給出一些較常見的。&lt;/p>
&lt;ul>
&lt;li>&lt;code>gets()&lt;/code> &lt;sup id="fnref:13">&lt;a href="#fn:13" class="footnote-ref" role="doc-noteref">13&lt;/a>&lt;/sup> C11 已經不支援，請改用 &lt;code>fgets()&lt;/code>&lt;/li>
&lt;li>&lt;code>strcpy()&lt;/code> 沒有長度偵測。&lt;/li>
&lt;li>&lt;code>strncpy()&lt;/code> 有長度但是不會在結尾補上 &lt;code>\0&lt;/code> &lt;sup id="fnref:14">&lt;a href="#fn:14" class="footnote-ref" role="doc-noteref">14&lt;/a>&lt;/sup>。&lt;/li>
&lt;li>&lt;code>ato*()&lt;/code> 改用 &lt;code>strto*()&lt;/code> 利於錯誤處理 C99 §7.20.1 &lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>。&lt;/li>
&lt;/ul>
&lt;h2 id="其他習慣">其他習慣&lt;/h2>
&lt;ul>
&lt;li>盡量不使用全域變數&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://aben20807.github.io/posts/20191118-programming-sense-2/">{{ 下一篇傳送門：Programming Sense (2) }}&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://twitter.com/tpope/status/1172743697315835904">Tim Pope: when people ask me to recommend a text editor&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://www.reddit.com/r/ProgrammerHumor/comments/2wrxyt/a_python_programmer_attempting_java/">A Python programmer attempting Java&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://blog.csdn.net/absurd/article/details/3181222">系統程序員成長計劃-走近專業程序員(下)&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/">Developers Who Use Spaces Make More Money Than Those Who Use Tabs&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>&lt;a href="https://stackoverflow.com/a/24887/6734174">Is there a performance difference between i++ and ++i in C?&lt;/a> &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>&lt;a href="https://twitter.com/DasSurma/status/1192736235447619584">&lt;code>i-=-1&lt;/code> is hipster, expressive and symmetric&lt;/a> &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>&lt;a href="http://www.stroustrup.com/bs_faq2.html#whitespace">Is &lt;code>int* p;&lt;/code> right or is &lt;code>int *p;&lt;/code> right?&lt;/a> &lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>&lt;a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf">C99 規格書 ISO/IEC 9899:TC3&lt;/a> &lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>&lt;a href="http://antirez.com/news/124">Writing system software: code comments.&lt;/a> &lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>&lt;a href="https://stackoverflow.com/a/1143272">What is the difference between const int*, const int * const, and int const *?&lt;/a> &lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/git/git/blob/master/banned.h">git/banned.h&lt;/a> &lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/intel/safestringlib/wiki/SDL-List-of-Banned-Functions">SDL List of Banned Functions&lt;/a> &lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:13" role="doc-endnote">
&lt;p>&lt;a href="https://cwe.mitre.org/data/definitions/242.html">CWE-242: Use of Inherently Dangerous Function&lt;/a> &lt;a href="#fnref:13" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:14" role="doc-endnote">
&lt;p>&lt;a href="https://devblogs.microsoft.com/oldnewthing/?p=36773">How can code that tries to prevent a buffer overflow end up causing one?&lt;/a> &lt;a href="#fnref:14" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Numpy Array Truncate</title><link>https://aben20807.github.io/posts/20191022-numpy-array-truncate/</link><pubDate>Tue, 22 Oct 2019 20:27:13 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20191022-numpy-array-truncate/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>踩個雷 OuO&lt;/p>
&lt;p>numpy 的 &lt;code>trunc&lt;/code> [1] 好像沒有針對小數點以下幾位做設定，一次只能全砍變成整數，可是又不能用 &lt;code>around&lt;/code> [2] 解決。&lt;/p>
&lt;p>網路上有找到解法 [3]：很直覺，就是先乘大，truncate 後再除&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">trunc&lt;/span>(values, decs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>):
&lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>trunc(values&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">**&lt;/span>decs)&lt;span style="color:#f92672">/&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">**&lt;/span>decs)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不過這有個問題，可以從以下程式觀察：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#f92672">as&lt;/span> np
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">trunc&lt;/span>(a, decimals&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>):
&lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>trunc(a&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">**&lt;/span>decimals)&lt;span style="color:#f92672">/&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">**&lt;/span>decimals)
arr &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>float32(np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#ae81ff">1.123456789&lt;/span>, &lt;span style="color:#ae81ff">2.234567890&lt;/span>, &lt;span style="color:#ae81ff">3.45678901&lt;/span>]))
&lt;span style="color:#66d9ef">print&lt;/span>(arr)
&lt;span style="color:#66d9ef">print&lt;/span>(arr&lt;span style="color:#f92672">.&lt;/span>dtype)
arr_tr6 &lt;span style="color:#f92672">=&lt;/span> trunc(arr, &lt;span style="color:#ae81ff">6&lt;/span>)
&lt;span style="color:#66d9ef">print&lt;/span>(arr_tr6)
&lt;span style="color:#66d9ef">print&lt;/span>(arr_tr6&lt;span style="color:#f92672">.&lt;/span>dtype)
arr_tr20 &lt;span style="color:#f92672">=&lt;/span> trunc(arr, &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;span style="color:#66d9ef">print&lt;/span>(arr_tr20)
&lt;span style="color:#66d9ef">print&lt;/span>(arr_tr20&lt;span style="color:#f92672">.&lt;/span>dtype)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>輸出如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">[1.1234568 2.2345679 3.456789 ]
float32
[1.123456 2.234567 3.456789]
float64
[1.1234568357467651 2.234567880630493 3.456789016723633]
object
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不對啊，型別怎麼不一樣了 OAO&lt;/p>
&lt;p>所以如果不想要型別被改動的話可能要在最後轉成原來的型別&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#f92672">as&lt;/span> np
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">trunc&lt;/span>(a, decimals&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>):
&lt;span style="color:#66d9ef">return&lt;/span> (np&lt;span style="color:#f92672">.&lt;/span>trunc(a&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">**&lt;/span>decimals)&lt;span style="color:#f92672">/&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">**&lt;/span>decimals))&lt;span style="color:#f92672">.&lt;/span>astype(a&lt;span style="color:#f92672">.&lt;/span>dtype)
arr &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>float32(np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#ae81ff">1.123456789&lt;/span>, &lt;span style="color:#ae81ff">2.234567890&lt;/span>, &lt;span style="color:#ae81ff">3.45678901&lt;/span>]))
&lt;span style="color:#66d9ef">print&lt;/span>(arr)
&lt;span style="color:#66d9ef">print&lt;/span>(arr&lt;span style="color:#f92672">.&lt;/span>dtype)
arr_tr6 &lt;span style="color:#f92672">=&lt;/span> trunc(arr, &lt;span style="color:#ae81ff">6&lt;/span>)
&lt;span style="color:#66d9ef">print&lt;/span>(arr_tr6)
&lt;span style="color:#66d9ef">print&lt;/span>(arr_tr6&lt;span style="color:#f92672">.&lt;/span>dtype)
arr_tr20 &lt;span style="color:#f92672">=&lt;/span> trunc(arr, &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;span style="color:#66d9ef">print&lt;/span>(arr_tr20)
&lt;span style="color:#66d9ef">print&lt;/span>(arr_tr20&lt;span style="color:#f92672">.&lt;/span>dtype)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>輸出：(但是就有型別限制的最大儲存長度了)&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">[1.1234568 2.2345679 3.456789 ]
float32
[1.123456 2.234567 3.456789]
float32
[1.1234568 2.2345679 3.456789 ]
float32
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完美 OuO&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>[1] &lt;a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.trunc.html">numpy.trunc&lt;/a>&lt;/li>
&lt;li>[2] &lt;a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html">numpy.around&lt;/a>&lt;/li>
&lt;li>[3] &lt;a href="https://stackoverflow.com/a/46020635/6734174">Truncating decimal digits numpy array of floats&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>資料整理</title><link>https://aben20807.github.io/posts/20191019-data-statistic/</link><pubDate>Sat, 19 Oct 2019 11:20:13 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20191019-data-statistic/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=1NnbVE8x3tW3BDpNNNdohXiyM4jyVIgPs -->
&lt;p>剛好用到一些蠻有用的工具，記錄一下&lt;/p>
&lt;p>資料：一個檔案 13 個數字共有 10,000 個檔案。&lt;br>
目的：視覺化平均後的 13 欄資料&lt;br>
主要分作以下步驟：&lt;/p>
&lt;ol>
&lt;li>合併 10,000 筆資料到一個檔案方便複製&lt;/li>
&lt;li>用 Google Spreadsheet 來平均並製作圖表&lt;/li>
&lt;/ol>
&lt;h2 id="1-合併">1. 合併&lt;/h2>
&lt;p>檔案架構大致如下&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">├── mae_0000.txt
├── mae_0001.txt
├── mae_0002.txt
├── mae_0003.txt
├── mae_0004.txt
├── mae_0005.txt
├── mae_0006.txt
├── mae_0007.txt
├── mae_0008.txt
├── mae_0009.txt
├── mae_0010.txt
├── mae_0011.txt
├── mae_0012.txt
.
.
.
└── mae_9999.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以首先我們需要合併，這裡介紹一個頗好用的指令 &lt;code>paste&lt;/code>。 &lt;code>paste&lt;/code> 可以將資料水平合併，例如：(左邊行號，右邊內容)&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat a.txt b.txt c.txt
───────┬──────────────────────────────────────────
│ File: a.txt
───────┼──────────────────────────────────────────
&lt;span style="color:#ae81ff">1&lt;/span> │ &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#ae81ff">2&lt;/span> │ &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> │ &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#ae81ff">4&lt;/span> │ &lt;span style="color:#ae81ff">4&lt;/span>
───────┴──────────────────────────────────────────
───────┬──────────────────────────────────────────
│ File: b.txt
───────┼──────────────────────────────────────────
&lt;span style="color:#ae81ff">1&lt;/span> │ &lt;span style="color:#ae81ff">5&lt;/span>
&lt;span style="color:#ae81ff">2&lt;/span> │ &lt;span style="color:#ae81ff">6&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> │ &lt;span style="color:#ae81ff">7&lt;/span>
&lt;span style="color:#ae81ff">4&lt;/span> │ &lt;span style="color:#ae81ff">8&lt;/span>
───────┴──────────────────────────────────────────
───────┬──────────────────────────────────────────
│ File: c.txt
───────┼──────────────────────────────────────────
&lt;span style="color:#ae81ff">1&lt;/span> │ &lt;span style="color:#ae81ff">9&lt;/span>
&lt;span style="color:#ae81ff">2&lt;/span> │ &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> │ &lt;span style="color:#ae81ff">11&lt;/span>
&lt;span style="color:#ae81ff">4&lt;/span> │ &lt;span style="color:#ae81ff">12&lt;/span>
───────┴──────────────────────────────────────────
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ paste *.txt &amp;gt; all.txt
$ cat all.txt
───────┬──────────────────────────────────────────
│ File: all.txt
───────┼──────────────────────────────────────────
&lt;span style="color:#ae81ff">1&lt;/span> │ &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>
&lt;span style="color:#ae81ff">2&lt;/span> │ &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> │ &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>
&lt;span style="color:#ae81ff">4&lt;/span> │ &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>
───────┴──────────────────────────────────────────
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以我們一樣可以用 &lt;code>paste *.txt &amp;gt; all.txt&lt;/code> 來把 10,000 資料都整理到同一個檔案，&lt;/p>
&lt;p>此時如果出現 &lt;code>Too many open files&lt;/code> 的錯誤，可以使用以下指令來增加同時可開啟的檔案數&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ulimit -Hn &lt;span style="color:#ae81ff">10240&lt;/span> &lt;span style="color:#75715e"># The hard limit&lt;/span>
$ ulimit -Sn &lt;span style="color:#ae81ff">10240&lt;/span> &lt;span style="color:#75715e"># The soft limit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>成功變成一個檔案後發現它的 column 太多了 Spreadsheet 無法直接貼上，所以接下來要轉置一下。&lt;/p>
&lt;p>這裡我們使用 awk 來幫忙，新增一個 &lt;code>transpose.sh&lt;/code> 的檔案，內容如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;span style="color:#75715e">&lt;/span>awk &lt;span style="color:#e6db74">&amp;#39;
&lt;/span>&lt;span style="color:#e6db74">{
&lt;/span>&lt;span style="color:#e6db74"> for (i=1; i&amp;lt;=NF; i++) {
&lt;/span>&lt;span style="color:#e6db74"> a[NR,i] = $i
&lt;/span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;span style="color:#e6db74">}
&lt;/span>&lt;span style="color:#e6db74">NF&amp;gt;p { p = NF }
&lt;/span>&lt;span style="color:#e6db74">END {
&lt;/span>&lt;span style="color:#e6db74"> for(j=1; j&amp;lt;=p; j++) {
&lt;/span>&lt;span style="color:#e6db74"> str=a[1,j]
&lt;/span>&lt;span style="color:#e6db74"> for(i=2; i&amp;lt;=NR; i++){
&lt;/span>&lt;span style="color:#e6db74"> str=str&amp;#34; &amp;#34;a[i,j];
&lt;/span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;span style="color:#e6db74"> print str
&lt;/span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;span style="color:#e6db74">}&amp;#39;&lt;/span> $1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>變更一下執行權限，就可以執行了&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ chmod +x transpose.sh
$ ./transpose.sh all.txt &amp;gt; all_tr.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>這樣資料就會從原本的往右長變成往下長&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1dZ7u6raak9lUQiPR5DKxUTRjQJWPTPFZ" alt="google-轉置前">
&lt;img src="https://drive.google.com/open?id=1_vu6Is-UDZqvWJodUJjdVlmbGokwct5O" alt="google-轉置後">&lt;/p>
&lt;h2 id="使用-google-spreadsheep">使用 Google Spreadsheep&lt;/h2>
&lt;p>這裡可能比較沒啥，就是貼上去，這裡我覺得不要用 vim 開啟，找個方便複製的 (例如：VSCode)&lt;/p>
&lt;p>用 Ctrl-v 貼上 Spreadsheet 時可能會花一點時間&lt;/p>
&lt;p>不過發現它把所有的 column 合在一起了&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1jluF0VN_pDaifwAjVaJVsklIb5j3w7nN" alt="google- ">&lt;/p>
&lt;p>我們選取第一個 column 然後點上方的 &amp;ldquo;資料&amp;rdquo; &amp;gt; &amp;ldquo;將文字分隔成不同欄&amp;rdquo;&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1daksDj4iW6FCgvoTi9pxrQks7RYxBd4c" alt="google- ">&lt;/p>
&lt;p>它會自動將第一個 column 分出來，這時後會冒出一個小視窗 (有點不明顯，有時候要滾動一下才會出現)，把下拉式選單點開選擇 &amp;ldquo;空格&amp;rdquo; 這樣它就會把所有 column 分開了。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=13wfpf9aTKIqahEW-WUjAWkTAH-zwLlAf" alt="google- ">
&lt;img src="https://drive.google.com/open?id=1sUbYYqab7gdhWDDSFX0eJUxujb7_zfPn" alt="google- ">
&lt;img src="https://drive.google.com/open?id=1NnbVE8x3tW3BDpNNNdohXiyM4jyVIgPs" alt="google- ">&lt;/p>
&lt;p>平均跟圖表部份就按照一般試算表的使用方式，就不記錄了。&lt;/p>
&lt;h2 id="參考">參考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/a/1729980/6734174">An efficient way to transpose a file in Bash&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://unix.stackexchange.com/a/205646">Combining large amount of files&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>天氣之子 Weathering With You</title><link>https://aben20807.github.io/posts/20190919-weathering-with-you/</link><pubDate>Thu, 19 Sep 2019 23:35:06 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190919-weathering-with-you/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=1e-W33G5mxkcyW8UggrgalOOMiN0rCVHG -->
&lt;p>看完直接來寫一波 OuO&lt;br>
趁還沒看其他人的影評先來說一下看完當下的一些感想&lt;br>
!!!! 強烈暴雷注意 !!!!&lt;/p>
&lt;blockquote>
&lt;p>果然誠哥回不去了&lt;br>
果然有貓&lt;br>
果然有瀧跟三葉&lt;br>
果然沒有縮時鏡頭&lt;br>
果然音樂都頗讚&lt;/p>
&lt;/blockquote>
&lt;p>這些當然不是我在看電影前就預測，而是邊看邊喔～果然&lt;/p>
&lt;p>話說這個聲優陣容有點厲害&lt;/p>
&lt;p>所以我這幾天有點膽顫心驚，深怕一不小心就被暴雷了，我甚至連已經在 YouTube 出現的音樂都沒聽過，看到相關新聞快速掠過。&lt;/p>
&lt;p>雖然我總是口頭說著喜歡下雨，但是再好幾次的雨天也都會覺得很麻煩，這次能夠用天氣當作動畫題材我真心佩服。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1e-W33G5mxkcyW8UggrgalOOMiN0rCVHG" alt="google- ">&lt;/p>
&lt;p>首先第一個果然，從 2002年《星之聲》, 2004年《雲之彼端，約定的地方》, 2007年 《秒速5公分》, 2011年《追逐繁星的孩子》, 2013年《言葉之庭》全部都有一種會使人心痛的寂寞感，但想當然爾大家喜歡的是像迪士尼那樣友好結局的作品，2016年《你的名字》就出現了，直接讓新海誠導演成為討論的焦點，而成功關鍵就是有好的結局，就如同細田守2009年《夏日大作戰》一樣是大家喜愛的電影。但是誠哥舊時的那種寂寞感已經不復存在，較不失理的講法就是稱那些新的影片為商業導向即為商業片。&lt;/p>
&lt;p>對我來說，我是不會說一定只看之前的影片，但是我是很喜歡那種寂寞感的，雖然有點傷身體 XDD，有興趣可以先從《追逐繁星的孩子》、《言葉之庭》入門，經典是《秒速5公分》。但有時我也覺得商業片不錯，至少看了心情會好。&lt;/p>
&lt;p>第二個果然，我覺得導演頗愛貓，可以去看一個可愛的短片：&lt;a href="https://www.youtube.com/watch?v=wafGAcUim5A">猫の集会&lt;/a>。&lt;/p>
&lt;p>第三個果然，其實在《你的名字》就有出現類似的彩蛋，裡面有《言葉之庭》的孝雄和雪野。&lt;/p>
&lt;p>第四個果然，我看完之後想果然沒有縮時攝影，但是明明天氣這種用縮時會很好看啊。不過注意《天氣之子》裡面都是在講短暫的天氣變化，這也難怪沒地方塞縮時了。&lt;/p>
&lt;p>第五個果然，在電影院的環繞音效下音樂都頗棒，煙火那邊的 BGM 會起雞皮疙瘩，兩個人在天空的那首最為氣派也最需要比較好的環繞來聽。然後因為我歌跟歌名還沒對起來，待我聽個幾日再更新吧 OuO&lt;/p>
&lt;p>主角們最後為了自己而許願，這並不是妥協於世界已經在崩壞的藉口，而是有所選擇下的結果。&lt;/p>
&lt;p>老實說我一度以為會想辦法解決這個雨一直下不停的狀況，結果最後是就直接在這裡停止，我想這也是頗好，帶了一點點不是這麼完美的結局結束。&lt;/p>
&lt;hr>
&lt;h2 id="20190921-補充">2019.09.21 補充&lt;/h2>
&lt;p>怎麼講呢，認真要挑反而沒有一首代表性的 (跟《你的名字》有點像)，不過我會想放グランドエスケープ(Grand Escape) - RADWIMPS (feat.三浦透子)，因為是電影短版所以那種到高潮處嘎然而止的感覺跟電影有點像，重低音的背景我有點愛但不太適合狂聽就是了。&lt;/p>
&lt;div style=" position: relative; width: 100%; height: 100%;
padding-bottom: 56.25%; /*16:9*/ ">
&lt;iframe src="https://www.youtube.com/embed/j4fIz2ozjO0?start=1" style=" position: absolute; top: 0; left: 0; width: 100%; height: 100%;" class="center"
allowfullscreen frameborder="0" title="YouTube Video">
&lt;/iframe>
&lt;/div>
&lt;p>不過，大丈夫 (We&amp;rsquo;ll be alright) - RADWIMPS 這首的歌詞最棒最符合這部主角的心境了 OuO&lt;/p>
&lt;div style=" position: relative; width: 100%; height: 100%;
padding-bottom: 56.25%; /*16:9*/ ">
&lt;iframe src="https://www.youtube.com/embed/tEL6EQE66FA?start=1" style=" position: absolute; top: 0; left: 0; width: 100%; height: 100%;" class="center"
allowfullscreen frameborder="0" title="YouTube Video">
&lt;/iframe>
&lt;/div>
&lt;p>另外，我上面的淺薄心得都是在看任何影評之前靠著自己寫的，有一個短評我覺得跟我想表達的有點像可是講得非常好 (我太爛啦XD)：【影評/解析】《天氣之子》-為了你，我可以放棄世界 | 超粒方&lt;/p>
&lt;div style=" position: relative; width: 100%; height: 100%;
padding-bottom: 56.25%; /*16:9*/ ">
&lt;iframe src="https://www.youtube.com/embed/xFc8aLYF2e0?start=1" style=" position: absolute; top: 0; left: 0; width: 100%; height: 100%;" class="center"
allowfullscreen frameborder="0" title="YouTube Video">
&lt;/iframe>
&lt;/div></description></item><item><title>我的學習方式</title><link>https://aben20807.github.io/posts/20190911-how-i-learn-in-university/</link><pubDate>Wed, 11 Sep 2019 22:18:43 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190911-how-i-learn-in-university/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=https://drive.google.com/open?id=11dfe_7DVpwD2njTDBgIu23p1B4c_M7-d -->
&lt;p>大學畢業後突然有感，感覺需要記錄一下。&lt;/p>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>其實這只是一段紀錄，不是要說你們一定要學著這樣做，當然如果你覺得不錯可以試試看，不過如果發現太晚看到了，沒關係，生命自會找到出路，人生裡沒有什麼是繞遠路的。總之把這篇當作是&lt;a href="https://zh.wikipedia.org/wiki/%E5%80%96%E5%AD%98%E8%80%85%E5%81%8F%E5%B7%AE">倖存者偏差&lt;/a>的文章我也不會說什麼。&lt;/p>
&lt;p>另外，雖然主要是大學，不過我覺得這個學習方式是在國中的時候被養成的，高中時有機會得以更加磨練，大學時用的得心應手。&lt;/p>
&lt;h1 id="國高中的啟蒙">國高中的啟蒙&lt;/h1>
&lt;p>剛好都是生物課 (結果我現在的領域截然不同)。國中生物課是老師通常用投影片跟講義上課，然後會有東西需要填空，當時是因為老師頗有趣而且會需要畫一堆生物相關的圖片所以我算是蠻認真上課。高中的生物老師一樣有趣，不過教學方式是純板書，而且字相當的「藝術」(當下沒記到的話之後一定會看不懂的那種)，但是因為整理的相當好，所以我都會在他講課的當下把聽到的東西抄成手稿，板書只是用來輔助我沒抄到的部份，這裡訓練到了寫字的速度及反應，然後之後再找時間轉換成比較精美的筆記，突然發現我在高中生物花了很多時間@@。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11ckRrYyumxt0qTjxS9Dz98gpH6JYNdpx" alt="google-高中生物手稿">&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11rgEhk6nd47jcfyTdt8KQsk7xRLh_3Ll" alt="google-高中生物筆記">&lt;/p>
&lt;h1 id="正文">正文&lt;/h1>
&lt;p>好像有蠻多人，不管是自己的心態亦或是將學習意願缺乏怪在教課的教授身上，這群人總是認為自己學習更有效率，甚至課都不用去上，考前讀個幾天或僅需一整夜即可應付大大小小的測驗。其實不然，若只把讀書拿來應付考試實在過於短視。&lt;/p>
&lt;p>我想說，最懶惰最輕鬆的方式絕對是「認真上課加抄筆記」，我的作法是即時將教授上課所講得知識轉換成自己能快速理解的語言並寫在活頁紙上，我覺得寫字還是很難被取代，因為自由度相當大，臨時要畫圖什麼的可以不需要任何切換。除了考試外，有其他額外的技能能夠訓練，例如教授上課的教學技巧，並非只有教得好的值得學習，那些聽得很吃力的可以學到怎樣的方式是不適合的間接可以拿來調整自己。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11LbbgbouvwIlnpDm8EPL7mPabBjnPVin" alt="google-作業系統 process scheduling">&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11HKH0-EwLVEK74ggSIQdhYyzH3nGf5gA" alt="google-作業系統 fork">&lt;/p>
&lt;p>活頁紙也是方便之後做補充或調整。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11H5tRYqoTCEClbPqH1ZmXB5T-ig8S4v5" alt="google-計算理論 NFA">&lt;/p>
&lt;p>有時也會用便利貼做補充或整理。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11j_ElOGVmLW678tEFavcdFBZt287Ft2l" alt="google-計算機概論">&lt;/p>
&lt;p>甚至是跨頁的指向。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11ttY-5mgL8rAxY9Zj6gvDMqWaGQkuMfv" alt="google-工程數學 第二位移定理">&lt;/p>
&lt;p>解題心法，工數教授會口述，所以我抄起來 (紅字) 以免忘記&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11fn8OvmD3bc5NTRRmGzORoSw4QaAReg2" alt="google-工程數學">&lt;/p>
&lt;p>必考題重點標記。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11tzUGk0lsDuDGs7KbOUBPZqL6aUn6z3F" alt="google-資料結構 Binary Tree">&lt;/p>
&lt;p>因為抄筆記已經成為一種習慣了，所以你可以看到不管什麼課我都可以抄。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11D90v_2P7X6bBZNNTwx9Clkxy6k9_Pac" alt="google-法政哲學 康德自由意志">&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=11_a3xYpk5UX3HtZP_tJi4LOtI2NoQo0E" alt="google-憲政民主體制">&lt;/p>
&lt;p>總之我認為邊上課邊寫出讓自己易於理解筆記的過程，與直譯器 (&lt;a href="https://en.wikipedia.org/wiki/Interpreter_(computing)">Interpreter&lt;/a>) 有 87% 相似度，根本就是人體直譯器。 然後算是最近才知道這非常接近&lt;a href="https://medium.com/y-pointer/%E7%9F%A5%E8%AD%98-967cca95a939">費曼學習法&lt;/a>，只是我還有加上即時產出。&lt;/p>
&lt;p>另外因為是即時改寫，所以也算是有訓練到重寫的技能，這在未來寫論文上可能會比較需要。&lt;/p>
&lt;p>使用這個方法我認為算是比較容易能夠維持好成績的，不會像臨時抱佛腳那樣浮動比較大，至於好成績有什麼用我就另外列在下面了，別在說「大學成績沒啥用，有過就好」這種話，但是當然也是有缺點的。&lt;/p>
&lt;h1 id="認真上課的缺點">認真上課的缺點&lt;/h1>
&lt;ul>
&lt;li>需要有人 (教授) 幫忙整理資料變成自己的輸入&lt;/li>
&lt;li>缺少主動去學習的能力&lt;/li>
&lt;li>如果需要大量思考的內容會比較吃力，例如：演算法&lt;/li>
&lt;li>會有更多時間做自己的事，不夠自律的話會浪費時間&lt;/li>
&lt;/ul>
&lt;h1 id="補充成績好可能有的好處">補充：成績好可能有的好處&lt;/h1>
&lt;p>(相關規定自己查嘿 OuO)&lt;/p>
&lt;ul>
&lt;li>獎學金 &amp;ndash; (雖然我沒拿過我們學校的)&lt;/li>
&lt;li>提早畢業 &amp;ndash; (有成績門檻，雖然我也沒用到)&lt;/li>
&lt;li>不用補習考研，靠推甄 &amp;ndash; (直接省一大筆錢加一堆時間)&lt;/li>
&lt;li>出國 GPA &amp;ndash; (據說國外成績看頗重)&lt;/li>
&lt;li>&lt;del>同學都把你當學霸&lt;/del>&lt;/li>
&lt;/ul>
&lt;h1 id="結論">結論&lt;/h1>
&lt;p>整體來說，認真上課的 CP 值真的頗高。&lt;/p>
&lt;h1 id="後記">後記&lt;/h1>
&lt;p>畢業之後回想，這個學習方式是很輕鬆，但是缺點就是自己讀書的時間太少，而這卻是大學跟研究所之間的差異，也就是說讀研究所時，會傾向學生已經具備從書本學習已建構好的知識，研究所則是不會又統一的教材，必須自行找到相關的期刊論文、研究、實驗、找出新方法。因此現在的我就會有之前書讀得太少的感覺。&lt;/p>
&lt;p>然而這些知識現在大部分都已經散落在網路上的，怎麼下關鍵字找答案以及如何分辨真偽反而是更重要的課題。不過下關鍵字的能力我是覺得我算很不錯，因為很多問題只能自己上網找答案之類的。&lt;/p></description></item><item><title>Valgrind 的 Memcheck</title><link>https://aben20807.github.io/posts/20190817-valgrind-memcheck/</link><pubDate>Sat, 17 Aug 2019 11:17:09 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190817-valgrind-memcheck/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=1_AbE-ZZwgjrCTgCi9ypGCVyYqWvxDO6f -->
&lt;p>簡單玩玩 @@&lt;/p>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>之前大學時期 (講得好像很久之前 OuO) 的某幾個作業我有拿來測試自己的程式碼是否有 memory leak 的情況，會發生這種情況主要原因是沒有對每一個 alloc 做 free。&lt;/p>
&lt;h1 id="環境">環境&lt;/h1>
&lt;ul>
&lt;li>T490s&lt;/li>
&lt;li>Ubuntu 18.04&lt;/li>
&lt;/ul>
&lt;h1 id="valgrind-的-memcheck">Valgrind 的 Memcheck&lt;/h1>
&lt;p>要一篇講完 Valgrind 基本上有點難，而且東西頗雜，我也是邊摸邊記錄，因為 Valgrind 有很多工具可以用，本篇主要講解預設的工具 &lt;strong>memcheck&lt;/strong>，當然也只是部份的部份而已 QuQ。顧名思義是用來檢測記憶體使用情況，主要用在 C 及 C++。它是以插入額外程式碼 (&lt;a href="https://en.wikipedia.org/wiki/Profiling_(computer_programming)#Instrumentation">Instrumentation&lt;/a>) 的方式來記錄記憶體的使用，根據 wiki，memcheck 幾乎對所有指令的周圍都插入額外的檢測程式碼用來追蹤記憶體區塊的有效性 (validity)。原因是因為一開始未被分配的區塊都會是無效 (invalid) 或是未定義 (undefined)，當這些區快被初始化後，memcheck 仍繼續追蹤 V bits (&lt;a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.value">Valid-value bits&lt;/a>) 及 A bits (&lt;a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.vaddress">Valid-address bits&lt;/a>)。此外，還實做了記憶體分配器 (&lt;a href="https://en.wikipedia.org/wiki/C_dynamic_memory_allocation">memory allocator&lt;/a>)，也就是定義了 &lt;code>malloc&lt;/code> 與 &lt;code>free&lt;/code> 之類的函式來記錄呼叫次數。&lt;/p>
&lt;p>總結來說，主要用來做以下項目檢測：&lt;/p>
&lt;ul>
&lt;li>使用位初始化的記憶體空間&lt;/li>
&lt;li>讀或寫一塊已經 &lt;code>free&lt;/code> 過得區塊&lt;/li>
&lt;li>讀或寫超過一塊 &lt;code>malloc&lt;/code> 取得合法的大小&lt;/li>
&lt;li>記憶體洩漏 (&lt;a href="https://en.wikipedia.org/wiki/Memory_leak">Memory leaks&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>不過插入外程式碼是有代價的，就是效能會變低許多。&lt;/p>
&lt;h2 id="安裝">安裝&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt install valgrind
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="測試記憶體洩漏-memory-leak-detection">測試記憶體洩漏 (Memory leak detection)&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>a &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>) malloc(&lt;span style="color:#ae81ff">1024&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>));
printf(&lt;span style="color:#e6db74">&amp;#34;%p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, a);
&lt;span style="color:#75715e">// free(a);
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="編譯">編譯&lt;/h3>
&lt;p>&lt;code>-g&lt;/code> 代表加入除錯資訊，可以讓 valgrind 指出在程式的那一行。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ gcc -o test test.c -g
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="利用-valgrind-抓-memory-leak">利用 valgrind 抓 memory leak&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ valgrind --leak-check&lt;span style="color:#f92672">=&lt;/span>full --show-leak-kinds&lt;span style="color:#f92672">=&lt;/span>all ./test
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">==18006== Memcheck, a memory error detector
==18006== Copyright (C) 2002-2017, and GNU GPL&amp;#39;d, by Julian Seward et al.
==18006== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==18006== Command: ./test
==18006==
0x522d040
==18006==
==18006== HEAP SUMMARY:
==18006== in use at exit: 4,096 bytes in 1 blocks
==18006== total heap usage: 2 allocs, 1 frees, 5,120 bytes allocated
==18006==
==18006== 4,096 bytes in 1 blocks are definitely lost in loss record 1 of 1
==18006== at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==18006== by 0x10869B: main (test.c:5)
==18006==
==18006== LEAK SUMMARY:
==18006== definitely lost: 4,096 bytes in 1 blocks
==18006== indirectly lost: 0 bytes in 0 blocks
==18006== possibly lost: 0 bytes in 0 blocks
==18006== still reachable: 0 bytes in 0 blocks
==18006== suppressed: 0 bytes in 0 blocks
==18006==
==18006== For counts of detected and suppressed errors, rerun with: -v
==18006== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分析">分析&lt;/h2>
&lt;p>程式中我們 malloc 的一塊 1024 個整數大小 (4 bytes) 的記憶體空間，程式結束前沒有呼叫 free 因此產生的 memory leak 的現象。可以看到 valgrind 指出我們在程式第 5 行 &lt;code>int *a = (int *) malloc(1024 * sizeof(int));&lt;/code> 分配了 4096 bytes 的記憶體。&lt;/p>
&lt;p>此外這裡有一個有趣的現象，就是總共分配的大小是 5120 bytes，這是因為 &lt;code>printf&lt;/code> 的關係，這個函式會固定使用 1024 bytes 的記憶體空間。所以 5120 = 4096 + 1024。&lt;/p>
&lt;h1 id="有顏色版本colour-valgrind">有顏色版本：colour-valgrind&lt;/h1>
&lt;h2 id="安裝-1">安裝&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ pip3 install colour-valgrind &lt;span style="color:#75715e"># 需要 python&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="如果喜歡的話可以直接加在-bashrc">如果喜歡的話可以直接加在 &lt;code>~/.bashrc&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">alias valgrind&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;colour-valgrind&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-1">使用&lt;/h2>
&lt;p>基本上就直接跟 valgrind 一樣&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ colour-valgrind --leak-check&lt;span style="color:#f92672">=&lt;/span>full --show-leak-kinds&lt;span style="color:#f92672">=&lt;/span>all ./test
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://drive.google.com/open?id=10pF-pr6yd5wJxlMfyaUHOrz-5v6iB1Ud" alt="google-結果">&lt;/p>
&lt;h1 id="參考資料">參考資料&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://valgrind.org/docs/manual/mc-manual.html">Valgrind User Manual - 4. Memcheck: a memory error detector&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Valgrind">https://en.wikipedia.org/wiki/Valgrind&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Regex101</title><link>https://aben20807.github.io/posts/20190815-regexp/</link><pubDate>Thu, 15 Aug 2019 22:16:38 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190815-regexp/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id=1vdxAJpMf506uqrdfXp6IPve3CYn-RXCP -->
&lt;p>我現在才知道這個是不是偏爛啊&lt;/p>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>因為要調整網站的一些東西，所以需要寫一些正規表達式 (regular expression)，不過一直試都失敗，上網找資料才發現一個好網站。傳送門：&lt;a href="https://regex101.com/">https://regex101.com/&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1-H5FG7NzGBMSEqNv6iJ0z2QfY3hQoXW5" alt="google- ">&lt;/p>
&lt;p>一開始看到連結還以為是什麼內容農場，結果不是XDD&lt;/p>
&lt;h1 id="使用">使用&lt;/h1>
&lt;p>左方有語言選項，因為不同語言的正規表達式可能會有些許的差異，所以就選擇正在使用的語言，因為 Hugo 是 Golang 寫的所以網站的表達式要選用 Go 語言。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1Oz0fVpydicxt3X97ywQ-Z45YHePTf6-l" alt="google-選擇 Golang">&lt;/p>
&lt;p>基本功能就是填入表達式，接著可以輸入測試字串看是否吻合，如果中間有 group 的話也會標示不同顏色，這點我覺得超棒。
&lt;img src="https://drive.google.com/open?id=11ScFQm6k0GbA3TPJbA7AysE8btF7dsdL" alt="google- ">&lt;/p>
&lt;p>圖上範例就是我想要用來修改文章的標題 (heading)，加上錨定符號用。&lt;/p>
&lt;p>簡單範例：&lt;/p>
&lt;pre>&lt;code>(&amp;lt;(h[1-9]) id=\&amp;quot;([^\&amp;quot;]+)\&amp;quot;(.+))(&amp;lt;/h[1-9]+&amp;gt;)
&lt;/code>&lt;/pre>&lt;p>然後我是用這個來做取代來換成我想要的樣式，例如：&lt;/p>
&lt;pre>&lt;code>replaceRE &amp;quot;(&amp;lt;(h[1-9]) id=\&amp;quot;([^\&amp;quot;]+)\&amp;quot;(.+))(&amp;lt;/h[1-9]+&amp;gt;)&amp;quot; `&amp;lt;${2} id=&amp;quot;${3}&amp;quot; class=&amp;quot;article-heading&amp;quot;${4}&amp;lt;a class=&amp;quot;headline-hash smoothScroll hover-show scrollspy&amp;quot; style=&amp;quot;font-size: 0.75em; color: black; padding-left: 0.25em&amp;quot; href=&amp;quot;#${3}&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;iconify&amp;quot; data-icon=&amp;quot;octicon-link&amp;quot; data-inline=&amp;quot;false&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; ${5}`
&lt;/code>&lt;/pre>&lt;p>原本的標題就會變成
&lt;img src="https://drive.google.com/open?id=1yubxNXgTK8uZV07Bo52PzBUHN2Tjf8rY" alt="google- ">&lt;/p></description></item><item><title>別把人家的好心視為理所當然</title><link>https://aben20807.github.io/posts/20190804-tiny-action/</link><pubDate>Sun, 04 Aug 2019 11:08:11 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190804-tiny-action/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>其實原本 6 月中就要寫了，結果因為沒拍到照片所以就先延後 (明明是自己懶惰&lt;/p>
&lt;p>6 月中還蠻嚴重的就是香港反送中的事件開始，到現在 8 月了仍然有罷工及遊行，不過本篇不會討論這個事件。 雖說不討論但其實有些相關。記得當時許多人跟風換了頭貼濾鏡，但我認為有一些人只會盲從表現自己好像有在關注社會議題反而忽略身邊的事。 若真的去探討哪些人，其實並不限於換頭貼的人，也不是換頭貼就會這樣，換頭貼只是剛好是附近發生的大事。所以並不是想要嘴這些換頭貼的人喔。&lt;/p>
&lt;p>讓我想發文的遠因是大家都會把雨傘晾在走廊，導火線是前室友針對此事的&lt;a href="https://www.moedict.tw/%E5%BC%B7%E8%BE%AF">強 (ㄑ一ㄤˇ) 辯&lt;/a>，先來講講發生了什麼事吧。&lt;/p>
&lt;p>下雨天，大部分的人都會撐雨傘，拿回宿舍後就會打開然後放在走廊上，若是短暫的放置是還可以，不過幾乎所有人都是會放到過夜的，等到了隔天，打掃阿姨因為要推工作車，但因為有放雨傘所以過不去，因此就需要一個一個收雨傘才能前進。&lt;/p>
&lt;p>我的前室友提出以下幾點：&lt;/p>
&lt;ul>
&lt;li>雨傘打開放在外面比較快乾&lt;/li>
&lt;li>打掃阿姨有領薪水，而且沒看過她抱怨&lt;/li>
&lt;/ul>
&lt;p>我對這些有些疑問。乾比較快需要放整晚嗎？另外，走廊是公共空間，照理說是不可以放置私人物品。還有正常打掃工作是不會包含收雨傘的，她幫忙收是因為這樣才能工作，沒有抱怨是因為人很好。因此帶入今天的主題，「別把人家的好心視為理所當然」。&lt;/p>
&lt;p>(當然，這位室友事後說他是硬要辯&lt;/p>
&lt;p>突然發現要講的沒有很多，只是希望大家多去思考，平時其實會有許多類似的情況，多去將心比心，而不是以為換個頭貼就有多關心這個社會，請從身邊最微小的事開始去實際力行，這個社會才能一點一滴的變好。&lt;/p>
&lt;p>當然你可能好奇我怎麼晾雨傘，我是直接收傘的狀況下放到房間地上，不用綁起來，利用房間冷氣會讓房間乾燥的特性，放一個晚上基本上就乾了。給你們參考 OuO&lt;/p></description></item><item><title>Build MNIST with TVM</title><link>https://aben20807.github.io/posts/20190616-build-mnist-with-tvm/</link><pubDate>Sun, 16 Jun 2019 17:40:59 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190616-build-mnist-with-tvm/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>真的是隔很久&amp;hellip;.藉口就不多說了 OuO&lt;/p>
&lt;p>這篇主要在造輪子，主要原因就是幾乎找不到這類輪子了，而剛好自己需要，又卡了很久才完成，不如記錄一下 OuO&lt;/p>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>最近在做 TVM 相關的事，它支援頗多前端，基於方便我就隨便挑一個 Keras 了 (先說我不會 AI @@&lt;br>
然後因為現在頗多都在做 ImageNet 或更之後的應用，MNIST 的資料反而偏少，尤其是幾乎找不到訓練好的模型，說幾乎是因為還真的被我找到，傳送門：&lt;a href="https://github.com/EN10/KerasMNIST">EN10/KerasMNIST&lt;/a>，如果只是要用 Keras 來操作 MNIST 的話可以用這個連結，我已經確認過是可以直接執行XDD&lt;/p>
&lt;hr>
&lt;p>2019.06.17 更新：扯，原來官網就有&amp;hellip;.https://keras.io/examples/mnist_cnn/&lt;br>
然後我發現我整篇都把 MNIST 打成 MINST&amp;hellip;.&lt;/p>
&lt;hr>
&lt;p>話說原本以為模型被存成檔案的話只有權重，結果是有兩種，也可以跟整個模型存在一起，詳情就去 Keras 官網 &lt;a href="https://keras.io/getting-started/faq/#how-can-i-save-a-keras-model">How can I save a Keras model?&lt;/a> 看看吧。&lt;/p>
&lt;p>所以上面那個做 MNIST 的是把整個模型存起來，這主要不是我要的＠＠，不過還是先用看看。&lt;/p>
&lt;p>P.S. 一些相依性檔案例如 Keras, Tensorflow, TVM 的安裝就不一一記錄囉 OuO&lt;/p>
&lt;h1 id="環境">環境&lt;/h1>
&lt;ul>
&lt;li>ubuntu 18.04&lt;/li>
&lt;li>TVM 0.6.dev (6a4d71ff40915611bd42b62994992b879e6be610)&lt;/li>
&lt;/ul>
&lt;h1 id="一堆程式碼上菜囉">一堆程式碼上菜囉&lt;/h1>
&lt;h2 id="原始-cnnpredictpy">原始 &lt;code>cnnPredict.py&lt;/code>&lt;/h2>
&lt;p>注意要下載或複製那個程式碼，&lt;code>cnn.h5&lt;/code> 跟 &lt;code>test3.png&lt;/code> 一樣要放對位置。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> scipy.misc &lt;span style="color:#f92672">import&lt;/span> imread, imresize
&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#f92672">as&lt;/span> np
x &lt;span style="color:#f92672">=&lt;/span> imread(&lt;span style="color:#e6db74">&amp;#39;test3.png&amp;#39;&lt;/span>,mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;L&amp;#39;&lt;/span>)
&lt;span style="color:#75715e"># Compute a bit-wise inversion so black becomes white and vice versa&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>invert(x)
&lt;span style="color:#75715e"># Make it the right size&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> imresize(x,(&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>))
&lt;span style="color:#75715e"># Convert to a 4D tensor to feed into our model&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>reshape(&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>)
x &lt;span style="color:#f92672">=&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>astype(&lt;span style="color:#e6db74">&amp;#39;float32&amp;#39;&lt;/span>)
x &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>
&lt;span style="color:#75715e"># Perform the prediction&lt;/span>
&lt;span style="color:#f92672">from&lt;/span> keras.models &lt;span style="color:#f92672">import&lt;/span> load_model
model &lt;span style="color:#f92672">=&lt;/span> load_model(&lt;span style="color:#e6db74">&amp;#39;cnn.h5&amp;#39;&lt;/span>)
out &lt;span style="color:#f92672">=&lt;/span> model&lt;span style="color:#f92672">.&lt;/span>predict(x)
&lt;span style="color:#66d9ef">print&lt;/span>(np&lt;span style="color:#f92672">.&lt;/span>argmax(out))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>很好，可以執行～&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python3 cnnPredict.py
&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="加入-tvm-囉">加入 TVM 囉&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> nnvm
&lt;span style="color:#f92672">import&lt;/span> tvm
&lt;span style="color:#f92672">import&lt;/span> tvm.relay &lt;span style="color:#f92672">as&lt;/span> relay
&lt;span style="color:#f92672">from&lt;/span> scipy.misc &lt;span style="color:#f92672">import&lt;/span> imread, imresize
&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#f92672">as&lt;/span> np
&lt;span style="color:#f92672">import&lt;/span> keras
&lt;span style="color:#f92672">from&lt;/span> keras.models &lt;span style="color:#f92672">import&lt;/span> load_model
x &lt;span style="color:#f92672">=&lt;/span> imread(&lt;span style="color:#e6db74">&amp;#39;test3.png&amp;#39;&lt;/span>,mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;L&amp;#39;&lt;/span>)
&lt;span style="color:#75715e"># Compute a bit-wise inversion so black becomes white and vice versa&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>invert(x)
&lt;span style="color:#75715e"># Make it the right size&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> imresize(x,(&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>))
&lt;span style="color:#75715e"># Convert to a 4D tensor to feed into our model&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>reshape(&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>)
x &lt;span style="color:#f92672">=&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>astype(&lt;span style="color:#e6db74">&amp;#39;float32&amp;#39;&lt;/span>)
x &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>
&lt;span style="color:#75715e"># Load model from pre-trained file&lt;/span>
model &lt;span style="color:#f92672">=&lt;/span> load_model(&lt;span style="color:#e6db74">&amp;#39;cnn.h5&amp;#39;&lt;/span>)
&lt;span style="color:#75715e"># Compile with tvm&lt;/span>
shape_dict &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;input_1&amp;#39;&lt;/span>: (&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">28&lt;/span>, &lt;span style="color:#ae81ff">28&lt;/span>)}
func, params &lt;span style="color:#f92672">=&lt;/span> relay&lt;span style="color:#f92672">.&lt;/span>frontend&lt;span style="color:#f92672">.&lt;/span>from_keras(model, shape_dict)
target &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;llvm&amp;#34;&lt;/span>
ctx &lt;span style="color:#f92672">=&lt;/span> tvm&lt;span style="color:#f92672">.&lt;/span>cpu(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">with&lt;/span> relay&lt;span style="color:#f92672">.&lt;/span>build_config(opt_level&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>):
executor &lt;span style="color:#f92672">=&lt;/span> relay&lt;span style="color:#f92672">.&lt;/span>build_module&lt;span style="color:#f92672">.&lt;/span>create_executor(&lt;span style="color:#e6db74">&amp;#39;graph&amp;#39;&lt;/span>, func, ctx, target)
&lt;span style="color:#75715e"># Perform the prediction&lt;/span>
dtype &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;float32&amp;#39;&lt;/span>
tvm_out &lt;span style="color:#f92672">=&lt;/span> executor&lt;span style="color:#f92672">.&lt;/span>evaluate(func)(tvm&lt;span style="color:#f92672">.&lt;/span>nd&lt;span style="color:#f92672">.&lt;/span>array(x&lt;span style="color:#f92672">.&lt;/span>astype(dtype)), &lt;span style="color:#f92672">**&lt;/span>params)
&lt;span style="color:#66d9ef">print&lt;/span>(np&lt;span style="color:#f92672">.&lt;/span>argmax(tvm_out&lt;span style="color:#f92672">.&lt;/span>asnumpy()[&lt;span style="color:#ae81ff">0&lt;/span>]))
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python3 cnnPredict_tvm.py
In &lt;span style="color:#e6db74">`&lt;/span>main&lt;span style="color:#e6db74">`&lt;/span>:
v0.0.1
fn &lt;span style="color:#f92672">(&lt;/span>%conv2d_1_input, %v_param_1: Tensor&lt;span style="color:#f92672">[(&lt;/span>32, 1, 3, 3&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_2: Tensor&lt;span style="color:#f92672">[(&lt;/span>32,&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_3: Tensor&lt;span style="color:#f92672">[(&lt;/span>64, 32, 3, 3&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_4: Tensor&lt;span style="color:#f92672">[(&lt;/span>64,&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_5: Tensor&lt;span style="color:#f92672">[(&lt;/span>128, 9216&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_6: Tensor&lt;span style="color:#f92672">[(&lt;/span>128,&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_7: Tensor&lt;span style="color:#f92672">[(&lt;/span>10, 128&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_8: Tensor&lt;span style="color:#f92672">[(&lt;/span>10,&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
%0 &lt;span style="color:#f92672">=&lt;/span> nn.conv2d&lt;span style="color:#f92672">(&lt;/span>%conv2d_1_input, %v_param_1, channels&lt;span style="color:#f92672">=&lt;/span>32, kernel_size&lt;span style="color:#f92672">=[&lt;/span>3, 3&lt;span style="color:#f92672">])&lt;/span>
%1 &lt;span style="color:#f92672">=&lt;/span> nn.bias_add&lt;span style="color:#f92672">(&lt;/span>%0, %v_param_2&lt;span style="color:#f92672">)&lt;/span>
%2 &lt;span style="color:#f92672">=&lt;/span> nn.relu&lt;span style="color:#f92672">(&lt;/span>%1&lt;span style="color:#f92672">)&lt;/span>
%3 &lt;span style="color:#f92672">=&lt;/span> nn.conv2d&lt;span style="color:#f92672">(&lt;/span>%2, %v_param_3, channels&lt;span style="color:#f92672">=&lt;/span>64, kernel_size&lt;span style="color:#f92672">=[&lt;/span>3, 3&lt;span style="color:#f92672">])&lt;/span>
%4 &lt;span style="color:#f92672">=&lt;/span> nn.bias_add&lt;span style="color:#f92672">(&lt;/span>%3, %v_param_4&lt;span style="color:#f92672">)&lt;/span>
%5 &lt;span style="color:#f92672">=&lt;/span> nn.relu&lt;span style="color:#f92672">(&lt;/span>%4&lt;span style="color:#f92672">)&lt;/span>
%6 &lt;span style="color:#f92672">=&lt;/span> nn.max_pool2d&lt;span style="color:#f92672">(&lt;/span>%5, pool_size&lt;span style="color:#f92672">=[&lt;/span>2, 2&lt;span style="color:#f92672">]&lt;/span>, strides&lt;span style="color:#f92672">=[&lt;/span>2, 2&lt;span style="color:#f92672">])&lt;/span>an internal invariant was violated &lt;span style="color:#66d9ef">while&lt;/span> typechecking your program &lt;span style="color:#f92672">[&lt;/span>22:05:21&lt;span style="color:#f92672">]&lt;/span> tvm/src/relay/op/nn/pooling.cc:73: Check failed: data !&lt;span style="color:#f92672">=&lt;/span> nullptr:
;
%7 &lt;span style="color:#f92672">=&lt;/span> transpose&lt;span style="color:#f92672">(&lt;/span>%6, axes&lt;span style="color:#f92672">=[&lt;/span>0, 2, 3, 1&lt;span style="color:#f92672">])&lt;/span>
%8 &lt;span style="color:#f92672">=&lt;/span> nn.batch_flatten&lt;span style="color:#f92672">(&lt;/span>%7&lt;span style="color:#f92672">)&lt;/span>
%9 &lt;span style="color:#f92672">=&lt;/span> nn.dense&lt;span style="color:#f92672">(&lt;/span>%8, %v_param_5, units&lt;span style="color:#f92672">=&lt;/span>128&lt;span style="color:#f92672">)&lt;/span>
%10 &lt;span style="color:#f92672">=&lt;/span> nn.bias_add&lt;span style="color:#f92672">(&lt;/span>%9, %v_param_6&lt;span style="color:#f92672">)&lt;/span>
%11 &lt;span style="color:#f92672">=&lt;/span> nn.relu&lt;span style="color:#f92672">(&lt;/span>%10&lt;span style="color:#f92672">)&lt;/span>
%12 &lt;span style="color:#f92672">=&lt;/span> nn.dense&lt;span style="color:#f92672">(&lt;/span>%11, %v_param_7, units&lt;span style="color:#f92672">=&lt;/span>10&lt;span style="color:#f92672">)&lt;/span>
%13 &lt;span style="color:#f92672">=&lt;/span> nn.bias_add&lt;span style="color:#f92672">(&lt;/span>%12, %v_param_8&lt;span style="color:#f92672">)&lt;/span>
nn.softmax&lt;span style="color:#f92672">(&lt;/span>%13, axis&lt;span style="color:#f92672">=&lt;/span>1&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>扯，竟然不行＠＠，而且完全不知道錯哪，找了一些資料說是 shape 錯了，我試了各種排列組合也都不行&amp;hellip;.&lt;/p>
&lt;h2 id="只存-mnist-的權重">只存 MNIST 的權重&lt;/h2>
&lt;p>只好使用上面提到 Keras 官網 &lt;a href="https://keras.io/getting-started/faq/#how-can-i-save-a-keras-model">How can I save a Keras model?&lt;/a> 的方式只存權重出來，這裡我們只需要改最後一行，&lt;code>save&lt;/code> 改成 &lt;code>save_weights&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> keras
&lt;span style="color:#f92672">from&lt;/span> keras.datasets &lt;span style="color:#f92672">import&lt;/span> mnist
&lt;span style="color:#f92672">from&lt;/span> keras.models &lt;span style="color:#f92672">import&lt;/span> Sequential
&lt;span style="color:#f92672">from&lt;/span> keras.layers &lt;span style="color:#f92672">import&lt;/span> Dense, Dropout, Flatten
&lt;span style="color:#f92672">from&lt;/span> keras.layers &lt;span style="color:#f92672">import&lt;/span> Conv2D, MaxPooling2D
&lt;span style="color:#f92672">from&lt;/span> keras &lt;span style="color:#f92672">import&lt;/span> backend &lt;span style="color:#66d9ef">as&lt;/span> K
batch_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">128&lt;/span>
num_classes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
epochs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>
&lt;span style="color:#75715e"># input image dimensions&lt;/span>
img_rows, img_cols &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span>, &lt;span style="color:#ae81ff">28&lt;/span>
&lt;span style="color:#75715e"># the data, shuffled and split between train and test sets&lt;/span>
(x_train, y_train), (x_test, y_test) &lt;span style="color:#f92672">=&lt;/span> mnist&lt;span style="color:#f92672">.&lt;/span>load_data()
x_train &lt;span style="color:#f92672">=&lt;/span> x_train&lt;span style="color:#f92672">.&lt;/span>reshape(x_train&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">0&lt;/span>], img_rows, img_cols, &lt;span style="color:#ae81ff">1&lt;/span>)
x_test &lt;span style="color:#f92672">=&lt;/span> x_test&lt;span style="color:#f92672">.&lt;/span>reshape(x_test&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">0&lt;/span>], img_rows, img_cols, &lt;span style="color:#ae81ff">1&lt;/span>)
input_shape &lt;span style="color:#f92672">=&lt;/span> (img_rows, img_cols, &lt;span style="color:#ae81ff">1&lt;/span>)
x_train &lt;span style="color:#f92672">=&lt;/span> x_train&lt;span style="color:#f92672">.&lt;/span>astype(&lt;span style="color:#e6db74">&amp;#39;float32&amp;#39;&lt;/span>)
x_test &lt;span style="color:#f92672">=&lt;/span> x_test&lt;span style="color:#f92672">.&lt;/span>astype(&lt;span style="color:#e6db74">&amp;#39;float32&amp;#39;&lt;/span>)
x_train &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>
x_test &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;x_train shape:&amp;#39;&lt;/span>, x_train&lt;span style="color:#f92672">.&lt;/span>shape)
&lt;span style="color:#66d9ef">print&lt;/span>(x_train&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#e6db74">&amp;#39;train samples&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">print&lt;/span>(x_test&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#e6db74">&amp;#39;test samples&amp;#39;&lt;/span>)
&lt;span style="color:#75715e"># convert class vectors to binary class matrices&lt;/span>
y_train &lt;span style="color:#f92672">=&lt;/span> keras&lt;span style="color:#f92672">.&lt;/span>utils&lt;span style="color:#f92672">.&lt;/span>to_categorical(y_train, num_classes)
y_test &lt;span style="color:#f92672">=&lt;/span> keras&lt;span style="color:#f92672">.&lt;/span>utils&lt;span style="color:#f92672">.&lt;/span>to_categorical(y_test, num_classes)
model &lt;span style="color:#f92672">=&lt;/span> Sequential()
model&lt;span style="color:#f92672">.&lt;/span>add(Conv2D(&lt;span style="color:#ae81ff">32&lt;/span>, kernel_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>),
activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>,
input_shape&lt;span style="color:#f92672">=&lt;/span>input_shape))
model&lt;span style="color:#f92672">.&lt;/span>add(Conv2D(&lt;span style="color:#ae81ff">64&lt;/span>, (&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>), activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(MaxPooling2D(pool_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)))
model&lt;span style="color:#f92672">.&lt;/span>add(Dropout(&lt;span style="color:#ae81ff">0.25&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Flatten())
model&lt;span style="color:#f92672">.&lt;/span>add(Dense(&lt;span style="color:#ae81ff">128&lt;/span>, activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Dropout(&lt;span style="color:#ae81ff">0.5&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Dense(num_classes, activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;softmax&amp;#39;&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>compile(loss&lt;span style="color:#f92672">=&lt;/span>keras&lt;span style="color:#f92672">.&lt;/span>losses&lt;span style="color:#f92672">.&lt;/span>categorical_crossentropy,
optimizer&lt;span style="color:#f92672">=&lt;/span>keras&lt;span style="color:#f92672">.&lt;/span>optimizers&lt;span style="color:#f92672">.&lt;/span>Adadelta(),
metrics&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;accuracy&amp;#39;&lt;/span>])
model&lt;span style="color:#f92672">.&lt;/span>fit(x_train, y_train,
batch_size&lt;span style="color:#f92672">=&lt;/span>batch_size,
epochs&lt;span style="color:#f92672">=&lt;/span>epochs,
verbose&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,
validation_data&lt;span style="color:#f92672">=&lt;/span>(x_test, y_test))
score &lt;span style="color:#f92672">=&lt;/span> model&lt;span style="color:#f92672">.&lt;/span>evaluate(x_test, y_test, verbose&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Test loss:&amp;#39;&lt;/span>, score[&lt;span style="color:#ae81ff">0&lt;/span>])
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Test accuracy:&amp;#39;&lt;/span>, score[&lt;span style="color:#ae81ff">1&lt;/span>])
model&lt;span style="color:#f92672">.&lt;/span>save_weights(&lt;span style="color:#e6db74">&amp;#39;mnist_weights.h5&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>跑了頗久，不過跟其應該比 ImageNet 快很多了。結果如下圖。
&lt;img src="https://drive.google.com/open?id=1qSdoAYPCxNk5tlI0ELivCieDWCQO9IOV" alt="google-train a MNIST model with Keras">&lt;/p>
&lt;h2 id="自己用-keras-建構一個-mnist-再餵給-tvm">自己用 Keras 建構一個 MNIST 再餵給 TVM&lt;/h2>
&lt;p>把上面產生的權重餵給自己建構的模型&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> nnvm
&lt;span style="color:#f92672">import&lt;/span> tvm
&lt;span style="color:#f92672">import&lt;/span> tvm.relay &lt;span style="color:#f92672">as&lt;/span> relay
&lt;span style="color:#f92672">from&lt;/span> scipy.misc &lt;span style="color:#f92672">import&lt;/span> imread, imresize
&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#f92672">as&lt;/span> np
&lt;span style="color:#f92672">import&lt;/span> keras
&lt;span style="color:#f92672">from&lt;/span> keras.models &lt;span style="color:#f92672">import&lt;/span> load_model
&lt;span style="color:#f92672">from&lt;/span> keras.datasets &lt;span style="color:#f92672">import&lt;/span> mnist
&lt;span style="color:#f92672">from&lt;/span> keras.models &lt;span style="color:#f92672">import&lt;/span> Sequential
&lt;span style="color:#f92672">from&lt;/span> keras.layers &lt;span style="color:#f92672">import&lt;/span> Dense, Dropout, Flatten, InputLayer
&lt;span style="color:#f92672">from&lt;/span> keras.layers &lt;span style="color:#f92672">import&lt;/span> Conv2D, MaxPooling2D
num_classes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> imread(&lt;span style="color:#e6db74">&amp;#39;test3.png&amp;#39;&lt;/span>,mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;L&amp;#39;&lt;/span>)
&lt;span style="color:#75715e"># Compute a bit-wise inversion so black becomes white and vice versa&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>invert(x)
&lt;span style="color:#75715e"># Make it the right size&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> imresize(x,(&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>))
&lt;span style="color:#75715e"># Convert to a 4D tensor to feed into our model&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>reshape(&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>)
x &lt;span style="color:#f92672">=&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>astype(&lt;span style="color:#e6db74">&amp;#39;float32&amp;#39;&lt;/span>)
x &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>
&lt;span style="color:#75715e"># Construct a MNIST model&lt;/span>
model &lt;span style="color:#f92672">=&lt;/span> Sequential()
model&lt;span style="color:#f92672">.&lt;/span>add(Conv2D(&lt;span style="color:#ae81ff">32&lt;/span>, kernel_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>), activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>, input_shape&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>)))
model&lt;span style="color:#f92672">.&lt;/span>add(Conv2D(&lt;span style="color:#ae81ff">64&lt;/span>, kernel_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>), activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(MaxPooling2D(pool_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)))
model&lt;span style="color:#f92672">.&lt;/span>add(Dropout(&lt;span style="color:#ae81ff">0.25&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Flatten())
model&lt;span style="color:#f92672">.&lt;/span>add(Dense(&lt;span style="color:#ae81ff">128&lt;/span>, activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Dropout(&lt;span style="color:#ae81ff">0.5&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Dense(num_classes, activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;softmax&amp;#39;&lt;/span>))
&lt;span style="color:#75715e"># Load the weights that we get from last program&lt;/span>
model&lt;span style="color:#f92672">.&lt;/span>load_weights(&lt;span style="color:#e6db74">&amp;#39;mnist_weights.h5&amp;#39;&lt;/span>)
shape_dict &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;input_1&amp;#39;&lt;/span>: (&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">28&lt;/span>, &lt;span style="color:#ae81ff">28&lt;/span>)}
func, params &lt;span style="color:#f92672">=&lt;/span> relay&lt;span style="color:#f92672">.&lt;/span>frontend&lt;span style="color:#f92672">.&lt;/span>from_keras(model, shape_dict)
target &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;llvm&amp;#34;&lt;/span>
ctx &lt;span style="color:#f92672">=&lt;/span> tvm&lt;span style="color:#f92672">.&lt;/span>cpu(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">with&lt;/span> relay&lt;span style="color:#f92672">.&lt;/span>build_config(opt_level&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>):
executor &lt;span style="color:#f92672">=&lt;/span> relay&lt;span style="color:#f92672">.&lt;/span>build_module&lt;span style="color:#f92672">.&lt;/span>create_executor(&lt;span style="color:#e6db74">&amp;#39;graph&amp;#39;&lt;/span>, func, ctx, target)
&lt;span style="color:#75715e"># Perform the prediction&lt;/span>
dtype &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;float32&amp;#39;&lt;/span>
tvm_out &lt;span style="color:#f92672">=&lt;/span> executor&lt;span style="color:#f92672">.&lt;/span>evaluate(func)(tvm&lt;span style="color:#f92672">.&lt;/span>nd&lt;span style="color:#f92672">.&lt;/span>array(x&lt;span style="color:#f92672">.&lt;/span>astype(dtype)), &lt;span style="color:#f92672">**&lt;/span>params)
&lt;span style="color:#66d9ef">print&lt;/span>(np&lt;span style="color:#f92672">.&lt;/span>argmax(tvm_out&lt;span style="color:#f92672">.&lt;/span>asnumpy()[&lt;span style="color:#ae81ff">0&lt;/span>]))
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python3 cnnPredict_tvm.py
In &lt;span style="color:#e6db74">`&lt;/span>main&lt;span style="color:#e6db74">`&lt;/span>:
v0.0.1
fn &lt;span style="color:#f92672">(&lt;/span>%conv2d_1_input, %v_param_1: Tensor&lt;span style="color:#f92672">[(&lt;/span>32, 1, 3, 3&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_2: Tensor&lt;span style="color:#f92672">[(&lt;/span>32,&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_3: Tensor&lt;span style="color:#f92672">[(&lt;/span>64, 32, 3, 3&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_4: Tensor&lt;span style="color:#f92672">[(&lt;/span>64,&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_5: Tensor&lt;span style="color:#f92672">[(&lt;/span>128, 9216&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_6: Tensor&lt;span style="color:#f92672">[(&lt;/span>128,&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_7: Tensor&lt;span style="color:#f92672">[(&lt;/span>10, 128&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">]&lt;/span>, %v_param_8: Tensor&lt;span style="color:#f92672">[(&lt;/span>10,&lt;span style="color:#f92672">)&lt;/span>, float32&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
%0 &lt;span style="color:#f92672">=&lt;/span> nn.conv2d&lt;span style="color:#f92672">(&lt;/span>%conv2d_1_input, %v_param_1, channels&lt;span style="color:#f92672">=&lt;/span>32, kernel_size&lt;span style="color:#f92672">=[&lt;/span>3, 3&lt;span style="color:#f92672">])&lt;/span>
%1 &lt;span style="color:#f92672">=&lt;/span> nn.bias_add&lt;span style="color:#f92672">(&lt;/span>%0, %v_param_2&lt;span style="color:#f92672">)&lt;/span>
%2 &lt;span style="color:#f92672">=&lt;/span> nn.relu&lt;span style="color:#f92672">(&lt;/span>%1&lt;span style="color:#f92672">)&lt;/span>
%3 &lt;span style="color:#f92672">=&lt;/span> nn.conv2d&lt;span style="color:#f92672">(&lt;/span>%2, %v_param_3, channels&lt;span style="color:#f92672">=&lt;/span>64, kernel_size&lt;span style="color:#f92672">=[&lt;/span>3, 3&lt;span style="color:#f92672">])&lt;/span>
%4 &lt;span style="color:#f92672">=&lt;/span> nn.bias_add&lt;span style="color:#f92672">(&lt;/span>%3, %v_param_4&lt;span style="color:#f92672">)&lt;/span>
%5 &lt;span style="color:#f92672">=&lt;/span> nn.relu&lt;span style="color:#f92672">(&lt;/span>%4&lt;span style="color:#f92672">)&lt;/span>
%6 &lt;span style="color:#f92672">=&lt;/span> nn.max_pool2d&lt;span style="color:#f92672">(&lt;/span>%5, pool_size&lt;span style="color:#f92672">=[&lt;/span>2, 2&lt;span style="color:#f92672">]&lt;/span>, strides&lt;span style="color:#f92672">=[&lt;/span>2, 2&lt;span style="color:#f92672">])&lt;/span>an internal invariant was violated &lt;span style="color:#66d9ef">while&lt;/span> typechecking your program &lt;span style="color:#f92672">[&lt;/span>22:21:27&lt;span style="color:#f92672">]&lt;/span> tvm/src/relay/op/nn/pooling.cc:73: Check failed: data !&lt;span style="color:#f92672">=&lt;/span> nullptr:
;
%7 &lt;span style="color:#f92672">=&lt;/span> transpose&lt;span style="color:#f92672">(&lt;/span>%6, axes&lt;span style="color:#f92672">=[&lt;/span>0, 2, 3, 1&lt;span style="color:#f92672">])&lt;/span>
%8 &lt;span style="color:#f92672">=&lt;/span> nn.batch_flatten&lt;span style="color:#f92672">(&lt;/span>%7&lt;span style="color:#f92672">)&lt;/span>
%9 &lt;span style="color:#f92672">=&lt;/span> nn.dense&lt;span style="color:#f92672">(&lt;/span>%8, %v_param_5, units&lt;span style="color:#f92672">=&lt;/span>128&lt;span style="color:#f92672">)&lt;/span>
%10 &lt;span style="color:#f92672">=&lt;/span> nn.bias_add&lt;span style="color:#f92672">(&lt;/span>%9, %v_param_6&lt;span style="color:#f92672">)&lt;/span>
%11 &lt;span style="color:#f92672">=&lt;/span> nn.relu&lt;span style="color:#f92672">(&lt;/span>%10&lt;span style="color:#f92672">)&lt;/span>
%12 &lt;span style="color:#f92672">=&lt;/span> nn.dense&lt;span style="color:#f92672">(&lt;/span>%11, %v_param_7, units&lt;span style="color:#f92672">=&lt;/span>10&lt;span style="color:#f92672">)&lt;/span>
%13 &lt;span style="color:#f92672">=&lt;/span> nn.bias_add&lt;span style="color:#f92672">(&lt;/span>%12, %v_param_8&lt;span style="color:#f92672">)&lt;/span>
nn.softmax&lt;span style="color:#f92672">(&lt;/span>%13, axis&lt;span style="color:#f92672">=&lt;/span>1&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>扯，結果竟然一模一樣。&lt;/p>
&lt;h2 id="檢驗剛剛建立的模型是否正確">檢驗剛剛建立的模型是否正確&lt;/h2>
&lt;p>總之先試試看是不是跟直接讀 &lt;code>cnn.h5&lt;/code> 一樣。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> nnvm
&lt;span style="color:#f92672">import&lt;/span> tvm
&lt;span style="color:#f92672">import&lt;/span> tvm.relay &lt;span style="color:#f92672">as&lt;/span> relay
&lt;span style="color:#f92672">from&lt;/span> scipy.misc &lt;span style="color:#f92672">import&lt;/span> imread, imresize
&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#f92672">as&lt;/span> np
&lt;span style="color:#f92672">import&lt;/span> keras
&lt;span style="color:#f92672">from&lt;/span> keras.models &lt;span style="color:#f92672">import&lt;/span> load_model
&lt;span style="color:#f92672">from&lt;/span> keras.datasets &lt;span style="color:#f92672">import&lt;/span> mnist
&lt;span style="color:#f92672">from&lt;/span> keras.models &lt;span style="color:#f92672">import&lt;/span> Sequential
&lt;span style="color:#f92672">from&lt;/span> keras.layers &lt;span style="color:#f92672">import&lt;/span> Dense, Dropout, Flatten, InputLayer
&lt;span style="color:#f92672">from&lt;/span> keras.layers &lt;span style="color:#f92672">import&lt;/span> Conv2D, MaxPooling2D
num_classes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> imread(&lt;span style="color:#e6db74">&amp;#39;test3.png&amp;#39;&lt;/span>,mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;L&amp;#39;&lt;/span>)
&lt;span style="color:#75715e"># Compute a bit-wise inversion so black becomes white and vice versa&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>invert(x)
&lt;span style="color:#75715e"># Make it the right size&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> imresize(x,(&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>))
&lt;span style="color:#75715e"># Convert to a 4D tensor to feed into our model&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>reshape(&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>)
x &lt;span style="color:#f92672">=&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>astype(&lt;span style="color:#e6db74">&amp;#39;float32&amp;#39;&lt;/span>)
x &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>
&lt;span style="color:#75715e"># Construct a MNIST model&lt;/span>
model &lt;span style="color:#f92672">=&lt;/span> Sequential()
model&lt;span style="color:#f92672">.&lt;/span>add(Conv2D(&lt;span style="color:#ae81ff">32&lt;/span>, kernel_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>), activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>, input_shape&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>)))
model&lt;span style="color:#f92672">.&lt;/span>add(Conv2D(&lt;span style="color:#ae81ff">64&lt;/span>, kernel_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>), activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(MaxPooling2D(pool_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)))
model&lt;span style="color:#f92672">.&lt;/span>add(Dropout(&lt;span style="color:#ae81ff">0.25&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Flatten())
model&lt;span style="color:#f92672">.&lt;/span>add(Dense(&lt;span style="color:#ae81ff">128&lt;/span>, activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Dropout(&lt;span style="color:#ae81ff">0.5&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Dense(num_classes, activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;softmax&amp;#39;&lt;/span>))
&lt;span style="color:#75715e"># Load the weights that we get from last program&lt;/span>
model&lt;span style="color:#f92672">.&lt;/span>load_weights(&lt;span style="color:#e6db74">&amp;#39;mnist_weights.h5&amp;#39;&lt;/span>)
&lt;span style="color:#75715e"># Perform the prediction&lt;/span>
out &lt;span style="color:#f92672">=&lt;/span> model&lt;span style="color:#f92672">.&lt;/span>predict(x)
&lt;span style="color:#66d9ef">print&lt;/span>(np&lt;span style="color:#f92672">.&lt;/span>argmax(out))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>很好，是一樣&amp;hellip;.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python3 cnnPredict.py
&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="突破加個輸入層">突破，加個輸入層？&lt;/h2>
&lt;p>在找解決方式的過程中突然看到&lt;a href="https://stackoverflow.com/a/49600827/6734174">這裡&lt;/a>提到有 &lt;code>InputLayer&lt;/code>，不如加看看。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> nnvm
&lt;span style="color:#f92672">import&lt;/span> tvm
&lt;span style="color:#f92672">import&lt;/span> tvm.relay &lt;span style="color:#f92672">as&lt;/span> relay
&lt;span style="color:#f92672">from&lt;/span> scipy.misc &lt;span style="color:#f92672">import&lt;/span> imread, imresize
&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#f92672">as&lt;/span> np
&lt;span style="color:#f92672">import&lt;/span> keras
&lt;span style="color:#f92672">from&lt;/span> keras.models &lt;span style="color:#f92672">import&lt;/span> load_model
&lt;span style="color:#f92672">from&lt;/span> keras.datasets &lt;span style="color:#f92672">import&lt;/span> mnist
&lt;span style="color:#f92672">from&lt;/span> keras.models &lt;span style="color:#f92672">import&lt;/span> Sequential
&lt;span style="color:#f92672">from&lt;/span> keras.layers &lt;span style="color:#f92672">import&lt;/span> Dense, Dropout, Flatten, InputLayer
&lt;span style="color:#f92672">from&lt;/span> keras.layers &lt;span style="color:#f92672">import&lt;/span> Conv2D, MaxPooling2D
num_classes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
input_shape &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">28&lt;/span>, &lt;span style="color:#ae81ff">28&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
x &lt;span style="color:#f92672">=&lt;/span> imread(&lt;span style="color:#e6db74">&amp;#39;test3.png&amp;#39;&lt;/span>,mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;L&amp;#39;&lt;/span>)
&lt;span style="color:#75715e"># Compute a bit-wise inversion so black becomes white and vice versa&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>invert(x)
&lt;span style="color:#75715e"># Make it the right size&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> imresize(x,(&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>))
&lt;span style="color:#75715e"># Convert to a 4D tensor to feed into our model&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>reshape(&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">28&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>)
x &lt;span style="color:#f92672">=&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>astype(&lt;span style="color:#e6db74">&amp;#39;float32&amp;#39;&lt;/span>)
x &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>
&lt;span style="color:#75715e"># model = load_model(&amp;#39;cnn.h5&amp;#39;)&lt;/span>
&lt;span style="color:#75715e"># Construct a MNIST model&lt;/span>
model &lt;span style="color:#f92672">=&lt;/span> Sequential()
model&lt;span style="color:#f92672">.&lt;/span>add(InputLayer(input_shape&lt;span style="color:#f92672">=&lt;/span>input_shape))
model&lt;span style="color:#f92672">.&lt;/span>add(Conv2D(&lt;span style="color:#ae81ff">32&lt;/span>, kernel_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>), activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>, input_shape&lt;span style="color:#f92672">=&lt;/span>input_shape))
model&lt;span style="color:#f92672">.&lt;/span>add(Conv2D(&lt;span style="color:#ae81ff">64&lt;/span>, kernel_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>), activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(MaxPooling2D(pool_size&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)))
model&lt;span style="color:#f92672">.&lt;/span>add(Dropout(&lt;span style="color:#ae81ff">0.25&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Flatten())
model&lt;span style="color:#f92672">.&lt;/span>add(Dense(&lt;span style="color:#ae81ff">128&lt;/span>, activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Dropout(&lt;span style="color:#ae81ff">0.5&lt;/span>))
model&lt;span style="color:#f92672">.&lt;/span>add(Dense(num_classes, activation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;softmax&amp;#39;&lt;/span>))
&lt;span style="color:#75715e"># Load the weights that we get from last program&lt;/span>
model&lt;span style="color:#f92672">.&lt;/span>load_weights(&lt;span style="color:#e6db74">&amp;#39;mnist_weights.h5&amp;#39;&lt;/span>)
shape_dict &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;input_1&amp;#39;&lt;/span>: (&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">28&lt;/span>, &lt;span style="color:#ae81ff">28&lt;/span>)}
func, params &lt;span style="color:#f92672">=&lt;/span> relay&lt;span style="color:#f92672">.&lt;/span>frontend&lt;span style="color:#f92672">.&lt;/span>from_keras(model, shape_dict)
target &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;llvm&amp;#34;&lt;/span>
ctx &lt;span style="color:#f92672">=&lt;/span> tvm&lt;span style="color:#f92672">.&lt;/span>cpu(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">with&lt;/span> relay&lt;span style="color:#f92672">.&lt;/span>build_config(opt_level&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>):
executor &lt;span style="color:#f92672">=&lt;/span> relay&lt;span style="color:#f92672">.&lt;/span>build_module&lt;span style="color:#f92672">.&lt;/span>create_executor(&lt;span style="color:#e6db74">&amp;#39;graph&amp;#39;&lt;/span>, func, ctx, target)
&lt;span style="color:#75715e"># Pperform the prediction&lt;/span>
dtype &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;float32&amp;#39;&lt;/span>
tvm_out &lt;span style="color:#f92672">=&lt;/span> executor&lt;span style="color:#f92672">.&lt;/span>evaluate(func)(tvm&lt;span style="color:#f92672">.&lt;/span>nd&lt;span style="color:#f92672">.&lt;/span>array(x&lt;span style="color:#f92672">.&lt;/span>astype(dtype)), &lt;span style="color:#f92672">**&lt;/span>params)
&lt;span style="color:#66d9ef">print&lt;/span>(np&lt;span style="color:#f92672">.&lt;/span>argmax(tvm_out&lt;span style="color:#f92672">.&lt;/span>asnumpy()[&lt;span style="color:#ae81ff">0&lt;/span>]))
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python3 test_mnist.py
&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>扯，竟然過了 QuQ&lt;/p>
&lt;h1 id="其他">其他&lt;/h1>
&lt;h2 id="lutzroedernetronhttpsgithubcomlutzroedernetron">&lt;a href="https://github.com/lutzroeder/netron">&lt;code>lutzroeder/netron&lt;/code>&lt;/a>&lt;/h2>
&lt;p>發現了一個視覺化工具可以看模型。
&lt;img src="https://drive.google.com/open?id=18rjO-BiQTXRsSDAtisBkyEEhkO2sIBoP" alt="google-NETRON">&lt;/p>
&lt;h2 id="想看中間的-shape-的話">想看中間的 shape 的話&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">for&lt;/span> layer &lt;span style="color:#f92672">in&lt;/span> model&lt;span style="color:#f92672">.&lt;/span>layers:
&lt;span style="color:#66d9ef">print&lt;/span>(layer&lt;span style="color:#f92672">.&lt;/span>input_shape)
&lt;span style="color:#66d9ef">print&lt;/span>(layer&lt;span style="color:#f92672">.&lt;/span>input)
&lt;span style="color:#66d9ef">print&lt;/span>(layer&lt;span style="color:#f92672">.&lt;/span>output_shape)
&lt;span style="color:#66d9ef">print&lt;/span>(layer&lt;span style="color:#f92672">.&lt;/span>output)
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;---&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Github Flow (2)</title><link>https://aben20807.github.io/posts/20190421-github-flow-2/</link><pubDate>Sun, 21 Apr 2019 19:13:02 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190421-github-flow-2/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>針對昨天的再多釐清一些。順便補充一些東西。&lt;/p>
&lt;h1 id="關於流程">關於流程&lt;/h1>
&lt;p>昨天的流程主要是有需要 fork 的，通常是針對那些你無法對原始專案直接操作的狀況。&lt;/p>
&lt;p>如果對同一個專案使用 GitHub flow 也是可以的，也就是說在同一個專案中開啟 branch 在對自己開啟 PR，或許這就是我一開始有點困惑的原因，結果是都適用。&lt;/p>
&lt;h1 id="pr-被-merge-後呢">PR 被 merge 後呢&lt;/h1>
&lt;h2 id="更新-merge-commit">更新 merge commit&lt;/h2>
&lt;p>接下來要做的就是更新一下自己的 master (origin 跟 local)。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git fetch upstream
$ git checkout master
$ git merge upstream/master
$ git push origin master
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="刪除-branch">刪除 branch&lt;/h2>
&lt;p>GitHub 上在被 merge 的 PR 的界面會出現可以刪除 branch 的按鈕。
&lt;img src="https://drive.google.com/open?id=1MM_kFgO6PWBnPRPp9Ry3BgX4Lf6j2U3i" alt="google- ">&lt;/p>
&lt;p>刪除完成後會出現提示，貌似還可以復原呢。這個步驟後你帳號遠端上的那個 branch 就不見了。
&lt;img src="https://drive.google.com/open?id=1Q39-VcdZ36CqtvOh0NCu1Ix35JxwuzaQ" alt="google- ">&lt;/p>
&lt;p>再來是更新到本地端。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># 列出本地端的分支 (加上遠端記錄)&lt;/span>
$ git branch -a
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://drive.google.com/open?id=1QifWjcp6goVP329L8aBoeV98yVze_XAc" alt="google- ">&lt;/p>
&lt;p>刪除遠端記錄&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># 模擬遠端可刪除分支&lt;/span>
$ git remote prune origin --dry-run
&lt;span style="color:#75715e"># 執行刪除&lt;/span>
$ git remote prune origin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://drive.google.com/open?id=1w1LtPh3fYn6s2EO21yof6Xh8T60Gw-Zc" alt="google- ">
&lt;img src="https://drive.google.com/open?id=1MdDsIHfyFUX9hAmorRbWYmg8tv0HYtO0" alt="google- ">&lt;/p>
&lt;p>刪除本地分支後就大功告成&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git branch -d new_feature
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="參考">參考&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://www.fizerkhan.com/blog/posts/Clean-up-your-local-branches-after-merge-and-delete-in-GitHub.html">Clean up your local branches after merge and delete in GitHub&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Github Flow</title><link>https://aben20807.github.io/posts/20190420-github-flow/</link><pubDate>Sat, 20 Apr 2019 21:04:32 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190420-github-flow/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>最近算是真的在用多人合作的 git 了，以前大多只有自己在 add, commit, push。不過到多人的合作下就講求流程，這裡以 GitHub flow 為主要的流程做討論以及順便記錄一些會用到的指令。&lt;/p>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>其實是看了 &lt;a href="https://guides.github.com/introduction/flow/">Understanding the GitHub flow&lt;/a> 之後還不是相當懂，跟同學(大神)討論了一下算是有釐清一些我的懷疑吧。&lt;/p>
&lt;p>p.s. 這裡有翻譯版：&lt;a href="https://medium.com/@trylovetom/%E8%AE%93%E6%88%91%E5%80%91%E4%BE%86%E4%BA%86%E8%A7%A3-github-flow-%E5%90%A7-4144caf1f1bf">讓我們來了解 GitHub Flow 吧！&lt;/a>&lt;/p>
&lt;p>&amp;lt;注意&amp;gt; 因為目前專案還不算大型，所以目前遇到的狀況算是比較簡易的。
&amp;lt;注意&amp;gt; 由於我也是初心者，如果我有誤解的話請跟我說，感激不盡。&lt;/p>
&lt;h1 id="github-flow">GitHub flow&lt;/h1>
&lt;p>這個流程，主要是去掉 Git flow 有兩條主線的麻煩。不過誰比較好，還是得看用途，更有 GitLab flow 是合併兩個來用的＠＠&lt;/p>
&lt;blockquote>
&lt;p>GitHub flow 只專注在 master 身上，從 master 上開啟 feature branch，在該 branch 上開發(會有一些 commit)，最後在透過 PR(pull request) 合併到 master。&lt;/p>
&lt;/blockquote>
&lt;p>上面這句看似簡單，其實相當複雜，我盡量詳盡解釋。&lt;/p>
&lt;p>更清楚的解釋應該為：&lt;/p>
&lt;blockquote>
&lt;p>從主要專案(upstream) fork 一份到自己的帳號(origin)，修改 origin，從 origin/master 新增分支，開發完後將分支 push 到 origin/新分支 上後直接用新分支對 upstream/master 開啟 PR。&lt;/p>
&lt;/blockquote>
&lt;h1 id="fork-and-pr">Fork and PR&lt;/h1>
&lt;p>首先，PR 可以達到討論及 code review 的效果，為了達到 PR 我們必須把主專案 fork 一份到自己的帳號。而 PR 的方式主要就是透過 GitHub 網頁提供的界面進行操作。&lt;/p>
&lt;p>不過，我試了一下，發現同一個 repo 還是可以透過 branch 發 PR 的，這我就有點不確定為何一定要 fork，或許 fork 是不一定，不過更改自己的 repo 會比較心安一點，尤其若是常使用&amp;hellip;.
&lt;img src="https://drive.google.com/open?id=1poKsFmBeJ650xMa6OtgxMUGNE8NYo8fy" alt="google- ">&lt;/p>
&lt;h1 id="branch">Branch&lt;/h1>
&lt;p>Branch 在 git 中花費相當少，因為它就只是一個標籤，所以應該盡量使用它。GitHub flow 中保證 master 上的每一個版本都是可佈署的，因此在此流程中不建議直接在 master 上加 commit 而是在 master 上開一個 branch 出來。&lt;/p>
&lt;p>&amp;lt;注意&amp;gt; 一定要從 master 開 branch
但是又有一個特例：就是當別人還沒 merge 我的 PR 可是我接下來的開發又需要有這個 PR 的內容的時候。網路上我找到有人問這個問題 &lt;a href="https://softwareengineering.stackexchange.com/questions/310427/in-github-flow-is-it-ok-to-base-feature-branch-on-another-feature-branch">傳送門&lt;/a>，好像就只能在 branch 分出另一個 branch 來先暫時用。&lt;/p>
&lt;h1 id="流程">流程&lt;/h1>
&lt;h2 id="初始化">初始化&lt;/h2>
&lt;ol>
&lt;li>Fork 主要專案到自己的 GitHub 帳號&lt;/li>
&lt;li>Clone 自己 GitHub 中的專案 (fork 過來的)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone &amp;lt;自己專案的 url&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>設定 upstream 來源&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git remote add upstream &amp;lt;主要專案的 url&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="開發中">開發中&lt;/h2>
&lt;ol>
&lt;li>前往 master 分支 (一開始就在 master 可以不用)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git checkout master
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>新增並前往 feature 分支&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git checkout -b new_feature
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>開始開發功能&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git add XXX
$ git commit
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>push 到自己帳號的專案 (3. 4. 可以混用，push 完後一樣可以 commit 再 push)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git push origin new_feature
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>準備發起 PR，先把專案更新到最新，也就是把 upstream 的東西更新到自己本地端&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git checkout master
$ git fetch upstream
$ git merge upstream/master
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>回到 feature 分支把 master 中從 upstream 來的新 commit 更新回 feature branch&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git checkout new_feature
$ git rebase master
$ git push origin new_feature
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>發 PR
開啟 GitHub 界面，按下 Create pull request 的綠色按鈕，注意方向，輸入標題、解說文字、新增 reviewer 後按下 Create。這樣就大公告成了。&lt;/li>
&lt;/ol>
&lt;h1 id="參考資料">參考資料&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@yengttt/%E9%96%8B%E7%99%BC%E7%94%A8%E5%88%B0%E7%9A%84git%E6%B5%81%E7%A8%8B-c9082b914974">這次專案用到的Git流程&lt;/a>：本篇主要流程來自這裡，更詳盡請點擊參考。&lt;/li>
&lt;li>&lt;a href="https://poychang.github.io/guide-to-use-github-flow/">如何使用 GitHub Flow 來參與開源專案&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>不同路徑之 Git Patch</title><link>https://aben20807.github.io/posts/20190403-git-patch-different-directory/</link><pubDate>Wed, 03 Apr 2019 16:50:28 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190403-git-patch-different-directory/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>最近也算常用 git，不過有些特殊的功能都沒用過，這次也不算是學學看，而是真的要用到了，總之就是還個技術債順便記錄。不過會用到這個情境的應該算是少數。&lt;/p>
&lt;h1 id="tldr">tl;dr&lt;/h1>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git format-patch --relative &amp;lt;SHA&amp;gt; ./ -o /tmp/patches
$ git am /tmp/patches/*.patch
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>git 有一個好用的工具可以針對 repo 上面的 commit 產生補丁檔 (patch)。詳細用法可以去查看官方說明文件 &lt;a href="https://git-scm.com/docs/git-format-patch">git format-patch&lt;/a>。&lt;/p>
&lt;p>這裡主要記錄一個使用情境：要把專案A 下的子專案a 的修改記錄做成 patch 給專案B 使用，注意，專案a 與專案B 是同一個專案。&lt;/p>
&lt;p>會有這樣需求主要是因為 B 是開源專案，然後我們拿來修改後變成 A 的子專案。當然最好的方式是用 fork，然後利用 submodule 管理，不過因為只有一個 repo 可以使用，所以就採用這個作法。&lt;/p>
&lt;p>限制：內部檔案名稱要相同&lt;/p>
&lt;h1 id="範例檔案架構">範例檔案架構&lt;/h1>
&lt;p>接下來利用簡單的範例來模擬。&lt;/p>
&lt;p>&lt;code>repo A&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">A
├── a
│   └── file_1.txt
└── sth_in_A.txt
* a257187 - &lt;span style="color:#f92672">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#f92672">)&lt;/span> Add sth in A
* a1f4b9e - init
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>repo B&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">B
└── file_1.txt
* 63998ea - &lt;span style="color:#f92672">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#f92672">)&lt;/span> init
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接著進行一些修改 (記得用 git 去追蹤修改記錄)&lt;/p>
&lt;p>我們測試一些不同的行為，可以從下方 commit message 看出，同時修改(&lt;code>eb948ee&lt;/code>)也可以喔&lt;/p>
&lt;p>大概像是這樣&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">A
├── a
│   ├── file_1.txt
│   └── file_2.txt
└── sth_in_A.txt
* 0f5c75e - &lt;span style="color:#f92672">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#f92672">)&lt;/span> Add file_2 in a
* eb948ee - Modify file_1 and sth_in_A.txt
* 26bde10 - Modify sth_in_A.txt
* b551578 - Modify file_1
* a257187 - Add sth in A
* a1f4b9e - init
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="產生-patch">產生 patch&lt;/h1>
&lt;p>開始產生 patch 囉，首先 &lt;code>cd&lt;/code> 到子資料夾，接著打入下方指令，&lt;code>a1f4b9e&lt;/code> 是起始 commit，如果這個子專案是從中間才開始追蹤的話也可以從中間的 commit 開始。可以看到它只會針對 a 中有修改的部份才產生 patch 檔。&lt;code>-o&lt;/code> 是指定輸出的路徑，完全可以依照自己喜好修改。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cd A/a/
$ git format-patch --relative a1f4b9e ./ -o /tmp/patches
/tmp/patches/0001-Modify-file_1.patch
/tmp/patches/0002-Modify-file_1-and-sth_in_A.txt.patch
/tmp/patches/0003-Add-file_2-in-a.patch
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="套用-patch">套用 patch&lt;/h1>
&lt;p>套用 patch 到專案B&lt;/p>
&lt;pre>&lt;code class="language-bach" data-lang="bach">$ cd B/
$ git am /tmp/patches/*.patch
Applying: Modify file_1
Applying: Modify file_1 and sth_in_A.txt
Applying: Add file_2 in a
&lt;/code>&lt;/pre>&lt;p>最後可以看到它把所有的 commit 都一一重現&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">B
├── file_1.txt
└── file_2.txt
* e28e672 - &lt;span style="color:#f92672">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#f92672">)&lt;/span> Add file_2 in a
* 24d4693 - Modify file_1 and sth_in_A.txt
* 96d0b8c - Modify file_1
* 63998ea - init
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Makefile Help Message</title><link>https://aben20807.github.io/posts/20190402-makefile-help-message/</link><pubDate>Tue, 02 Apr 2019 09:06:15 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190402-makefile-help-message/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>最近蠻常用 Makefile 的，想說寫一個 help 選項，這樣就不用要使用時都要打開 Makefile 看怎麼用，意外查到可以使用小技巧來印出 help。達到註解及文件的效果。&lt;/p>
&lt;p>原本可能在寫完所有 rule 後要再加一個 &lt;code>help&lt;/code> 來寫準備印出來給使用者的內容。如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#a6e22e">action1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Do action 1.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> @printf &lt;span style="color:#e6db74">&amp;#34;Doing action 1...&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">action2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Do action 2.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> @printf &lt;span style="color:#e6db74">&amp;#34;Doing action 2...&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">help&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Show help message.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> @printf &lt;span style="color:#e6db74">&amp;#34;Usage:\n&amp;#34;&lt;/span>
@printf &lt;span style="color:#e6db74">&amp;#34; make &amp;lt;target&amp;gt;\n\n&amp;#34;&lt;/span>
@printf &lt;span style="color:#e6db74">&amp;#34;Targets:\n&amp;#34;&lt;/span>
@printf &lt;span style="color:#e6db74">&amp;#34; action1\tDo action 1.\n&amp;#34;&lt;/span>
@printf &lt;span style="color:#e6db74">&amp;#34; action2\tDo action 2.\n&amp;#34;&lt;/span>
@printf &lt;span style="color:#e6db74">&amp;#34; help\t\tShow help message.\n&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://drive.google.com/open?id=1IwQiOPfxIXVfPhZ76N7UX497HuZ-lA3m" alt="google-結果">&lt;/p>
&lt;p>這種方式在數量一多下會很麻煩，尤其是要不斷確認上面是否有被更動。所以找到許多人針對每個 target 的註解去產生 help 資訊。這裡使用 perl 跟 awk 幫忙。&lt;/p>
&lt;p>下方印出的結果同上就不貼圖片了。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#a6e22e">action1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Do action 1.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> @printf &lt;span style="color:#e6db74">&amp;#34;Doing action 1...&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">action2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Do action 2.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> @printf &lt;span style="color:#e6db74">&amp;#34;Doing action 2...&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">help&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Show help message.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> @printf &lt;span style="color:#e6db74">&amp;#34;Usage:\n&amp;#34;&lt;/span>
@printf &lt;span style="color:#e6db74">&amp;#34; make &amp;lt;target&amp;gt;\n\n&amp;#34;&lt;/span>
@printf &lt;span style="color:#e6db74">&amp;#34;Targets:\n&amp;#34;&lt;/span>
@perl -nle&lt;span style="color:#e6db74">&amp;#39;print $&amp;amp; if m{^[a-zA-Z0-9_-]+:.*?## .*$$}&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>MAKEFILE_LIST&lt;span style="color:#66d9ef">)&lt;/span> | &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> sort | &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> awk &lt;span style="color:#e6db74">&amp;#39;BEGIN {FS = &amp;#34;:.*?## &amp;#34;}; \
&lt;/span>&lt;span style="color:#e6db74"> {printf &amp;#34; %-18s %s\n&amp;#34;, $$1, $$2}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>稍微解釋一下 perl 那一行&lt;/p>
&lt;p>首先就是先使用 regexp 去 match 符合的表達式，&lt;code>^[a-zA-Z0-9_-]+:.*?## .*$$&lt;/code> 表示由一個單字(可能含數字)開頭 &lt;code>:&lt;/code> 後方是相依的部份，最後是用 &lt;code>##&lt;/code> 註解的描述。&lt;/p>
&lt;p>接著利用 pipe (&lt;code>|&lt;/code>) 給 awk，它可以針對欄 (column) 去操作文字，&lt;code>BEGIN&lt;/code> 區塊表示初始化宣告，也就是輸入的字串是用 &lt;code>##&lt;/code> 當作分割符號，最後利用 &lt;code>printf()&lt;/code> 去把第一欄及第二欄印出來。&lt;/p>
&lt;p>最後最後，加上點顏色頗不錯 OuO&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#75715e"># color
&lt;/span>&lt;span style="color:#75715e">&lt;/span>BLUE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">\0&lt;/span>33&lt;span style="color:#f92672">[&lt;/span>34m
NC &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">\0&lt;/span>33&lt;span style="color:#f92672">[&lt;/span>0m
&lt;span style="color:#a6e22e">action1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Do action 1.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> @printf &lt;span style="color:#e6db74">&amp;#34;Doing action 1...&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">action2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Do action 2.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> @printf &lt;span style="color:#e6db74">&amp;#34;Doing action 2...&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">help&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Show help message.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> @printf &lt;span style="color:#e6db74">&amp;#34;Usage:\n&amp;#34;&lt;/span>
@printf &lt;span style="color:#e6db74">&amp;#34; make &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>BLUE&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;lt;target&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>NC&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">\n\n&amp;#34;&lt;/span>
@printf &lt;span style="color:#e6db74">&amp;#34;Targets:\n&amp;#34;&lt;/span>
@perl -nle&lt;span style="color:#e6db74">&amp;#39;print $&amp;amp; if m{^[a-zA-Z0-9_-]+:.*?## .*$$}&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>MAKEFILE_LIST&lt;span style="color:#66d9ef">)&lt;/span> | &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> sort | &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> awk &lt;span style="color:#e6db74">&amp;#39;BEGIN {FS = &amp;#34;:.*?## &amp;#34;}; \
&lt;/span>&lt;span style="color:#e6db74"> {printf &amp;#34;$(BLUE) %-18s$(NC) %s\n&amp;#34;, $$1, $$2}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://drive.google.com/open?id=1RTn1OcTBserVT9XOFhDRSFA2f3Lx1R-G" alt="google-有顏色版本">&lt;/p>
&lt;h3 id="參考資料">參考資料&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://nedbatchelder.com/blog/201804/makefile_help_target.html">Makefile help target&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>First Met Hugo</title><link>https://aben20807.github.io/posts/20190321-first-met-hugo/</link><pubDate>Thu, 21 Mar 2019 22:20:12 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190321-first-met-hugo/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>正常轉換跑道時都會有一篇推坑文，不過我這篇算比較晚了，也不是為了摸久一點，就感覺好像一直沒啥時間寫文章。&lt;br>
就請多見諒＠＠&lt;/p>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>從 Blogger 轉出來的原因可以去關於的頁面看看，我就不再贅述，此篇主要也不會手把手的教學如何用 Hugo 從頭到尾架設一個網頁，因為網路上有相當多這類的教學，我主要是記錄一些比較特別地方。接著跟我唸三遍：&lt;/p>
&lt;blockquote>
&lt;p>前端坑好深，前端坑好深，前端坑好深&lt;/p>
&lt;/blockquote>
&lt;h1 id="安裝">安裝&lt;/h1>
&lt;p>說不教好像也有點無情，不過在 GitHub 架 Hugo 真的太過簡單了，步驟真的算少，所以我就推給其他文章吧(可以先看完整篇再開始)：&lt;a href="https://medium.com/@chs_wei/%E5%9C%A8-github-%E9%83%A8%E7%BD%B2-hugo-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-9c40682dfe40">在 GitHub 部署 Hugo 靜態網站&lt;/a>&lt;/p>
&lt;h1 id="安裝---注意事項">安裝 - 注意事項&lt;/h1>
&lt;p>Ubuntu 請用 &lt;code>snap&lt;/code> 來安裝比較新的版本，用 &lt;code>apt&lt;/code> 會發現一堆主題不能用因為版本過舊。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo snap install hugo
$ hugo version
Hugo Static Site Generator v0.54.0 linux/amd64 BuildDate: 2019-02-01T13:33:06Z
&lt;/code>&lt;/pre>&lt;/div>&lt;p>結果注意事項就把 Hugo 全部安裝完成了＠＠，部屬在 GitHub 就跟大部分用法相同。&lt;/p>
&lt;h1 id="部落格架構配置">部落格架構配置&lt;/h1>
&lt;p>因為 Hugo 會針對主題和文章經過 &lt;code>hugo&lt;/code> 指令去產生一個完整的網站並預設放在 &lt;code>public/&lt;/code> 資料夾。所以一般會把寫文章的地方跟網站分成兩個 repo，也就是把 &lt;code>public/&lt;/code> push 到 &lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code>，寫文章的就創建另一個 &lt;code>blog-post&lt;/code> 之類的 repo。這個作法可以使得網站不會被污染，也就是不會有奇怪的檔案，repo 也不會好像各種語言都有。&lt;/p>
&lt;p>但是，一般上面這種是會把主題的檔案都複製到你寫文章的 repo 裡這樣就可以自訂一些前端設計。&lt;/p>
&lt;p>我覺得這樣還不夠乾淨！因此我的方式是使用三個 repo：&lt;/p>
&lt;ul>
&lt;li>blog-post：存文章&lt;/li>
&lt;li>hugOuO：主題&lt;/li>
&lt;li>aben20807.github.io：發布網站&lt;/li>
&lt;/ul>
&lt;p>沒錯，多一個 repo 追蹤主題，由於 Hugo 會自動的搜尋一些資料夾找尋網站設定，在一開始的資料夾找不到時，會根據 &lt;code>config.toml&lt;/code> 中設定的主題去 &lt;code>themes/&lt;/code> 找對應的主題，所以一開始的資料夾就不要有任何前端的檔案，除非像是 google analytics 需要放置規定的檔案，不然所有的前端設計 (架構, css, javascript) 都放在主題的 repo 中。當然這是給那些會修改別人主題的人的建議，如果是直接用現成的那就不需要多一個 repo 了。&lt;/p>
&lt;p>以下是一個簡單的檔案結構：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">blog-post/ &amp;lt;----------------------- repo 1: 存文章
├── config.toml
├── content
│   ├── about
│   ├── _index.md
│   └── posts/ &amp;lt;------------------- 文章會在這裡
├── themes/
│   └── hugOuO/ &amp;lt;------------------ repo 2: 主題
│      ├── archetypes/
│      │   ├── default.md
│      │   └── posts.md
│      ├── layouts/
│      │   ├── 404.html
│      │   ├── _default/
│      │   ├── index.html
│      │   ├── index.json
│      │   ├── index.rss.xml
│      │   ├── partials/
│      │   └── shortcodes/
│      ├── static/
│      │   ├── css/
│      │   ├── img/
│      │   └── js/
│      └── theme.toml
└── public/ &amp;lt;---------------------- repo 3: 發布網站
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="這樣安排的缺點">這樣安排的缺點&lt;/h2>
&lt;p>這麼多 repo 就是一個蠻大的缺點，不過若是非常在意的話可以利用 branch 來讓三個 repo 合併。&lt;br>
但是這個缺點有一個優點 (?)，就是可以刷 GitHub 的 contributions 啊！每次寫文章改一堆東西就會綠一片OuO&lt;/p>
&lt;h2 id="其他">其他&lt;/h2>
&lt;p>當然也可以利用 GitHub 和其他工具達到持續集成、部署，參考：&lt;a href="https://axdlog.com/zh/2018/using-hugo-and-travis-ci-to-deploy-blog-to-github-pages-automatically/">利用Travis CI和Hugo將Blog自動部署到Github Pages&lt;/a>。不過我是有點點懶惰，所以我就用 &lt;a href="https://github.com/aben20807/blog-post/blob/master/deploy.sh">script&lt;/a> 來部屬。&lt;/p>
&lt;p>還有 &lt;code>blog-post&lt;/code> repo 可以用 &lt;code>.gitattributes&lt;/code> 來讓 GitHub 把 markdown 當作一個語言來計算，&lt;a href="https://github.com/aben20807/blog-post/blob/master/.gitattributes">傳送門&lt;/a>。
&lt;img src="https://drive.google.com/open?id=1L-bAODhj57C7wFIBaWTgZuY0Sp0bEQFJ" alt="google-結果展示">&lt;/p>
&lt;h1 id="圖片">圖片&lt;/h1>
&lt;p>通常架設在 GitHub 的靜態網站都會直接把圖片也傳到 repo 中，雖然說這樣會比較快而且方便，但是我不建議用 git 去追蹤圖片，到最後會非常肥大。所以我一開始就有想說用 google 雲端當作一個圖床 (Flickr 1TB 回來啊QuQ)，反正有學校帳號算是有無限空間吧 (還是當學生的小福利＠＠)，再加上 google 圖片可以無限上傳，我手機拍照的圖片都會自動上傳了，然後也可以跟雲端連結，也就是說在 google 雲端透過檔案存取到 google 圖片的檔案。不過因為它的 api 還不是說很好用，就是雲端右鍵拿到的連結是不能直接嵌入網頁的，所以要手動複製 id，我覺得頗麻煩就乾脆寫一個可以偵測是否在 markdown 使用 google 雲端的圖片，然後把它轉成對應的 url 同時提供點擊就可以直接連過去，這樣就可以放大檢視了。&lt;/p>
&lt;p>作法就是我的文章若要用到 google 雲端的圖片就要用以下語法：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">![&lt;span style="color:#f92672">google-標題&lt;/span>](&lt;span style="color:#a6e22e">從雲端裡面右鍵拿到的分享連結&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>沒意外這篇文章內文都是用這個方式加圖片的，唯一缺點就是明顯慢很多＠＠，雖然慢會影響 SEO，不過算了，就會看的人就會來看吧。說到這個，流量很明顯跟 Blogger 時期差很多＠＠，實做&lt;a href="https://github.com/aben20807/hugOuO/blob/master/layouts/partials/custom-content.html#L5-L23">傳送門&lt;/a>。&lt;/p>
&lt;h1 id="文章">文章&lt;/h1>
&lt;p>對於文章，我建議可以用日期當作檔名的前綴，以便排序。我的主題就會自動切割日期。Hugo 也有 permalinks 功能，就是把日期當作網站的路徑，不過我懶得用了＠＠&lt;/p>
&lt;h1 id="優點啦">優點啦&lt;/h1>
&lt;ul>
&lt;li>單一執行檔，只需要安裝 hugo，其他什麼 ruby, python, node 都不用。&lt;/li>
&lt;li>建制快速，號稱目前地表最快，尤其當網站一多，目前有找到跟 Jekyll 的比較&lt;a href="https://forestry.io/blog/hugo-vs-jekyll-benchmark/">傳送門&lt;/a>，跟 Hexo 的可能還要找一下。&lt;/li>
&lt;li>網站內容乾淨，也就是上面的缺點啦，我是覺得這是優點 OuO，分多個 repo 不是很好嗎。&lt;/li>
&lt;/ul>
&lt;h1 id="有趣的功能">有趣的功能&lt;/h1>
&lt;p>下面這些功能其實不限於 Hugo，只要有想要其實都可以把它加到自己的網站，甚至是從頭自己刻的也可。不要忘了開頭念三次的東西 OuO&lt;/p>
&lt;h2 id="1-搜尋">1. 搜尋&lt;/h2>
&lt;p>由於之前 Blogger 算是內建搜尋的，所以這裡算是研究頗久，原本要使用一些已經做成套件的切字工具，但是中文字真的太難搞定了，所以我乾脆直接用 google 提供的搜尋：Google Custom Search。一樣，這裡就不一一教學，請移駕：&lt;a href="https://blog.yowko.com/google-search-in-hugo/">將 Google自訂搜尋引擎 (Google Custom Search) 搭配 OpenSearch 加至 Hugo 網站中&lt;/a>。真的要參考實做的話可以來這個 &lt;a href="https://github.com/aben20807/blog-post/commit/6f6b62898791322876091d4db98d580b8a7accdc#diff-44f0b83d58ef03d7cee156de462be50c">commit&lt;/a> 看看。對了，設定完後要等個幾天才會可以搜尋，我那時候以為我哪裡設定錯誤，結果等個幾天就可以用了。結果可以到這個&lt;a href="https://aben20807.github.io/search/">頁面&lt;/a>查看。
&lt;img src="https://drive.google.com/open?id=1YD4461mDTtn7MHssUOQxorRAiqkhRiVh" alt="google-搜尋範例">&lt;/p>
&lt;h2 id="2-toc-table-of-content">2. TOC (Table Of Content)&lt;/h2>
&lt;p>Hugo 算有提供 toc 工具，但是用起來沒這麼好看，例如它無法設定深度，不管幾層就都會做成 toc 也就是 h1~6 都有，造成空間浪費。這裡我也是弄超級久，最後我是參考 &lt;a href="https://orianna-zzo.github.io/sci-tech/2018-08/blog%E5%85%BB%E6%88%90%E8%AE%B016-%E8%87%AA%E5%BB%BAhugo%E7%9A%84toc%E6%A8%A1%E6%9D%BF/#/hugo%E7%9A%84table-of-content">AllinOne&lt;/a> 這個主題的實做方式：&lt;a href="https://github.com/orianna-zzo/AllinOne/blob/master/layouts/partials/toc.html">toc.html&lt;/a>。&lt;/p>
&lt;h2 id="3-headline-hash">3. Headline Hash&lt;/h2>
&lt;p>也就是滑鼠移到標題會出現一個 anchor 可以產生直接跳到這個標題的連結，直接參考：&lt;a href="https://discourse.gohugo.io/t/adding-anchor-next-to-headers/1726">Adding anchor next to headers&lt;/a>。&lt;/p>
&lt;h2 id="4-smooth-scroll">4. Smooth Scroll&lt;/h2>
&lt;p>這個可以讓移動有滾動的動畫而不是直接跳到那邊，我是使用 &lt;code>jquery.smooth-scroll.min.js&lt;/code> 來達成，請參考這個 &lt;a href="https://github.com/aben20807/blog-post/commit/68fa52f8d25c90d003fec296081427d12c6724cf#diff-0aa74fe7c8cd2a2b79dab67ece16cb02">commit&lt;/a>。&lt;/p>
&lt;h2 id="5-scrollspy">5. Scrollspy&lt;/h2>
&lt;p>讓右邊的 toc 自動標記現在所在的標題位置，我是從 &lt;a href="https://stackoverflow.com/questions/30348314/how-to-use-scrollspy-without-using-bootstrap/49257431#49257431">how to use scrollspy without using bootstrap 的其中一個回答&lt;/a> 改成這個 &lt;a href="https://github.com/aben20807/blog-post/commit/94b0b7344de07858b4ed346bc76b30caafa71220#comments">commit&lt;/a>&lt;/p>
&lt;p>2.3.4.5. 合起來差不多就是這樣：
&lt;img src="https://drive.google.com/open?id=1Ent_uFFd1IuKhGna9hZ2uEBZ1cjoHw63" alt="google- ">&lt;/p>
&lt;h2 id="6-自動換標題-ouo">6. 自動換標題 OuO&lt;/h2>
&lt;p>這算是一個有趣但是沒啥實用性的功能，我是在 &lt;a href="https://diygod.me/">https://diygod.me/&lt;/a> 看到的，當你暫時離開去其他分頁時，它的標題就會變換。建議不要在手機上用這個功能。參考：&lt;a href="https://blog.youdivi.com/tutorials/change-browser-tab-title-tab-not-active/">CHANGE BROWSER TAB TITLE WHEN TAB NOT ACTIVE&lt;/a>，&lt;a href="https://github.com/aben20807/blog-post/commit/4a468cb27289453f1a53ccb05db50343877438d8#diff-0aa74fe7c8cd2a2b79dab67ece16cb02">commit&lt;/a>，如何排擠手機：&lt;a href="https://stackoverflow.com/questions/3514784/what-is-the-best-way-to-detect-a-mobile-device-in-jquery/3540295#3540295">What is the best way to detect a mobile device in jQuery?&lt;/a>
&lt;img src="https://drive.google.com/open?id=1AF_3cXaG2gWU1VM5ybrrQDO2qXtEusGH" alt="google- ">&lt;/p>
&lt;h2 id="7-e-mail-subscribe-mailchimphttpsmailchimpcom">7. E-mail subscribe (&lt;a href="https://mailchimp.com/">mailchimp&lt;/a>)&lt;/h2>
&lt;p>原本 Blogger 有 G+ 當作一個社群平台來分享發布的文章，不過這裡就沒有了，我想說需要有一個方法來提供讀者訂閱，不能叫他自己去申請 GitHub 然後訂閱我網站的 repo 吧。所以我就找到這個服務，它免費版提供 2000 個訂閱者，一個月可以寄 12000 封 e-mail，對我來說算是非常夠用了(吧＠＠)，剛剛看原本還以為只有兩個人 (我跟我的分身帳號)，結果竟然多一個人了！還不來&lt;a href="https://aben20807.github.io/subscription/">訂閱&lt;/a>？&lt;/p>
&lt;p>mailchimp 的用法其實官網就有提供，我英文不太行的看久一點就可以架設好服務了，我相信你們可以的 (?)&lt;/p>
&lt;h2 id="8-google-analytics">8. google analytics&lt;/h2>
&lt;p>Google 的流量監測，Hugo 已經有寫好可以直接用，在 &lt;code>config.toml&lt;/code> 直接加上自己的 token 就好，然後還要上傳一個證明是自己網站的 html 檔案，放在 &lt;code>static/&lt;/code> 裡面就可以。上面有提到流量差異大致上就如下，我 Blogger 那邊已經很久沒更新了，一天還是快 100 個人造訪呢 OuO。
&lt;img src="https://drive.google.com/open?id=1XoxtAg5qZT_sDIrXc8HITfE5QBKN0nXF" alt="google-左：Blogger，右：這個網站QuQ">&lt;/p>
&lt;h2 id="9-hued">9. hued&lt;/h2>
&lt;p>因為每次編輯時都要用很長的路徑 &lt;code>content/posts/xxxx.md&lt;/code>，頗煩躁，所以就寫了一個把指令包起來的 script，安裝方式可以看 &lt;a href="https://github.com/aben20807/blog-post#hued">README&lt;/a>，還有補全喔，雖然應該是只有 oh-my-bash 可用。&lt;/p>
&lt;h2 id="10-disqus-評論系統">10. Disqus 評論系統&lt;/h2>
&lt;p>設定方式跟 google analytics 一樣簡單，簡單到我都忘了要設定&amp;hellip;.設定 short name 即可。&lt;/p></description></item><item><title>Emacs 安裝 rainbow-delimiters 插件</title><link>https://aben20807.github.io/posts/20190307-emacs-install-rainbow-delimiters/</link><pubDate>Thu, 07 Mar 2019 20:23:24 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190307-emacs-install-rainbow-delimiters/</guid><description>&lt;!-- https://drive.google.com/uc?export=view&amp;id= -->
&lt;p>恩&amp;hellip;.身為一個 vimer，我還是想試試看 emacs，所以就選了系上的一堂教 lisp 的課。&lt;br>
本篇記錄一下安裝插件的過程&lt;br>
(雖然我這篇還是用 vim 打的&amp;hellip;.&lt;/p>
&lt;p>這個插件的名稱是 &lt;code>rainbow-delimiters&lt;/code>，顧名思義就是讓對應的括號有相同的顏色，這在一堆括號的語言 lisp 中可以對初學者較為友善。&lt;/p>
&lt;h1 id="emacs-安裝">emacs 安裝&lt;/h1>
&lt;p>emacs 的安裝方式就還是提一下，不然我應該記不起來@@&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo add-apt-repository ppa:ubuntu-elisp/ppa
$ sudo apt-get update
$ sudo apt-get install emacs-snapshot emacs-snapshot-el
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="超基本按鍵">超基本按鍵&lt;/h1>
&lt;p>我是超新手，所以只暫時記錄最重要的@@&lt;/p>
&lt;ul>
&lt;li>&lt;code>ctrl-x ctrl-s&lt;/code>：儲存&lt;/li>
&lt;li>&lt;code>ctrl-x ctrl-c&lt;/code>：離開&lt;/li>
&lt;/ul>
&lt;h1 id="新增設定檔">新增設定檔&lt;/h1>
&lt;p>首先需要新增一個設定檔，就像 vim 中的 &lt;code>.vimrc&lt;/code> 一樣，而為了方便管理我使用 &lt;code>~/.emacs.d/init.el&lt;/code>，我們就直接用 emacs 編輯吧～&lt;/p>
&lt;p>Note. &lt;code>-nw&lt;/code> 可以用非 GUI 的方式開啟 emacs&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ mkdir ~/.emacs.d/
$ emacs -nw ~/.emacs.d/init.el
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="支援-melpahttpsmelpaorg-插件庫">支援 &lt;a href="https://melpa.org/#/">MELPA&lt;/a> 插件庫&lt;/h1>
&lt;p>打開之後貼上&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lisp" data-lang="lisp">(&lt;span style="color:#a6e22e">require&lt;/span> &lt;span style="color:#e6db74">&amp;#39;package&lt;/span>)
(&lt;span style="color:#66d9ef">let*&lt;/span> ((no-ssl (and (memq system-type &lt;span style="color:#f92672">&amp;#39;&lt;/span>(windows-nt ms-dos))
(&lt;span style="color:#a6e22e">not&lt;/span> (gnutls-available-p))))
(proto (&lt;span style="color:#66d9ef">if&lt;/span> no-ssl &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;https&amp;#34;&lt;/span>)))
&lt;span style="color:#75715e">;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired &lt;/span>
(add-to-list &lt;span style="color:#e6db74">&amp;#39;package-archives&lt;/span> (&lt;span style="color:#a6e22e">cons&lt;/span>&lt;span style="color:#e6db74">&amp;#34;melpa&amp;#34;&lt;/span>(concat proto&lt;span style="color:#e6db74">&amp;#34;://melpa.org/packages/&amp;#34;&lt;/span>)) &lt;span style="color:#66d9ef">t&lt;/span>)
&lt;span style="color:#75715e">;;(add-to-list &amp;#39;package-archives (cons&amp;#34;melpa-stable&amp;#34;(concat proto&amp;#34;://stable.melpa.org/packages/&amp;#34;)) t) &lt;/span>
(when (&lt;span style="color:#a6e22e">&amp;lt;&lt;/span> emacs-major-version &lt;span style="color:#ae81ff">24&lt;/span>)
&lt;span style="color:#75715e">;; For important compatibility libraries like cl-lib &lt;/span>
(add-to-list &lt;span style="color:#e6db74">&amp;#39;package-archives&lt;/span>&lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;gnu&amp;#34;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> (concat proto &lt;span style="color:#e6db74">&amp;#34;://elpa.gnu.org/packages/&amp;#34;&lt;/span>)))))
(package-initialize)
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="新增-rainbow-delimiters-插件">新增 &lt;code>rainbow-delimiters&lt;/code> 插件&lt;/h1>
&lt;p>退出 (上面有記錄怎麼儲存跟離開) 後重新開啟 emacs&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ emacs -nw
&lt;/code>&lt;/pre>&lt;/div>&lt;p>按下 &lt;code>alt-x&lt;/code> 後輸入 &lt;code>package-list-packages&lt;/code> 接著按下 &lt;code>Enter&lt;/code>
&lt;img src="https://drive.google.com/open?id=1tcS1Yxs-I0J1Nf63528PVypU7LmrhDhG" alt="google- ">&lt;/p>
&lt;p>會發現出現一個各種插件的頁面。&lt;/p>
&lt;p>搜尋方式請按 &lt;code>ctrl-s&lt;/code> 後輸入 &lt;code>rainbow-delimiters&lt;/code> 接著 &lt;code>Enter&lt;/code> 即可找到
&lt;img src="https://drive.google.com/open?id=1lQa5BBsjLRQxUheS41WTRi1maN1AtA90" alt="google- ">&lt;/p>
&lt;p>在那一行按下 &lt;code>i&lt;/code> 會發現最前方多了一個 &lt;code>I&lt;/code>&lt;/p>
&lt;p>Note. 要取消請按 &lt;code>u&lt;/code>
&lt;img src="https://drive.google.com/open?id=1DuzQMOTEc4MO4HByxDhKCpVu30fr3FvV" alt="google- ">&lt;/p>
&lt;p>選完後按下 &lt;code>x&lt;/code> 就可以安裝了&lt;/p>
&lt;p>結果最後還需要加東西到 &lt;code>~/emacs.d/init.el&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lisp" data-lang="lisp">(&lt;span style="color:#a6e22e">require&lt;/span> &lt;span style="color:#e6db74">&amp;#39;rainbow-delimiters&lt;/span>)
(add-hook &lt;span style="color:#e6db74">&amp;#39;prog-mode-hook&lt;/span> &lt;span style="color:#e6db74">&amp;#39;rainbow-delimiters-mode&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>改完之後會發現有很淺的變色了&lt;/p>
&lt;h1 id="自訂顏色">自訂顏色&lt;/h1>
&lt;p>結果就如封面所示。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lisp" data-lang="lisp">(custom-set-variables
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(package-selected-packages &lt;span style="color:#f92672">&amp;#39;&lt;/span>(rainbow-delimiters)))
(custom-set-faces
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(rainbow-delimiters-depth-1-face ((&lt;span style="color:#66d9ef">t&lt;/span> (&lt;span style="color:#e6db74">:foreground&lt;/span> &lt;span style="color:#e6db74">&amp;#34;dark orange&amp;#34;&lt;/span>))))
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(rainbow-delimiters-depth-2-face ((&lt;span style="color:#66d9ef">t&lt;/span> (&lt;span style="color:#e6db74">:foreground&lt;/span> &lt;span style="color:#e6db74">&amp;#34;deep pink&amp;#34;&lt;/span>))))
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(rainbow-delimiters-depth-3-face ((&lt;span style="color:#66d9ef">t&lt;/span> (&lt;span style="color:#e6db74">:foreground&lt;/span> &lt;span style="color:#e6db74">&amp;#34;chartreuse&amp;#34;&lt;/span>))))
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(rainbow-delimiters-depth-4-face ((&lt;span style="color:#66d9ef">t&lt;/span> (&lt;span style="color:#e6db74">:foreground&lt;/span> &lt;span style="color:#e6db74">&amp;#34;deep sky blue&amp;#34;&lt;/span>))))
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(rainbow-delimiters-depth-5-face ((&lt;span style="color:#66d9ef">t&lt;/span> (&lt;span style="color:#e6db74">:foreground&lt;/span> &lt;span style="color:#e6db74">&amp;#34;yellow&amp;#34;&lt;/span>))))
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(rainbow-delimiters-depth-6-face ((&lt;span style="color:#66d9ef">t&lt;/span> (&lt;span style="color:#e6db74">:foreground&lt;/span> &lt;span style="color:#e6db74">&amp;#34;orchid&amp;#34;&lt;/span>))))
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(rainbow-delimiters-depth-7-face ((&lt;span style="color:#66d9ef">t&lt;/span> (&lt;span style="color:#e6db74">:foreground&lt;/span> &lt;span style="color:#e6db74">&amp;#34;spring green&amp;#34;&lt;/span>))))
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(rainbow-delimiters-depth-8-face ((&lt;span style="color:#66d9ef">t&lt;/span> (&lt;span style="color:#e6db74">:foreground&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sienna1&amp;#34;&lt;/span>))))
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="參考資料">參考資料&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://5xruby.tw/posts/emacs-part1/">Emacs 入坑引導 - 打造自己的 Ruby IDE - Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.emacswiki.org/emacs/RainbowDelimiters">RainbowDelimiters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ericscrivner.me/2015/06/better-emacs-rainbow-delimiters-color-scheme/">Better Emacs Rainbow Delimiters Color Scheme&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>把 app 加到 ubuntu 的 dash 目錄</title><link>https://aben20807.github.io/posts/20190302-add-app-to-ubuntu-dash-home/</link><pubDate>Sat, 02 Mar 2019 10:40:02 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190302-add-app-to-ubuntu-dash-home/</guid><description>&lt;p>所謂的 dash 就有點像是在 windows 10 點擊「開始」出現的很多 app 的畫面。而在 ubuntu 中有些程式的安裝方式是從網路上下載壓縮檔後解壓縮，一般要啟動的話就需要先去打開那個資料夾再點擊，有點麻煩，所以就找了一個最簡單的方式將要用的程式加到 dash 中。&lt;/p>
&lt;p>測試系統：Ubuntu 18.04&lt;/p>
&lt;h1 id="使用-gnome-desktop-item-edit">使用 gnome-desktop-item-edit&lt;/h1>
&lt;p>首先安裝 &lt;code>gnome-desktop-item-edit&lt;/code> 這個工具&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt install --no-install-recommends gnome-panel
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接著新增一個應用程式&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo gnome-desktop-item-edit /usr/share/applications/ --create-new
&lt;/code>&lt;/pre>&lt;/div>&lt;p>出現一個小框框，填入名稱以及程式所在&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1YFjaDpgQhBUacfdD38UnId97hAoPG1QL" alt="google- ">&lt;/p>
&lt;p>點 OK 後就會出現了，不需要重新登入或關機&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1dRR1G6VrP2oid0S9QBvTvXVMeFHzGF8r" alt="google-最下排左邊數來第二個">&lt;/p>
&lt;p>圖標是預設的，若需要要修改就編輯一下檔案，注意檔名是剛剛取的名稱加上 .desktop 的副檔名&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo vim /usr/share/applications/VisualVM.desktop
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="加上-icon-路徑">加上 icon 路徑&lt;/h1>
&lt;p>&lt;img src="https://drive.google.com/open?id=1rAWhlWkLTVIJ8JhS_o-o-gZW1grBVbQU" alt="google- ">&lt;/p>
&lt;p>儲存後就可以看到結果了&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1P1k41x1OtC9bbsphoYVyNTBoA14xDTKf" alt="google- ">&lt;/p>
&lt;h1 id="參考">參考&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://linuxconfig.org/how-to-create-desktop-shortcut-launcher-on-ubuntu-18-04-bionic-beaver-linux#h6-3-desktop-shortcut-creation-with-gnome-desktop-item-edit">Desktop Shortcut creation with gnome-desktop-item-edit&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>訂閱囉</title><link>https://aben20807.github.io/posts/20190227-subscription/</link><pubDate>Wed, 27 Feb 2019 17:39:51 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190227-subscription/</guid><description>&lt;p>訂閱起來～訂閱起來～&lt;/p>
&lt;p>本篇主要是測試訂閱有沒有問題 (希望沒有&lt;/p>
&lt;p>要訂閱的話可以透過右上角的信箱圖案填寫 email&lt;/p>
&lt;p>或是真的懶的話：https://aben20807.github.io/subscription/&lt;/p>
&lt;p>如果是 Gmail 的話可能會被分到「促銷內容」可以透過篩選器喔。或是用右鍵來修改已經寄到信箱的信的標籤喔。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=19Ftzj_DlKmuTLeyybZw0V50ucBLHuiJ7" alt="google- ">&lt;/p></description></item><item><title>Talk About Shame</title><link>https://aben20807.github.io/posts/20190225-talk-about-shame/</link><pubDate>Mon, 25 Feb 2019 21:40:00 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190225-talk-about-shame/</guid><description>&lt;p>顧炎武的＜廉恥＞中提到&lt;/p>
&lt;blockquote>
&lt;p>四者之中，恥尤為要&lt;/p>
&lt;/blockquote>
&lt;p>其中的四者就是禮、義、廉、恥應該不用多說 (去複習國文啦&lt;/p>
&lt;h1 id="關於標題">關於標題&lt;/h1>
&lt;p>(有時候英文標題就懶的改了，不然就是改了有點怪，想這次的，所以我就不改囉＠＠&lt;/p>
&lt;p>說到英文，「恥」在英文翻譯是 shame，不過在四維的英文中其對應的是 honor。根據不專業的討論，shame 是貶義，而英文卻傾向用褒義表達，更進一步的去解釋可以想成「恥」是讓我們了解什麼是不榮耀的事，大概是這樣。&lt;/p>
&lt;p>(圖片有點震撼我知道 OuO&lt;/p>
&lt;h1 id="正題">正題&lt;/h1>
&lt;p>為何會突然講這個主題呢？其實很多事情都是先學會，然後在之後才會去遇到，甚至體會到一開始接觸到時沒有獲得的感觸。這次談的這個主題其實已經在腦海中想過頗多次，但就如同上述，是我在高中學到這段課文後過了很久才漸漸有看法。或許到大學這段期間還不算久，我想會有更多的東西可能是我到老還無法了解的吧。&lt;/p>
&lt;p>總結那篇課文，其認為人會違反一些道德倫理，是因為無恥所導致。&lt;/p>
&lt;p>結合到日常生活中，最微小的可以從那些不遵守交通規則的人身上看出，他們將這些視為理所當然，例如在台南闖紅燈是再稀鬆平常不過的事了，在那些人眼中我看不到一絲的羞恥感。這或許也是現行法律所無法顧慮的吧，之前上課總說法律是道德的最低標準，這也是為何重刑不管用，酒駕的還是會酒駕，因為罰錢根本是小事，內心的道德感一點也沒有覺得自己做錯。我覺得可能要更善加利用輿論壓力才能有效降低，例如酒駕就會有標籤，可能求職時就需要出示之類的，但這都只是外部的約束，主要還是要自己感覺到「恥」。&lt;/p>
&lt;p>除了這些，更有人會合理化自己的行為，認為自己沒有影響別人什麼的，其實就需要去思考那為何需要訂定交通規則。&lt;/p>
&lt;p>另外，亂丟垃圾也是，真心不懂為何有人就是會把垃圾留在離垃圾桶不到五步距離的飲水機上。總之族繁不及備載，這些事一直都會發生。&lt;/p>
&lt;h1 id="結論">結論&lt;/h1>
&lt;p>好啦，其實也沒有要戰什麼，其實是想表達自己看到的現象彷彿跟以前學到的有些許映射。總之呢，希望世界和平，做人有多一點點羞恥心去用不同的角度去看待事情，這樣才能打造更和諧的社會。&lt;/p>
&lt;h1 id="後記">後記&lt;/h1>
&lt;p>其實我是覺得我可能過於看重這件事了，所以會變得比較怕去麻煩別人，當然這有好有壞，我是不太建議像我這樣的個性，因為時常要跟自己打架 XDD。人活著也不是要一直去注意他人的眼光，去找一個適合自己的光譜位置，然後貫徹自己的想法吧。&lt;/p></description></item><item><title>Makefile for Testing</title><link>https://aben20807.github.io/posts/20190216-makefile-for-testing/</link><pubDate>Sat, 16 Feb 2019 10:00:48 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190216-makefile-for-testing/</guid><description>&lt;p>Makefile 可以執行終端機的指令，所以也可以搭配重新導向 (redirection) 用來做簡單測試&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-make" data-lang="make">&lt;span style="color:#a6e22e">test&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
./a.out &amp;lt; input.txt &amp;gt; output.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>這樣只需要用 &lt;code>$ make test&lt;/code> 就可以測試輸入 input.txt，並把結果存到 output.txt&lt;/p>
&lt;h1 id="舊方法">舊方法&lt;/h1>
&lt;p>不過若是有很多種輸入測資的話會有點麻煩，當然還是可以寫成這樣&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-make" data-lang="make">&lt;span style="color:#a6e22e">test1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
./a.out &amp;lt; input1.txt &amp;gt; output1.txt
&lt;span style="color:#a6e22e">test2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
./a.out &amp;lt; input2.txt &amp;gt; output2.txt
&lt;span style="color:#a6e22e">test3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
./a.out &amp;lt; input3.txt &amp;gt; output3.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或是&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-make" data-lang="make">&lt;span style="color:#a6e22e">test&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
./a.out &amp;lt; input1.txt &amp;gt; output1.txt
./a.out &amp;lt; input2.txt &amp;gt; output2.txt
./a.out &amp;lt; input3.txt &amp;gt; output3.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>這樣寫的缺點就是每次測資增加的時候舊需要修改 Makefile&lt;/p>
&lt;h1 id="makefile-內建函式">Makefile 內建函式&lt;/h1>
&lt;p>不過其實有更好的寫法，利用 makefile 內建的函式&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-make" data-lang="make">INPUT_DIR &lt;span style="color:#f92672">=&lt;/span> input/linux/
INPUTS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard &lt;span style="color:#66d9ef">$(&lt;/span>INPUT_DIR&lt;span style="color:#66d9ef">)&lt;/span>*.txt&lt;span style="color:#66d9ef">)&lt;/span>
OUTPUT_DIR &lt;span style="color:#f92672">=&lt;/span> output/linux/
OUTPUTS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>addprefix &lt;span style="color:#66d9ef">$(&lt;/span>OUTPUT_DIR&lt;span style="color:#66d9ef">)&lt;/span>,&lt;span style="color:#66d9ef">$(&lt;/span>notdir &lt;span style="color:#66d9ef">$(&lt;/span>INPUTS&lt;span style="color:#66d9ef">)))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>wildcard&lt;/code>: 獲取輸入檔案列表&lt;/li>
&lt;li>&lt;code>notdir&lt;/code>: 獲得檔案名稱 (去掉前面路徑)&lt;/li>
&lt;li>&lt;code>addprefix&lt;/code>: 加上前綴 (修改輸出路徑)&lt;/li>
&lt;/ul>
&lt;p>這樣的優點就是只要 input/linux/ 中有多的 .txt 檔就會自動加入測試，不需要修改 Makefile&lt;/p>
&lt;h1 id="完整範例">完整範例&lt;/h1>
&lt;h2 id="檔案們">檔案們&lt;/h2>
&lt;h3 id="tc">&lt;code>t.c&lt;/code>:&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">int&lt;/span> a, b;
scanf(&lt;span style="color:#e6db74">&amp;#34;%d%d&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>a, &lt;span style="color:#f92672">&amp;amp;&lt;/span>b);
printf(&lt;span style="color:#e6db74">&amp;#34;%d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, a &lt;span style="color:#f92672">+&lt;/span> b);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="makefile">&lt;code>Makefile&lt;/code>:&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-make" data-lang="make">CC &lt;span style="color:#f92672">=&lt;/span> gcc
EXEC &lt;span style="color:#f92672">=&lt;/span> a.out
INPUT_DIR &lt;span style="color:#f92672">=&lt;/span> input/linux/
INPUTS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard &lt;span style="color:#66d9ef">$(&lt;/span>INPUT_DIR&lt;span style="color:#66d9ef">)&lt;/span>*.txt&lt;span style="color:#66d9ef">)&lt;/span>
OUTPUT_DIR &lt;span style="color:#f92672">=&lt;/span> output/linux/
OUTPUTS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>addprefix &lt;span style="color:#66d9ef">$(&lt;/span>OUTPUT_DIR&lt;span style="color:#66d9ef">)&lt;/span>,&lt;span style="color:#66d9ef">$(&lt;/span>notdir &lt;span style="color:#66d9ef">$(&lt;/span>INPUTS&lt;span style="color:#66d9ef">)))&lt;/span>
&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> all, test, mk_parent_dir
&lt;span style="color:#a6e22e">all&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>EXEC&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#a6e22e">mk_parent_dir&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
@mkdir -p &lt;span style="color:#66d9ef">$(&lt;/span>OUTPUT_DIR&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#a6e22e">test&lt;/span>&lt;span style="color:#f92672">:&lt;/span> mk_parent_dir &lt;span style="color:#66d9ef">$(&lt;/span>OUTPUTS&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#a6e22e">$(OUTPUT_DIR)%.txt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>INPUT_DIR&lt;span style="color:#66d9ef">)&lt;/span>%.txt &lt;span style="color:#66d9ef">$(&lt;/span>EXEC&lt;span style="color:#66d9ef">)&lt;/span>
./a.out &amp;lt; $&amp;lt; &amp;gt; $@
@cat $&amp;lt; $@ &lt;span style="color:#75715e"># cat the content of file&lt;/span>
&lt;span style="color:#a6e22e">$(EXEC)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> t.c
&lt;span style="color:#66d9ef">$(&lt;/span>CC&lt;span style="color:#66d9ef">)&lt;/span> t.c
&lt;span style="color:#a6e22e">clean&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>OUTPUT_DIR&lt;span style="color:#66d9ef">)&lt;/span> a.out
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="檔案架構">檔案架構&lt;/h3>
&lt;pre>&lt;code>$ tree .
.
├── input
│   └── linux
│   ├── test1.txt
│   ├── test2.txt
│   └── test3.txt
├── Makefile
├── output
└── t.c
&lt;/code>&lt;/pre>&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="指令同為--make-test">指令同為 &lt;code>$ make test&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ make test
gcc t.c
./a.out &amp;lt; input/linux/test2.txt &amp;gt; output/linux/test2.txt
&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;span style="color:#ae81ff">7&lt;/span>
./a.out &amp;lt; input/linux/test3.txt &amp;gt; output/linux/test3.txt
&lt;span style="color:#ae81ff">78&lt;/span> &lt;span style="color:#ae81ff">99&lt;/span>
&lt;span style="color:#ae81ff">177&lt;/span>
./a.out &amp;lt; input/linux/test1.txt &amp;gt; output/linux/test1.txt
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;span style="color:#ae81ff">7&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="結果檔案架構">結果檔案架構&lt;/h3>
&lt;pre>&lt;code>$ tree .
.
├── a.out
├── input
│   └── linux
│   ├── test1.txt
│   ├── test2.txt
│   └── test3.txt
├── Makefile
├── output
│   └── linux
│   ├── test1.txt
│   ├── test2.txt
│   └── test3.txt
└── t.c
&lt;/code>&lt;/pre>&lt;h1 id="後記">後記&lt;/h1>
&lt;p>上面的簡單例子中可能看不出 &lt;code>$(INPUTS)&lt;/code> 跟 &lt;code>$(OUTPUTS)&lt;/code> 的用途，不過在相依多的話可以直接代表全部的檔案，但若是需要做名稱配對的話還是需要 &lt;code>%&lt;/code> 出馬，就像 &lt;code>$(OUTPUT_DIR)%.txt: $(INPUT_DIR)%.txt&lt;/code> 來表示輸入輸出的檔名要一致。&lt;/p></description></item><item><title>咖啡木蠹蛾</title><link>https://aben20807.github.io/posts/20190212-zeuzera-coffeae-nietner/</link><pubDate>Tue, 12 Feb 2019 22:51:30 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190212-zeuzera-coffeae-nietner/</guid><description>&lt;p>(以下圖片皆攝於 2019.02.03)&lt;/p>
&lt;p>咖啡木蠹蛾，學名 Zeuzera Coffeae Nietner
詳細可以去行政院農業委員會 農業試驗所提供的&lt;a href="http://web.tari.gov.tw/techcd/%E6%9E%9C%E6%A8%B9/%E5%B8%B8%E7%B6%A0%E6%9E%9C%E6%A8%B9/%E6%A5%8A%E6%A1%83/%E8%9F%B2%E5%AE%B3/%E6%A5%8A%E6%A1%83-%E5%92%96%E5%95%A1%E6%9C%A8%E8%A0%B9%E8%9B%BE.htm">圖鑑&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=14FU_jdoqFlTPkXxMENhMgayz86EkCfeGvg" alt="google-點圖可放大喔 OuO">&lt;/p>
&lt;p>總之呢就是害蟲，幼蟲會把樹木的枝條蛀空。&lt;/p>
&lt;p>我們家就是幾乎不噴農藥雜草也不會一定要用除草劑處理的光禿禿的，所以難免有害蟲。
&lt;img src="https://drive.google.com/open?id=1W2XiqPRhfVaMGkPwO_wRMIiIO_o1tdZH3g" alt="google-灑水中的葡萄園">&lt;/p>
&lt;p>這隻剛從蛹中出來就被我拍到，然後通報給老媽，她趁牠還沒出去產卵就把牠處理掉了。&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1hssv_igXB1P3KEfEcCT5o2lbT64TF8JcbA" alt="google-蛹，仔細看第1張圖會看到喔">&lt;/p>
&lt;p>&lt;img src="https://drive.google.com/open?id=1GzQL4C-PyzQEkUnv7T2InNbzfUyjR2qZRg" alt="google-葡萄營養珠(老媽說是氮珠)">&lt;/p></description></item><item><title>Features</title><link>https://aben20807.github.io/posts/features/</link><pubDate>Wed, 06 Feb 2019 09:37:31 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/features/</guid><description>&lt;p>記錄一下一些特性和使用方式&lt;/p>
&lt;h1 id="標題-heading">標題 (heading)&lt;/h1>
&lt;pre>&lt;code># h1
## h2
### h3
#### h4 支援 emoji 😄
##### h5 支援中文~
###### h6
####### h7 最多只有到 6 級
&lt;/code>&lt;/pre>&lt;h1 id="h1">h1&lt;/h1>
&lt;h2 id="h2">h2&lt;/h2>
&lt;h3 id="h3">h3&lt;/h3>
&lt;h4 id="h4-支援-emoji-">h4 支援 emoji 😄&lt;/h4>
&lt;h5 id="h5-支援中文">h5 支援中文~&lt;/h5>
&lt;h6 id="h6">h6&lt;/h6>
&lt;p>####### h7 最多只有到 6 級&lt;/p>
&lt;p>右邊會有浮動 TOC (table of contents)，可點擊！&lt;br>
只會顯示 h1 ~ h3 過長會變成 &amp;hellip;&lt;/p>
&lt;h3 id="test中文-1-12sdofjsojdfojasodjfosjofdsoifjaosjdofj">test中文 1-12sdofjsojdfojasodjfosjofdsoifjaosjdofj&lt;/h3>
&lt;h1 id="code-section-refhttpsgohugoiocontent-managementsyntax-highlightinghighlighting-in-code-fences">Code section &lt;a href="https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences">ref&lt;/a>&lt;/h1>
&lt;pre>
```c {linenos=table,hl_lines=[2,"4-6"],linenostart=199}
#include &lt;stdio.h>
int main()
{
int a = 0;
return a;
}
```
&lt;/pre>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">199
&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">200
&lt;/span>&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">201
&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">202
&lt;/span>&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">203
&lt;/span>&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">204
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>{
&lt;span style="display:block;width:100%;background-color:#3c3d38"> &lt;span style="color:#66d9ef">int&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38"> &lt;span style="color:#66d9ef">return&lt;/span> a;
&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">}
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="強調字型">強調字型&lt;/h1>
&lt;p>可參考：https://www.markdownguide.org/basic-syntax/#emphasis&lt;/p>
&lt;pre>&lt;code>__粗體__
**粗體**
_斜體_
*斜體*
__*粗斜體*__
&lt;/code>&lt;/pre>&lt;p>&lt;strong>粗體&lt;/strong>&lt;br>
&lt;strong>粗體&lt;/strong>&lt;br>
&lt;em>斜體&lt;/em>&lt;br>
&lt;em>斜體&lt;/em>&lt;br>
&lt;strong>&lt;em>粗斜體&lt;/em>&lt;/strong>&lt;/p>
&lt;h1 id="橫線">橫線&lt;/h1>
&lt;pre>&lt;code>---
&lt;/code>&lt;/pre>&lt;hr>
&lt;h1 id="項目-bullet">項目 (Bullet)&lt;/h1>
&lt;pre>&lt;code>+ a
+ 1
+ 2
+ b
1. OuO
2. QuQ
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>a
&lt;ul>
&lt;li>1&lt;/li>
&lt;li>2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>b
&lt;ol>
&lt;li>OuO&lt;/li>
&lt;li>QuQ&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h1 id="引用">引用&lt;/h1>
&lt;pre>&lt;code>&amp;gt; The more I learn, the more I realize how much I don't know.
&amp;gt; --- Albert Einstein
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>The more I learn, the more I realize how much I don&amp;rsquo;t know.&lt;br>
&amp;mdash; Albert Einstein&lt;/p>
&lt;/blockquote>
&lt;h1 id="插入圖片">插入圖片&lt;/h1>
&lt;p>目前並不打算直接上傳到 github，所以找了一些方式&lt;br>
一般圖片&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">![&lt;span style="color:#f92672">alt&lt;/span>](&lt;span style="color:#a6e22e">https://drive.google.com/uc?export=view&amp;amp;id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://drive.google.com/uc?export=view&amp;amp;id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC" alt="alt">&lt;/p>
&lt;p>這裡大部份會使用 google 雲端當作圖床&lt;br>
不過從取得連結那裡會拿到：https://drive.google.com/open?id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC&lt;br>
要改成上面的連結才行，所以我動了一些手腳，下面還會顯示標題說明，點擊即可在新分頁開啟可放大的圖片瀏覽器&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">![&lt;span style="color:#f92672">google-title here&lt;/span>](&lt;span style="color:#a6e22e">https://drive.google.com/open?id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://drive.google.com/open?id=1LipAb-4seXENzvyjSYbgtCqEQUfzGziC" alt="google-title here">&lt;/p>
&lt;h1 id="youtube">YouTube&lt;/h1>
&lt;pre>
{{&amp;lt; youtube &amp;quot;&lt;span>https://www.youtube.com/watch?v=jC3jnC1dsAg&lt;/span>&amp;quot; &amp;gt;}}
&lt;/pre>
&lt;div style=" position: relative; width: 100%; height: 100%;
padding-bottom: 56.25%; /*16:9*/ ">
&lt;iframe src="https://www.youtube.com/embed/jC3jnC1dsAg?start=1" style=" position: absolute; top: 0; left: 0; width: 100%; height: 100%;" class="center"
allowfullscreen frameborder="0" title="YouTube Video">
&lt;/iframe>
&lt;/div>
&lt;pre>
{{&amp;lt; youtube &amp;quot;&lt;span>https://www.youtube.com/watch?v=jC3jnC1dsAg?t=500&lt;/span>&amp;quot; &amp;gt;}}
&lt;/pre>
&lt;div style=" position: relative; width: 100%; height: 100%;
padding-bottom: 56.25%; /*16:9*/ ">
&lt;iframe src="https://www.youtube.com/embed/jC3jnC1dsAg?start=500" style=" position: absolute; top: 0; left: 0; width: 100%; height: 100%;" class="center"
allowfullscreen frameborder="0" title="YouTube Video">
&lt;/iframe>
&lt;/div>
&lt;h1 id="section-refhttpscodepeniodobsondevpenggrjwv">Section &lt;a href="https://codepen.io/DobsonDev/pen/GgRJwv">ref&lt;/a>&lt;/h1>
&lt;pre>
{{&amp;lt; alert info >}}
**Beware !** is a text
{{&amp;lt; /alert >}}
{{&amp;lt; alert success >}}
**Beware !** is a text
{{&amp;lt; /alert >}}
{{&amp;lt; alert warning >}}
**Beware !** is a text
{{&amp;lt; /alert >}}
{{&amp;lt; alert danger >}}
**Beware !** is a text
{{&amp;lt; /alert >}}
&lt;/pre>
&lt;div class="info-msg">
&lt;i class="fa fa-info-circle">&lt;/i>
&lt;strong>Beware !&lt;/strong> is a text
&lt;/div>
&lt;div class="success-msg">
&lt;i class="fa fa-check">&lt;/i>
&lt;strong>Beware !&lt;/strong> is a text
&lt;/div>
&lt;div class="warning-msg">
&lt;i class="fa fa-exclamation-triangle">&lt;/i>
&lt;strong>Beware !&lt;/strong> is a text
&lt;/div>
&lt;div class="alert error-msg">
&lt;i class="fa fa-times-circle">&lt;/i>
&lt;strong>Beware !&lt;/strong> is a text
&lt;/div>
&lt;h1 id="details-summary-section">Details, summary section&lt;/h1>
&lt;pre>
{{&amp;lt; summary "Click~" >}}
# OuO
OuO
+ OuO
{{&amp;lt; /summary >}}
&lt;/pre>
&lt;details>
&lt;summary>&lt;span>Click~ &lt;/span>&lt;/summary>
&lt;h1 id="ouo">OuO&lt;/h1>
&lt;p>OuO&lt;/p>
&lt;ul>
&lt;li>OuO&lt;/li>
&lt;/ul>
&lt;/details></description></item><item><title>Happy New Year</title><link>https://aben20807.github.io/posts/20190204-happy-new-year/</link><pubDate>Mon, 04 Feb 2019 23:03:48 +0800</pubDate><author>aben20807@gmail.com (Huang Po-Hsuan)</author><guid>https://aben20807.github.io/posts/20190204-happy-new-year/</guid><description>&lt;p>今天除夕，首先祝各位新年快樂~&lt;/p>
&lt;p>第一天用比較偏累，基本上把會用的東西都裝一裝了，例如：google analysitcs, disqus。likecoin 的部份我覺得可能還要找方法，不然拖慢許多載入速度。&lt;/p>
&lt;p>總之，主因大致上可以推給 G+ 關閉吧，加上在 Blogger 那邊改主題頗累 (外加煩躁) 選擇 Hugo 主要是速度吧，號稱目前最快，原本考慮的 Jekyll 跟 Hexo 似乎在文章多的時候都會慢，所以就直上了(?)。&lt;/p>
&lt;p>這裡會發的文會更偏向記錄，要說是日記也是可，不過我相信我自己絕對不可能日更，尤其是已經在研究所幹活了，可能這篇第一篇也是最後一篇也說不定。&lt;/p>
&lt;p>恩&amp;hellip;也不知道怎麼結尾，那就這樣吧 OuO&lt;/p></description></item></channel></rss>